
VCU_V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         00007a68  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08007c18  08007c18  00017c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d6c  08007d6c  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08007d6c  08007d6c  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007d6c  08007d6c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d6c  08007d6c  00017d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d70  08007d70  00017d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08007d74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000025c8  20000060  08007dd4  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002628  08007dd4  00022628  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025a14  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a64  00000000  00000000  00045ae7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000021f8  00000000  00000000  0004a550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001a54  00000000  00000000  0004c748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004b96  00000000  00000000  0004e19c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025619  00000000  00000000  00052d32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00122c17  00000000  00000000  0007834b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009604  00000000  00000000  0019af64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  001a4568  2**0
=======
  1 .text         00007a10  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08007bc0  08007bc0  00017bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d74  08007d74  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08007d74  08007d74  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007d74  08007d74  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d74  08007d74  00017d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d78  08007d78  00017d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007d7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024b8  20000074  08007df0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000252c  08007df0  0002252c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000273d0  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048e6  00000000  00000000  00047474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021f8  00000000  00000000  0004bd60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002020  00000000  00000000  0004df58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004b96  00000000  00000000  0004ff78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024589  00000000  00000000  00054b0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001228d9  00000000  00000000  00079097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019b970  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000963c  00000000  00000000  0019b9c0  2**2
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
<<<<<<< HEAD
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007c00 	.word	0x08007c00
=======
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007ba8 	.word	0x08007ba8
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
<<<<<<< HEAD
 80001e8:	20000064 	.word	0x20000064
 80001ec:	08007c00 	.word	0x08007c00
=======
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08007ba8 	.word	0x08007ba8
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

080001f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< HEAD
 80001f4:	f000 fe3b 	bl	8000e6e <HAL_Init>
=======
 80001f4:	f000 fe1d 	bl	8000e32 <HAL_Init>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001f8:	f000 f85c 	bl	80002b4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80001fc:	f000 f8a4 	bl	8000348 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000200:	f000 fa5a 	bl	80006b8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000204:	f000 f8d0 	bl	80003a8 <MX_ADC1_Init>
  MX_CAN1_Init();
 8000208:	f000 f944 	bl	8000494 <MX_CAN1_Init>
  MX_CAN2_Init();
 800020c:	f000 f976 	bl	80004fc <MX_CAN2_Init>
  MX_I2C2_Init();
 8000210:	f000 f9a8 	bl	8000564 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000214:	f000 f9e4 	bl	80005e0 <MX_SPI1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000218:	f000 fa20 	bl	800065c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
<<<<<<< HEAD
 800021c:	f004 fe8e 	bl	8004f3c <osKernelInitialize>
=======
 800021c:	f004 fe4e 	bl	8004ebc <osKernelInitialize>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of LightControl */
  LightControlHandle = osThreadNew(StartlLightControl, NULL, &LightControl_attributes);
 8000220:	4a15      	ldr	r2, [pc, #84]	; (8000278 <main+0x88>)
 8000222:	2100      	movs	r1, #0
 8000224:	4815      	ldr	r0, [pc, #84]	; (800027c <main+0x8c>)
<<<<<<< HEAD
 8000226:	f004 fed3 	bl	8004fd0 <osThreadNew>
=======
 8000226:	f004 fe93 	bl	8004f50 <osThreadNew>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
 800022a:	4603      	mov	r3, r0
 800022c:	4a14      	ldr	r2, [pc, #80]	; (8000280 <main+0x90>)
 800022e:	6013      	str	r3, [r2, #0]

  /* creation of CarData */
  CarDataHandle = osThreadNew(StartCarData, NULL, &CarData_attributes);
 8000230:	4a14      	ldr	r2, [pc, #80]	; (8000284 <main+0x94>)
 8000232:	2100      	movs	r1, #0
 8000234:	4814      	ldr	r0, [pc, #80]	; (8000288 <main+0x98>)
<<<<<<< HEAD
 8000236:	f004 fecb 	bl	8004fd0 <osThreadNew>
=======
 8000236:	f004 fe8b 	bl	8004f50 <osThreadNew>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
 800023a:	4603      	mov	r3, r0
 800023c:	4a13      	ldr	r2, [pc, #76]	; (800028c <main+0x9c>)
 800023e:	6013      	str	r3, [r2, #0]

  /* creation of DataCAN */
  DataCANHandle = osThreadNew(SendData, NULL, &DataCAN_attributes);
 8000240:	4a13      	ldr	r2, [pc, #76]	; (8000290 <main+0xa0>)
 8000242:	2100      	movs	r1, #0
 8000244:	4813      	ldr	r0, [pc, #76]	; (8000294 <main+0xa4>)
<<<<<<< HEAD
 8000246:	f004 fec3 	bl	8004fd0 <osThreadNew>
=======
 8000246:	f004 fe83 	bl	8004f50 <osThreadNew>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
 800024a:	4603      	mov	r3, r0
 800024c:	4a12      	ldr	r2, [pc, #72]	; (8000298 <main+0xa8>)
 800024e:	6013      	str	r3, [r2, #0]

  /* creation of MotorControl */
  MotorControlHandle = osThreadNew(StartMotorInput, NULL, &MotorControl_attributes);
 8000250:	4a12      	ldr	r2, [pc, #72]	; (800029c <main+0xac>)
 8000252:	2100      	movs	r1, #0
 8000254:	4812      	ldr	r0, [pc, #72]	; (80002a0 <main+0xb0>)
<<<<<<< HEAD
 8000256:	f004 febb 	bl	8004fd0 <osThreadNew>
=======
 8000256:	f004 fe7b 	bl	8004f50 <osThreadNew>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
 800025a:	4603      	mov	r3, r0
 800025c:	4a11      	ldr	r2, [pc, #68]	; (80002a4 <main+0xb4>)
 800025e:	6013      	str	r3, [r2, #0]

  /* creation of ReadingSensor */
  ReadingSensorHandle = osThreadNew(StartSensor, NULL, &ReadingSensor_attributes);
 8000260:	4a11      	ldr	r2, [pc, #68]	; (80002a8 <main+0xb8>)
 8000262:	2100      	movs	r1, #0
 8000264:	4811      	ldr	r0, [pc, #68]	; (80002ac <main+0xbc>)
<<<<<<< HEAD
 8000266:	f004 feb3 	bl	8004fd0 <osThreadNew>
=======
 8000266:	f004 fe73 	bl	8004f50 <osThreadNew>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
 800026a:	4603      	mov	r3, r0
 800026c:	4a10      	ldr	r2, [pc, #64]	; (80002b0 <main+0xc0>)
 800026e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
<<<<<<< HEAD
 8000270:	f004 fe88 	bl	8004f84 <osKernelStart>
=======
 8000270:	f004 fe48 	bl	8004f04 <osKernelStart>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000274:	e7fe      	b.n	8000274 <main+0x84>
 8000276:	bf00      	nop
<<<<<<< HEAD
 8000278:	08007c70 	.word	0x08007c70
 800027c:	08000805 	.word	0x08000805
 8000280:	200006f8 	.word	0x200006f8
 8000284:	08007c94 	.word	0x08007c94
 8000288:	08000815 	.word	0x08000815
 800028c:	200006fc 	.word	0x200006fc
 8000290:	08007cb8 	.word	0x08007cb8
 8000294:	08000825 	.word	0x08000825
 8000298:	20000700 	.word	0x20000700
 800029c:	08007cdc 	.word	0x08007cdc
 80002a0:	08000835 	.word	0x08000835
 80002a4:	20000704 	.word	0x20000704
 80002a8:	08007d00 	.word	0x08007d00
 80002ac:	08000845 	.word	0x08000845
 80002b0:	20000708 	.word	0x20000708
=======
 8000278:	08007c18 	.word	0x08007c18
 800027c:	080007d9 	.word	0x080007d9
 8000280:	2000070c 	.word	0x2000070c
 8000284:	08007c3c 	.word	0x08007c3c
 8000288:	080007e9 	.word	0x080007e9
 800028c:	20000710 	.word	0x20000710
 8000290:	08007c60 	.word	0x08007c60
 8000294:	080007f9 	.word	0x080007f9
 8000298:	20000714 	.word	0x20000714
 800029c:	08007c84 	.word	0x08007c84
 80002a0:	08000809 	.word	0x08000809
 80002a4:	20000718 	.word	0x20000718
 80002a8:	08007ca8 	.word	0x08007ca8
 80002ac:	08000819 	.word	0x08000819
 80002b0:	2000071c 	.word	0x2000071c
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

080002b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b096      	sub	sp, #88	; 0x58
 80002b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ba:	f107 0314 	add.w	r3, r7, #20
 80002be:	2244      	movs	r2, #68	; 0x44
 80002c0:	2100      	movs	r1, #0
 80002c2:	4618      	mov	r0, r3
<<<<<<< HEAD
 80002c4:	f007 fbb2 	bl	8007a2c <memset>
=======
 80002c4:	f007 fba6 	bl	8007a14 <memset>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c8:	463b      	mov	r3, r7
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
 80002ce:	605a      	str	r2, [r3, #4]
 80002d0:	609a      	str	r2, [r3, #8]
 80002d2:	60da      	str	r2, [r3, #12]
 80002d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002d6:	f44f 7000 	mov.w	r0, #512	; 0x200
<<<<<<< HEAD
 80002da:	f002 fc27 	bl	8002b2c <HAL_PWREx_ControlVoltageScaling>
=======
 80002da:	f002 fbe7 	bl	8002aac <HAL_PWREx_ControlVoltageScaling>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d001      	beq.n	80002e8 <SystemClock_Config+0x34>
  {
    Error_Handler();
<<<<<<< HEAD
 80002e4:	f000 fac8 	bl	8000878 <Error_Handler>
=======
 80002e4:	f000 fab2 	bl	800084c <Error_Handler>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80002e8:	2314      	movs	r3, #20
 80002ea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_BYPASS;
 80002ec:	2305      	movs	r3, #5
 80002ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002f0:	2301      	movs	r3, #1
 80002f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 1;
 80002f4:	2301      	movs	r3, #1
 80002f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002f8:	2360      	movs	r3, #96	; 0x60
 80002fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002fc:	2300      	movs	r3, #0
 80002fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000300:	f107 0314 	add.w	r3, r7, #20
 8000304:	4618      	mov	r0, r3
<<<<<<< HEAD
 8000306:	f002 fc77 	bl	8002bf8 <HAL_RCC_OscConfig>
=======
 8000306:	f002 fc37 	bl	8002b78 <HAL_RCC_OscConfig>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <SystemClock_Config+0x60>
  {
    Error_Handler();
<<<<<<< HEAD
 8000310:	f000 fab2 	bl	8000878 <Error_Handler>
=======
 8000310:	f000 fa9c 	bl	800084c <Error_Handler>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000314:	230f      	movs	r3, #15
 8000316:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000318:	2300      	movs	r3, #0
 800031a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800031c:	2300      	movs	r3, #0
 800031e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000320:	2300      	movs	r3, #0
 8000322:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000324:	2300      	movs	r3, #0
 8000326:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000328:	463b      	mov	r3, r7
 800032a:	2100      	movs	r1, #0
 800032c:	4618      	mov	r0, r3
<<<<<<< HEAD
 800032e:	f003 f87d 	bl	800342c <HAL_RCC_ClockConfig>
=======
 800032e:	f003 f83d 	bl	80033ac <HAL_RCC_ClockConfig>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <SystemClock_Config+0x88>
  {
    Error_Handler();
<<<<<<< HEAD
 8000338:	f000 fa9e 	bl	8000878 <Error_Handler>
=======
 8000338:	f000 fa88 	bl	800084c <Error_Handler>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
<<<<<<< HEAD
 800033c:	f003 fdb2 	bl	8003ea4 <HAL_RCCEx_EnableMSIPLLMode>
=======
 800033c:	f003 fd72 	bl	8003e24 <HAL_RCCEx_EnableMSIPLLMode>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
}
 8000340:	bf00      	nop
 8000342:	3758      	adds	r7, #88	; 0x58
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}

08000348 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b0a4      	sub	sp, #144	; 0x90
 800034c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800034e:	1d3b      	adds	r3, r7, #4
 8000350:	228c      	movs	r2, #140	; 0x8c
 8000352:	2100      	movs	r1, #0
 8000354:	4618      	mov	r0, r3
<<<<<<< HEAD
 8000356:	f007 fb69 	bl	8007a2c <memset>
=======
 8000356:	f007 fb5d 	bl	8007a14 <memset>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 800035a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800035e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000360:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000364:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000368:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800036c:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800036e:	2301      	movs	r3, #1
 8000370:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000372:	2301      	movs	r3, #1
 8000374:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000376:	2308      	movs	r3, #8
 8000378:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800037a:	2302      	movs	r3, #2
 800037c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800037e:	2302      	movs	r3, #2
 8000380:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000382:	2302      	movs	r3, #2
 8000384:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8000386:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 800038a:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800038c:	1d3b      	adds	r3, r7, #4
 800038e:	4618      	mov	r0, r3
<<<<<<< HEAD
 8000390:	f003 fa8c 	bl	80038ac <HAL_RCCEx_PeriphCLKConfig>
=======
 8000390:	f003 fa4c 	bl	800382c <HAL_RCCEx_PeriphCLKConfig>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
<<<<<<< HEAD
 800039a:	f000 fa6d 	bl	8000878 <Error_Handler>
=======
 800039a:	f000 fa57 	bl	800084c <Error_Handler>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }
}
 800039e:	bf00      	nop
 80003a0:	3790      	adds	r7, #144	; 0x90
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
	...

080003a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b08a      	sub	sp, #40	; 0x28
 80003ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80003ae:	f107 031c 	add.w	r3, r7, #28
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]
 80003b6:	605a      	str	r2, [r3, #4]
 80003b8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	2200      	movs	r2, #0
 80003be:	601a      	str	r2, [r3, #0]
 80003c0:	605a      	str	r2, [r3, #4]
 80003c2:	609a      	str	r2, [r3, #8]
 80003c4:	60da      	str	r2, [r3, #12]
 80003c6:	611a      	str	r2, [r3, #16]
 80003c8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003ca:	4b2f      	ldr	r3, [pc, #188]	; (8000488 <MX_ADC1_Init+0xe0>)
 80003cc:	4a2f      	ldr	r2, [pc, #188]	; (800048c <MX_ADC1_Init+0xe4>)
 80003ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003d0:	4b2d      	ldr	r3, [pc, #180]	; (8000488 <MX_ADC1_Init+0xe0>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003d6:	4b2c      	ldr	r3, [pc, #176]	; (8000488 <MX_ADC1_Init+0xe0>)
 80003d8:	2200      	movs	r2, #0
 80003da:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003dc:	4b2a      	ldr	r3, [pc, #168]	; (8000488 <MX_ADC1_Init+0xe0>)
 80003de:	2200      	movs	r2, #0
 80003e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003e2:	4b29      	ldr	r3, [pc, #164]	; (8000488 <MX_ADC1_Init+0xe0>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003e8:	4b27      	ldr	r3, [pc, #156]	; (8000488 <MX_ADC1_Init+0xe0>)
 80003ea:	2204      	movs	r2, #4
 80003ec:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003ee:	4b26      	ldr	r3, [pc, #152]	; (8000488 <MX_ADC1_Init+0xe0>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80003f4:	4b24      	ldr	r3, [pc, #144]	; (8000488 <MX_ADC1_Init+0xe0>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80003fa:	4b23      	ldr	r3, [pc, #140]	; (8000488 <MX_ADC1_Init+0xe0>)
 80003fc:	2201      	movs	r2, #1
 80003fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000400:	4b21      	ldr	r3, [pc, #132]	; (8000488 <MX_ADC1_Init+0xe0>)
 8000402:	2200      	movs	r2, #0
 8000404:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000408:	4b1f      	ldr	r3, [pc, #124]	; (8000488 <MX_ADC1_Init+0xe0>)
 800040a:	2200      	movs	r2, #0
 800040c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800040e:	4b1e      	ldr	r3, [pc, #120]	; (8000488 <MX_ADC1_Init+0xe0>)
 8000410:	2200      	movs	r2, #0
 8000412:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000414:	4b1c      	ldr	r3, [pc, #112]	; (8000488 <MX_ADC1_Init+0xe0>)
 8000416:	2200      	movs	r2, #0
 8000418:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800041c:	4b1a      	ldr	r3, [pc, #104]	; (8000488 <MX_ADC1_Init+0xe0>)
 800041e:	2200      	movs	r2, #0
 8000420:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000422:	4b19      	ldr	r3, [pc, #100]	; (8000488 <MX_ADC1_Init+0xe0>)
 8000424:	2200      	movs	r2, #0
 8000426:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800042a:	4817      	ldr	r0, [pc, #92]	; (8000488 <MX_ADC1_Init+0xe0>)
<<<<<<< HEAD
 800042c:	f000 ff1c 	bl	8001268 <HAL_ADC_Init>
=======
 800042c:	f000 fefe 	bl	800122c <HAL_ADC_Init>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
<<<<<<< HEAD
 8000436:	f000 fa1f 	bl	8000878 <Error_Handler>
=======
 8000436:	f000 fa09 	bl	800084c <Error_Handler>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800043a:	2300      	movs	r3, #0
 800043c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800043e:	f107 031c 	add.w	r3, r7, #28
 8000442:	4619      	mov	r1, r3
 8000444:	4810      	ldr	r0, [pc, #64]	; (8000488 <MX_ADC1_Init+0xe0>)
<<<<<<< HEAD
 8000446:	f001 fc99 	bl	8001d7c <HAL_ADCEx_MultiModeConfigChannel>
=======
 8000446:	f001 fc7d 	bl	8001d44 <HAL_ADCEx_MultiModeConfigChannel>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
<<<<<<< HEAD
 8000450:	f000 fa12 	bl	8000878 <Error_Handler>
=======
 8000450:	f000 f9fc 	bl	800084c <Error_Handler>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000454:	4b0e      	ldr	r3, [pc, #56]	; (8000490 <MX_ADC1_Init+0xe8>)
 8000456:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000458:	2306      	movs	r3, #6
 800045a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800045c:	2300      	movs	r3, #0
 800045e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000460:	237f      	movs	r3, #127	; 0x7f
 8000462:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000464:	2304      	movs	r3, #4
 8000466:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000468:	2300      	movs	r3, #0
 800046a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800046c:	1d3b      	adds	r3, r7, #4
 800046e:	4619      	mov	r1, r3
 8000470:	4805      	ldr	r0, [pc, #20]	; (8000488 <MX_ADC1_Init+0xe0>)
<<<<<<< HEAD
 8000472:	f001 f853 	bl	800151c <HAL_ADC_ConfigChannel>
=======
 8000472:	f001 f835 	bl	80014e0 <HAL_ADC_ConfigChannel>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
<<<<<<< HEAD
 800047c:	f000 f9fc 	bl	8000878 <Error_Handler>
=======
 800047c:	f000 f9e6 	bl	800084c <Error_Handler>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000480:	bf00      	nop
 8000482:	3728      	adds	r7, #40	; 0x28
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
<<<<<<< HEAD
 8000488:	2000007c 	.word	0x2000007c
=======
 8000488:	20000090 	.word	0x20000090
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
 800048c:	50040000 	.word	0x50040000
 8000490:	04300002 	.word	0x04300002

08000494 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000498:	4b16      	ldr	r3, [pc, #88]	; (80004f4 <MX_CAN1_Init+0x60>)
 800049a:	4a17      	ldr	r2, [pc, #92]	; (80004f8 <MX_CAN1_Init+0x64>)
 800049c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800049e:	4b15      	ldr	r3, [pc, #84]	; (80004f4 <MX_CAN1_Init+0x60>)
 80004a0:	2210      	movs	r2, #16
 80004a2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80004a4:	4b13      	ldr	r3, [pc, #76]	; (80004f4 <MX_CAN1_Init+0x60>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80004aa:	4b12      	ldr	r3, [pc, #72]	; (80004f4 <MX_CAN1_Init+0x60>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80004b0:	4b10      	ldr	r3, [pc, #64]	; (80004f4 <MX_CAN1_Init+0x60>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80004b6:	4b0f      	ldr	r3, [pc, #60]	; (80004f4 <MX_CAN1_Init+0x60>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80004bc:	4b0d      	ldr	r3, [pc, #52]	; (80004f4 <MX_CAN1_Init+0x60>)
 80004be:	2200      	movs	r2, #0
 80004c0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80004c2:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <MX_CAN1_Init+0x60>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80004c8:	4b0a      	ldr	r3, [pc, #40]	; (80004f4 <MX_CAN1_Init+0x60>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80004ce:	4b09      	ldr	r3, [pc, #36]	; (80004f4 <MX_CAN1_Init+0x60>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80004d4:	4b07      	ldr	r3, [pc, #28]	; (80004f4 <MX_CAN1_Init+0x60>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80004da:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <MX_CAN1_Init+0x60>)
 80004dc:	2200      	movs	r2, #0
 80004de:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80004e0:	4804      	ldr	r0, [pc, #16]	; (80004f4 <MX_CAN1_Init+0x60>)
<<<<<<< HEAD
 80004e2:	f001 fcfb 	bl	8001edc <HAL_CAN_Init>
=======
 80004e2:	f001 fcdf 	bl	8001ea4 <HAL_CAN_Init>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
<<<<<<< HEAD
 80004ec:	f000 f9c4 	bl	8000878 <Error_Handler>
=======
 80004ec:	f000 f9ae 	bl	800084c <Error_Handler>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80004f0:	bf00      	nop
 80004f2:	bd80      	pop	{r7, pc}
<<<<<<< HEAD
 80004f4:	200000e4 	.word	0x200000e4
=======
 80004f4:	200000f8 	.word	0x200000f8
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
 80004f8:	40006400 	.word	0x40006400

080004fc <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000500:	4b16      	ldr	r3, [pc, #88]	; (800055c <MX_CAN2_Init+0x60>)
 8000502:	4a17      	ldr	r2, [pc, #92]	; (8000560 <MX_CAN2_Init+0x64>)
 8000504:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8000506:	4b15      	ldr	r3, [pc, #84]	; (800055c <MX_CAN2_Init+0x60>)
 8000508:	2210      	movs	r2, #16
 800050a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800050c:	4b13      	ldr	r3, [pc, #76]	; (800055c <MX_CAN2_Init+0x60>)
 800050e:	2200      	movs	r2, #0
 8000510:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000512:	4b12      	ldr	r3, [pc, #72]	; (800055c <MX_CAN2_Init+0x60>)
 8000514:	2200      	movs	r2, #0
 8000516:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000518:	4b10      	ldr	r3, [pc, #64]	; (800055c <MX_CAN2_Init+0x60>)
 800051a:	2200      	movs	r2, #0
 800051c:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 800051e:	4b0f      	ldr	r3, [pc, #60]	; (800055c <MX_CAN2_Init+0x60>)
 8000520:	2200      	movs	r2, #0
 8000522:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000524:	4b0d      	ldr	r3, [pc, #52]	; (800055c <MX_CAN2_Init+0x60>)
 8000526:	2200      	movs	r2, #0
 8000528:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800052a:	4b0c      	ldr	r3, [pc, #48]	; (800055c <MX_CAN2_Init+0x60>)
 800052c:	2200      	movs	r2, #0
 800052e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000530:	4b0a      	ldr	r3, [pc, #40]	; (800055c <MX_CAN2_Init+0x60>)
 8000532:	2200      	movs	r2, #0
 8000534:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000536:	4b09      	ldr	r3, [pc, #36]	; (800055c <MX_CAN2_Init+0x60>)
 8000538:	2200      	movs	r2, #0
 800053a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800053c:	4b07      	ldr	r3, [pc, #28]	; (800055c <MX_CAN2_Init+0x60>)
 800053e:	2200      	movs	r2, #0
 8000540:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000542:	4b06      	ldr	r3, [pc, #24]	; (800055c <MX_CAN2_Init+0x60>)
 8000544:	2200      	movs	r2, #0
 8000546:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000548:	4804      	ldr	r0, [pc, #16]	; (800055c <MX_CAN2_Init+0x60>)
<<<<<<< HEAD
 800054a:	f001 fcc7 	bl	8001edc <HAL_CAN_Init>
=======
 800054a:	f001 fcab 	bl	8001ea4 <HAL_CAN_Init>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
<<<<<<< HEAD
 8000554:	f000 f990 	bl	8000878 <Error_Handler>
=======
 8000554:	f000 f97a 	bl	800084c <Error_Handler>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000558:	bf00      	nop
 800055a:	bd80      	pop	{r7, pc}
<<<<<<< HEAD
 800055c:	2000010c 	.word	0x2000010c
=======
 800055c:	20000120 	.word	0x20000120
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
 8000560:	40006800 	.word	0x40006800

08000564 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000568:	4b1b      	ldr	r3, [pc, #108]	; (80005d8 <MX_I2C2_Init+0x74>)
 800056a:	4a1c      	ldr	r2, [pc, #112]	; (80005dc <MX_I2C2_Init+0x78>)
 800056c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 800056e:	4b1a      	ldr	r3, [pc, #104]	; (80005d8 <MX_I2C2_Init+0x74>)
 8000570:	f640 6214 	movw	r2, #3604	; 0xe14
 8000574:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000576:	4b18      	ldr	r3, [pc, #96]	; (80005d8 <MX_I2C2_Init+0x74>)
 8000578:	2200      	movs	r2, #0
 800057a:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800057c:	4b16      	ldr	r3, [pc, #88]	; (80005d8 <MX_I2C2_Init+0x74>)
 800057e:	2201      	movs	r2, #1
 8000580:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000582:	4b15      	ldr	r3, [pc, #84]	; (80005d8 <MX_I2C2_Init+0x74>)
 8000584:	2200      	movs	r2, #0
 8000586:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000588:	4b13      	ldr	r3, [pc, #76]	; (80005d8 <MX_I2C2_Init+0x74>)
 800058a:	2200      	movs	r2, #0
 800058c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800058e:	4b12      	ldr	r3, [pc, #72]	; (80005d8 <MX_I2C2_Init+0x74>)
 8000590:	2200      	movs	r2, #0
 8000592:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000594:	4b10      	ldr	r3, [pc, #64]	; (80005d8 <MX_I2C2_Init+0x74>)
 8000596:	2200      	movs	r2, #0
 8000598:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800059a:	4b0f      	ldr	r3, [pc, #60]	; (80005d8 <MX_I2C2_Init+0x74>)
 800059c:	2200      	movs	r2, #0
 800059e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80005a0:	480d      	ldr	r0, [pc, #52]	; (80005d8 <MX_I2C2_Init+0x74>)
<<<<<<< HEAD
 80005a2:	f002 f846 	bl	8002632 <HAL_I2C_Init>
=======
 80005a2:	f002 f807 	bl	80025b4 <HAL_I2C_Init>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
<<<<<<< HEAD
 80005ac:	f000 f964 	bl	8000878 <Error_Handler>
=======
 80005ac:	f000 f94e 	bl	800084c <Error_Handler>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005b0:	2100      	movs	r1, #0
 80005b2:	4809      	ldr	r0, [pc, #36]	; (80005d8 <MX_I2C2_Init+0x74>)
<<<<<<< HEAD
 80005b4:	f002 f8cc 	bl	8002750 <HAL_I2CEx_ConfigAnalogFilter>
=======
 80005b4:	f002 f88d 	bl	80026d2 <HAL_I2CEx_ConfigAnalogFilter>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
<<<<<<< HEAD
 80005be:	f000 f95b 	bl	8000878 <Error_Handler>
=======
 80005be:	f000 f945 	bl	800084c <Error_Handler>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80005c2:	2100      	movs	r1, #0
 80005c4:	4804      	ldr	r0, [pc, #16]	; (80005d8 <MX_I2C2_Init+0x74>)
<<<<<<< HEAD
 80005c6:	f002 f90e 	bl	80027e6 <HAL_I2CEx_ConfigDigitalFilter>
=======
 80005c6:	f002 f8cf 	bl	8002768 <HAL_I2CEx_ConfigDigitalFilter>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
<<<<<<< HEAD
 80005d0:	f000 f952 	bl	8000878 <Error_Handler>
=======
 80005d0:	f000 f93c 	bl	800084c <Error_Handler>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}
<<<<<<< HEAD
 80005d8:	20000134 	.word	0x20000134
=======
 80005d8:	20000148 	.word	0x20000148
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
 80005dc:	40005800 	.word	0x40005800

080005e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005e4:	4b1b      	ldr	r3, [pc, #108]	; (8000654 <MX_SPI1_Init+0x74>)
 80005e6:	4a1c      	ldr	r2, [pc, #112]	; (8000658 <MX_SPI1_Init+0x78>)
 80005e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005ea:	4b1a      	ldr	r3, [pc, #104]	; (8000654 <MX_SPI1_Init+0x74>)
 80005ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005f2:	4b18      	ldr	r3, [pc, #96]	; (8000654 <MX_SPI1_Init+0x74>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80005f8:	4b16      	ldr	r3, [pc, #88]	; (8000654 <MX_SPI1_Init+0x74>)
 80005fa:	f44f 7240 	mov.w	r2, #768	; 0x300
 80005fe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000600:	4b14      	ldr	r3, [pc, #80]	; (8000654 <MX_SPI1_Init+0x74>)
 8000602:	2200      	movs	r2, #0
 8000604:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000606:	4b13      	ldr	r3, [pc, #76]	; (8000654 <MX_SPI1_Init+0x74>)
 8000608:	2200      	movs	r2, #0
 800060a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800060c:	4b11      	ldr	r3, [pc, #68]	; (8000654 <MX_SPI1_Init+0x74>)
 800060e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000612:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000614:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <MX_SPI1_Init+0x74>)
 8000616:	2200      	movs	r2, #0
 8000618:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <MX_SPI1_Init+0x74>)
 800061c:	2200      	movs	r2, #0
 800061e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <MX_SPI1_Init+0x74>)
 8000622:	2200      	movs	r2, #0
 8000624:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000626:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <MX_SPI1_Init+0x74>)
 8000628:	2200      	movs	r2, #0
 800062a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800062c:	4b09      	ldr	r3, [pc, #36]	; (8000654 <MX_SPI1_Init+0x74>)
 800062e:	2207      	movs	r2, #7
 8000630:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000632:	4b08      	ldr	r3, [pc, #32]	; (8000654 <MX_SPI1_Init+0x74>)
 8000634:	2200      	movs	r2, #0
 8000636:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <MX_SPI1_Init+0x74>)
 800063a:	2208      	movs	r2, #8
 800063c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800063e:	4805      	ldr	r0, [pc, #20]	; (8000654 <MX_SPI1_Init+0x74>)
<<<<<<< HEAD
 8000640:	f003 fe0e 	bl	8004260 <HAL_SPI_Init>
=======
 8000640:	f003 fdce 	bl	80041e0 <HAL_SPI_Init>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
<<<<<<< HEAD
 800064a:	f000 f915 	bl	8000878 <Error_Handler>
=======
 800064a:	f000 f8ff 	bl	800084c <Error_Handler>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
<<<<<<< HEAD
 8000654:	20000188 	.word	0x20000188
=======
 8000654:	2000019c 	.word	0x2000019c
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
 8000658:	40013000 	.word	0x40013000

0800065c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000660:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000662:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000666:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000668:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800066a:	2206      	movs	r2, #6
 800066c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800066e:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000670:	2202      	movs	r2, #2
 8000672:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000674:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000676:	2202      	movs	r2, #2
 8000678:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800067a:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800067c:	2200      	movs	r2, #0
 800067e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000682:	2200      	movs	r2, #0
 8000684:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000686:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000688:	2200      	movs	r2, #0
 800068a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800068c:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800068e:	2201      	movs	r2, #1
 8000690:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000692:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000694:	2200      	movs	r2, #0
 8000696:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800069a:	2201      	movs	r2, #1
 800069c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800069e:	4805      	ldr	r0, [pc, #20]	; (80006b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
<<<<<<< HEAD
 80006a0:	f002 f8ed 	bl	800287e <HAL_PCD_Init>
=======
 80006a0:	f002 f8ae 	bl	8002800 <HAL_PCD_Init>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
<<<<<<< HEAD
 80006aa:	f000 f8e5 	bl	8000878 <Error_Handler>
=======
 80006aa:	f000 f8cf 	bl	800084c <Error_Handler>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
<<<<<<< HEAD
 80006b4:	200001ec 	.word	0x200001ec
=======
 80006b4:	20000200 	.word	0x20000200
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

080006b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b088      	sub	sp, #32
 80006bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006be:	f107 030c 	add.w	r3, r7, #12
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
 80006cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
<<<<<<< HEAD
 80006ce:	4b4a      	ldr	r3, [pc, #296]	; (80007f8 <MX_GPIO_Init+0x140>)
 80006d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d2:	4a49      	ldr	r2, [pc, #292]	; (80007f8 <MX_GPIO_Init+0x140>)
 80006d4:	f043 0304 	orr.w	r3, r3, #4
 80006d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006da:	4b47      	ldr	r3, [pc, #284]	; (80007f8 <MX_GPIO_Init+0x140>)
=======
 80006ce:	4b3f      	ldr	r3, [pc, #252]	; (80007cc <MX_GPIO_Init+0x114>)
 80006d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d2:	4a3e      	ldr	r2, [pc, #248]	; (80007cc <MX_GPIO_Init+0x114>)
 80006d4:	f043 0304 	orr.w	r3, r3, #4
 80006d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006da:	4b3c      	ldr	r3, [pc, #240]	; (80007cc <MX_GPIO_Init+0x114>)
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
 80006dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006de:	f003 0304 	and.w	r3, r3, #4
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
<<<<<<< HEAD
 80006e6:	4b44      	ldr	r3, [pc, #272]	; (80007f8 <MX_GPIO_Init+0x140>)
 80006e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ea:	4a43      	ldr	r2, [pc, #268]	; (80007f8 <MX_GPIO_Init+0x140>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006f2:	4b41      	ldr	r3, [pc, #260]	; (80007f8 <MX_GPIO_Init+0x140>)
=======
 80006e6:	4b39      	ldr	r3, [pc, #228]	; (80007cc <MX_GPIO_Init+0x114>)
 80006e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ea:	4a38      	ldr	r2, [pc, #224]	; (80007cc <MX_GPIO_Init+0x114>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006f2:	4b36      	ldr	r3, [pc, #216]	; (80007cc <MX_GPIO_Init+0x114>)
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
 80006f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
<<<<<<< HEAD
 80006fe:	4b3e      	ldr	r3, [pc, #248]	; (80007f8 <MX_GPIO_Init+0x140>)
 8000700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000702:	4a3d      	ldr	r2, [pc, #244]	; (80007f8 <MX_GPIO_Init+0x140>)
 8000704:	f043 0302 	orr.w	r3, r3, #2
 8000708:	64d3      	str	r3, [r2, #76]	; 0x4c
 800070a:	4b3b      	ldr	r3, [pc, #236]	; (80007f8 <MX_GPIO_Init+0x140>)
=======
 80006fe:	4b33      	ldr	r3, [pc, #204]	; (80007cc <MX_GPIO_Init+0x114>)
 8000700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000702:	4a32      	ldr	r2, [pc, #200]	; (80007cc <MX_GPIO_Init+0x114>)
 8000704:	f043 0302 	orr.w	r3, r3, #2
 8000708:	64d3      	str	r3, [r2, #76]	; 0x4c
 800070a:	4b30      	ldr	r3, [pc, #192]	; (80007cc <MX_GPIO_Init+0x114>)
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
 800070c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070e:	f003 0302 	and.w	r3, r3, #2
 8000712:	603b      	str	r3, [r7, #0]
 8000714:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Error_LED_Pin|STM_OK_Pin, GPIO_PIN_RESET);
 8000716:	2200      	movs	r2, #0
 8000718:	2103      	movs	r1, #3
 800071a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
<<<<<<< HEAD
 800071e:	f001 ff4d 	bl	80025bc <HAL_GPIO_WritePin>
=======
 800071e:	f001 ff31 	bl	8002584 <HAL_GPIO_WritePin>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS1_Pin|CS0_Pin|ARRAY_LED_Pin|BPS_ENC8_Pin
 8000722:	2200      	movs	r2, #0
 8000724:	f641 71b0 	movw	r1, #8112	; 0x1fb0
<<<<<<< HEAD
 8000728:	4834      	ldr	r0, [pc, #208]	; (80007fc <MX_GPIO_Init+0x144>)
 800072a:	f001 ff47 	bl	80025bc <HAL_GPIO_WritePin>
                          |MC_ENC9_Pin|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
=======
 8000728:	4829      	ldr	r0, [pc, #164]	; (80007d0 <MX_GPIO_Init+0x118>)
 800072a:	f001 ff2b 	bl	8002584 <HAL_GPIO_WritePin>
                          |MC_ENC9_Pin|E2_Pin|E1_Pin|E0_Pin, GPIO_PIN_RESET);
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HeadLights_Pin|RightTurn_Pin|LeftTurn_Pin, GPIO_PIN_RESET);
 800072e:	2200      	movs	r2, #0
 8000730:	2107      	movs	r1, #7
<<<<<<< HEAD
 8000732:	4833      	ldr	r0, [pc, #204]	; (8000800 <MX_GPIO_Init+0x148>)
 8000734:	f001 ff42 	bl	80025bc <HAL_GPIO_WritePin>
=======
 8000732:	4828      	ldr	r0, [pc, #160]	; (80007d4 <MX_GPIO_Init+0x11c>)
 8000734:	f001 ff26 	bl	8002584 <HAL_GPIO_WritePin>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

  /*Configure GPIO pins : Error_LED_Pin STM_OK_Pin */
  GPIO_InitStruct.Pin = Error_LED_Pin|STM_OK_Pin;
 8000738:	2303      	movs	r3, #3
 800073a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073c:	2301      	movs	r3, #1
 800073e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000744:	2300      	movs	r3, #0
 8000746:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000748:	f107 030c 	add.w	r3, r7, #12
 800074c:	4619      	mov	r1, r3
 800074e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
<<<<<<< HEAD
 8000752:	f001 fda1 	bl	8002298 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000756:	2310      	movs	r3, #16
 8000758:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800075a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
=======
 8000752:	f001 fd85 	bl	8002260 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS1_Pin CS0_Pin ARRAY_LED_Pin BPS_ENC8_Pin
                           MC_ENC9_Pin E2_Pin E1_Pin E0_Pin */
  GPIO_InitStruct.Pin = CS1_Pin|CS0_Pin|ARRAY_LED_Pin|BPS_ENC8_Pin
 8000756:	f641 73b0 	movw	r3, #8112	; 0x1fb0
 800075a:	60fb      	str	r3, [r7, #12]
                          |MC_ENC9_Pin|E2_Pin|E1_Pin|E0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075c:	2301      	movs	r3, #1
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
 800075e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
<<<<<<< HEAD
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000764:	f107 030c 	add.w	r3, r7, #12
 8000768:	4619      	mov	r1, r3
 800076a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800076e:	f001 fd93 	bl	8002298 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS1_Pin CS0_Pin ARRAY_LED_Pin BPS_ENC8_Pin
                           MC_ENC9_Pin PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = CS1_Pin|CS0_Pin|ARRAY_LED_Pin|BPS_ENC8_Pin
 8000772:	f641 73b0 	movw	r3, #8112	; 0x1fb0
 8000776:	60fb      	str	r3, [r7, #12]
                          |MC_ENC9_Pin|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
=======
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000764:	2300      	movs	r3, #0
 8000766:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000768:	f107 030c 	add.w	r3, r7, #12
 800076c:	4619      	mov	r1, r3
 800076e:	4818      	ldr	r0, [pc, #96]	; (80007d0 <MX_GPIO_Init+0x118>)
 8000770:	f001 fd76 	bl	8002260 <HAL_GPIO_Init>

  /*Configure GPIO pins : HeadLights_Pin RightTurn_Pin LeftTurn_Pin */
  GPIO_InitStruct.Pin = HeadLights_Pin|RightTurn_Pin|LeftTurn_Pin;
 8000774:	2307      	movs	r3, #7
 8000776:	60fb      	str	r3, [r7, #12]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000778:	2301      	movs	r3, #1
 800077a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000780:	2300      	movs	r3, #0
 8000782:	61bb      	str	r3, [r7, #24]
<<<<<<< HEAD
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	4619      	mov	r1, r3
 800078a:	481c      	ldr	r0, [pc, #112]	; (80007fc <MX_GPIO_Init+0x144>)
 800078c:	f001 fd84 	bl	8002298 <HAL_GPIO_Init>

  /*Configure GPIO pins : HeadLights_Pin RightTurn_Pin LeftTurn_Pin */
  GPIO_InitStruct.Pin = HeadLights_Pin|RightTurn_Pin|LeftTurn_Pin;
 8000790:	2307      	movs	r3, #7
 8000792:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000794:	2301      	movs	r3, #1
 8000796:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079c:	2300      	movs	r3, #0
 800079e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	4619      	mov	r1, r3
 80007a6:	4816      	ldr	r0, [pc, #88]	; (8000800 <MX_GPIO_Init+0x148>)
 80007a8:	f001 fd76 	bl	8002298 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARRAY_EN_Pin BPS_EN_Pin */
  GPIO_InitStruct.Pin = ARRAY_EN_Pin|BPS_EN_Pin;
 80007ac:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80007b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ba:	f107 030c 	add.w	r3, r7, #12
 80007be:	4619      	mov	r1, r3
 80007c0:	480f      	ldr	r0, [pc, #60]	; (8000800 <MX_GPIO_Init+0x148>)
 80007c2:	f001 fd69 	bl	8002298 <HAL_GPIO_Init>

  /*Configure GPIO pin : MC_EN_Pin */
  GPIO_InitStruct.Pin = MC_EN_Pin;
 80007c6:	2340      	movs	r3, #64	; 0x40
 80007c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ca:	2300      	movs	r3, #0
 80007cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MC_EN_GPIO_Port, &GPIO_InitStruct);
 80007d2:	f107 030c 	add.w	r3, r7, #12
 80007d6:	4619      	mov	r1, r3
 80007d8:	4808      	ldr	r0, [pc, #32]	; (80007fc <MX_GPIO_Init+0x144>)
 80007da:	f001 fd5d 	bl	8002298 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80007de:	2200      	movs	r2, #0
 80007e0:	2100      	movs	r1, #0
 80007e2:	200a      	movs	r0, #10
 80007e4:	f001 fd2e 	bl	8002244 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80007e8:	200a      	movs	r0, #10
 80007ea:	f001 fd47 	bl	800227c <HAL_NVIC_EnableIRQ>

}
 80007ee:	bf00      	nop
 80007f0:	3720      	adds	r7, #32
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40021000 	.word	0x40021000
 80007fc:	48000800 	.word	0x48000800
 8000800:	48000400 	.word	0x48000400

08000804 <StartlLightControl>:
=======
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	4619      	mov	r1, r3
 800078a:	4812      	ldr	r0, [pc, #72]	; (80007d4 <MX_GPIO_Init+0x11c>)
 800078c:	f001 fd68 	bl	8002260 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARRAY_EN_Pin BPS_EN_Pin */
  GPIO_InitStruct.Pin = ARRAY_EN_Pin|BPS_EN_Pin;
 8000790:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000794:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000796:	2300      	movs	r3, #0
 8000798:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079e:	f107 030c 	add.w	r3, r7, #12
 80007a2:	4619      	mov	r1, r3
 80007a4:	480b      	ldr	r0, [pc, #44]	; (80007d4 <MX_GPIO_Init+0x11c>)
 80007a6:	f001 fd5b 	bl	8002260 <HAL_GPIO_Init>

  /*Configure GPIO pin : MC_EN_Pin */
  GPIO_InitStruct.Pin = MC_EN_Pin;
 80007aa:	2340      	movs	r3, #64	; 0x40
 80007ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ae:	2300      	movs	r3, #0
 80007b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MC_EN_GPIO_Port, &GPIO_InitStruct);
 80007b6:	f107 030c 	add.w	r3, r7, #12
 80007ba:	4619      	mov	r1, r3
 80007bc:	4804      	ldr	r0, [pc, #16]	; (80007d0 <MX_GPIO_Init+0x118>)
 80007be:	f001 fd4f 	bl	8002260 <HAL_GPIO_Init>

}
 80007c2:	bf00      	nop
 80007c4:	3720      	adds	r7, #32
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40021000 	.word	0x40021000
 80007d0:	48000800 	.word	0x48000800
 80007d4:	48000400 	.word	0x48000400

080007d8 <StartlLightControl>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartlLightControl */
void StartlLightControl(void *argument)
{
<<<<<<< HEAD
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
=======
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]

>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
<<<<<<< HEAD
 800080c:	2001      	movs	r0, #1
 800080e:	f004 fc71 	bl	80050f4 <osDelay>
 8000812:	e7fb      	b.n	800080c <StartlLightControl+0x8>

08000814 <StartCarData>:
=======
 80007e0:	2001      	movs	r0, #1
 80007e2:	f004 fc47 	bl	8005074 <osDelay>
 80007e6:	e7fb      	b.n	80007e0 <StartlLightControl+0x8>

080007e8 <StartCarData>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCarData */
void StartCarData(void *argument)
{
<<<<<<< HEAD
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
=======
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  /* USER CODE BEGIN StartCarData */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
<<<<<<< HEAD
 800081c:	2001      	movs	r0, #1
 800081e:	f004 fc69 	bl	80050f4 <osDelay>
 8000822:	e7fb      	b.n	800081c <StartCarData+0x8>

08000824 <SendData>:
=======
 80007f0:	2001      	movs	r0, #1
 80007f2:	f004 fc3f 	bl	8005074 <osDelay>
 80007f6:	e7fb      	b.n	80007f0 <StartCarData+0x8>

080007f8 <SendData>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SendData */
void SendData(void *argument)
{
<<<<<<< HEAD
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
=======
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  /* USER CODE BEGIN SendData */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
<<<<<<< HEAD
 800082c:	2001      	movs	r0, #1
 800082e:	f004 fc61 	bl	80050f4 <osDelay>
 8000832:	e7fb      	b.n	800082c <SendData+0x8>

08000834 <StartMotorInput>:
=======
 8000800:	2001      	movs	r0, #1
 8000802:	f004 fc37 	bl	8005074 <osDelay>
 8000806:	e7fb      	b.n	8000800 <SendData+0x8>

08000808 <StartMotorInput>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotorInput */
void StartMotorInput(void *argument)
{
<<<<<<< HEAD
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotorInput */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800083c:	2001      	movs	r0, #1
 800083e:	f004 fc59 	bl	80050f4 <osDelay>
 8000842:	e7fb      	b.n	800083c <StartMotorInput+0x8>

08000844 <StartSensor>:
=======
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */


  for(;;)
  {
    osDelay(1);
 8000810:	2001      	movs	r0, #1
 8000812:	f004 fc2f 	bl	8005074 <osDelay>
 8000816:	e7fb      	b.n	8000810 <StartMotorInput+0x8>

08000818 <StartSensor>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensor */
void StartSensor(void *argument)
{
<<<<<<< HEAD
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensor */
  /* Infinite loop */

  for(;;)
  {
    osDelay(1);
 800084c:	2001      	movs	r0, #1
 800084e:	f004 fc51 	bl	80050f4 <osDelay>
 8000852:	e7fb      	b.n	800084c <StartSensor+0x8>

08000854 <HAL_TIM_PeriodElapsedCallback>:
=======
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensor */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000820:	2001      	movs	r0, #1
 8000822:	f004 fc27 	bl	8005074 <osDelay>
 8000826:	e7fb      	b.n	8000820 <StartSensor+0x8>

08000828 <HAL_TIM_PeriodElapsedCallback>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
=======
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
<<<<<<< HEAD
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a04      	ldr	r2, [pc, #16]	; (8000874 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d101      	bne.n	800086a <HAL_TIM_PeriodElapsedCallback+0x16>

    HAL_IncTick();
 8000866:	f000 fb1b 	bl	8000ea0 <HAL_IncTick>
=======
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a04      	ldr	r2, [pc, #16]	; (8000848 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d101      	bne.n	800083e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800083a:	f000 fb13 	bl	8000e64 <HAL_IncTick>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
<<<<<<< HEAD
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40001400 	.word	0x40001400

08000878 <Error_Handler>:
=======
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40001400 	.word	0x40001400

0800084c <Error_Handler>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< HEAD
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
=======
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< HEAD
 800087c:	b672      	cpsid	i
}
 800087e:	bf00      	nop
=======
 8000850:	b672      	cpsid	i
}
 8000852:	bf00      	nop
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< HEAD
 8000880:	e7fe      	b.n	8000880 <Error_Handler+0x8>
	...

08000884 <HAL_MspInit>:
=======
 8000854:	e7fe      	b.n	8000854 <Error_Handler+0x8>
	...

08000858 <HAL_MspInit>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
=======
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< HEAD
 800088a:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <HAL_MspInit+0x4c>)
 800088c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800088e:	4a10      	ldr	r2, [pc, #64]	; (80008d0 <HAL_MspInit+0x4c>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	6613      	str	r3, [r2, #96]	; 0x60
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <HAL_MspInit+0x4c>)
 8000898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <HAL_MspInit+0x4c>)
 80008a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008a6:	4a0a      	ldr	r2, [pc, #40]	; (80008d0 <HAL_MspInit+0x4c>)
 80008a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ac:	6593      	str	r3, [r2, #88]	; 0x58
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <HAL_MspInit+0x4c>)
 80008b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b6:	603b      	str	r3, [r7, #0]
 80008b8:	683b      	ldr	r3, [r7, #0]
=======
 800085e:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <HAL_MspInit+0x4c>)
 8000860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000862:	4a10      	ldr	r2, [pc, #64]	; (80008a4 <HAL_MspInit+0x4c>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6613      	str	r3, [r2, #96]	; 0x60
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <HAL_MspInit+0x4c>)
 800086c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000876:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <HAL_MspInit+0x4c>)
 8000878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800087a:	4a0a      	ldr	r2, [pc, #40]	; (80008a4 <HAL_MspInit+0x4c>)
 800087c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000880:	6593      	str	r3, [r2, #88]	; 0x58
 8000882:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <HAL_MspInit+0x4c>)
 8000884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	683b      	ldr	r3, [r7, #0]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
<<<<<<< HEAD
 80008ba:	2200      	movs	r2, #0
 80008bc:	210f      	movs	r1, #15
 80008be:	f06f 0001 	mvn.w	r0, #1
 80008c2:	f001 fcbf 	bl	8002244 <HAL_NVIC_SetPriority>
=======
 800088e:	2200      	movs	r2, #0
 8000890:	210f      	movs	r1, #15
 8000892:	f06f 0001 	mvn.w	r0, #1
 8000896:	f001 fcb9 	bl	800220c <HAL_NVIC_SetPriority>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40021000 	.word	0x40021000

080008d4 <HAL_ADC_MspInit>:
=======
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40021000 	.word	0x40021000

080008a8 <HAL_ADC_MspInit>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08a      	sub	sp, #40	; 0x28
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a15      	ldr	r2, [pc, #84]	; (8000948 <HAL_ADC_MspInit+0x74>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d123      	bne.n	800093e <HAL_ADC_MspInit+0x6a>
=======
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08a      	sub	sp, #40	; 0x28
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a15      	ldr	r2, [pc, #84]	; (800091c <HAL_ADC_MspInit+0x74>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d123      	bne.n	8000912 <HAL_ADC_MspInit+0x6a>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
<<<<<<< HEAD
 80008f6:	4b15      	ldr	r3, [pc, #84]	; (800094c <HAL_ADC_MspInit+0x78>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fa:	4a14      	ldr	r2, [pc, #80]	; (800094c <HAL_ADC_MspInit+0x78>)
 80008fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000900:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000902:	4b12      	ldr	r3, [pc, #72]	; (800094c <HAL_ADC_MspInit+0x78>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000906:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800090a:	613b      	str	r3, [r7, #16]
 800090c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800090e:	4b0f      	ldr	r3, [pc, #60]	; (800094c <HAL_ADC_MspInit+0x78>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000912:	4a0e      	ldr	r2, [pc, #56]	; (800094c <HAL_ADC_MspInit+0x78>)
 8000914:	f043 0304 	orr.w	r3, r3, #4
 8000918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091a:	4b0c      	ldr	r3, [pc, #48]	; (800094c <HAL_ADC_MspInit+0x78>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091e:	f003 0304 	and.w	r3, r3, #4
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
=======
 80008ca:	4b15      	ldr	r3, [pc, #84]	; (8000920 <HAL_ADC_MspInit+0x78>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ce:	4a14      	ldr	r2, [pc, #80]	; (8000920 <HAL_ADC_MspInit+0x78>)
 80008d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d6:	4b12      	ldr	r3, [pc, #72]	; (8000920 <HAL_ADC_MspInit+0x78>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008de:	613b      	str	r3, [r7, #16]
 80008e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e2:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <HAL_ADC_MspInit+0x78>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e6:	4a0e      	ldr	r2, [pc, #56]	; (8000920 <HAL_ADC_MspInit+0x78>)
 80008e8:	f043 0304 	orr.w	r3, r3, #4
 80008ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ee:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <HAL_ADC_MspInit+0x78>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f2:	f003 0304 	and.w	r3, r3, #4
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
<<<<<<< HEAD
 8000926:	2303      	movs	r3, #3
 8000928:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800092a:	2303      	movs	r3, #3
 800092c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000932:	f107 0314 	add.w	r3, r7, #20
 8000936:	4619      	mov	r1, r3
 8000938:	4805      	ldr	r0, [pc, #20]	; (8000950 <HAL_ADC_MspInit+0x7c>)
 800093a:	f001 fcad 	bl	8002298 <HAL_GPIO_Init>
=======
 80008fa:	2303      	movs	r3, #3
 80008fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008fe:	2303      	movs	r3, #3
 8000900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	4619      	mov	r1, r3
 800090c:	4805      	ldr	r0, [pc, #20]	; (8000924 <HAL_ADC_MspInit+0x7c>)
 800090e:	f001 fca7 	bl	8002260 <HAL_GPIO_Init>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
<<<<<<< HEAD
 800093e:	bf00      	nop
 8000940:	3728      	adds	r7, #40	; 0x28
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	50040000 	.word	0x50040000
 800094c:	40021000 	.word	0x40021000
 8000950:	48000800 	.word	0x48000800

08000954 <HAL_CAN_MspInit>:
=======
 8000912:	bf00      	nop
 8000914:	3728      	adds	r7, #40	; 0x28
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	50040000 	.word	0x50040000
 8000920:	40021000 	.word	0x40021000
 8000924:	48000800 	.word	0x48000800

08000928 <HAL_CAN_MspInit>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
<<<<<<< HEAD
 8000954:	b580      	push	{r7, lr}
 8000956:	b08c      	sub	sp, #48	; 0x30
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095c:	f107 031c 	add.w	r3, r7, #28
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a45      	ldr	r2, [pc, #276]	; (8000a88 <HAL_CAN_MspInit+0x134>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d132      	bne.n	80009dc <HAL_CAN_MspInit+0x88>
=======
 8000928:	b580      	push	{r7, lr}
 800092a:	b08c      	sub	sp, #48	; 0x30
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a45      	ldr	r2, [pc, #276]	; (8000a5c <HAL_CAN_MspInit+0x134>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d132      	bne.n	80009b0 <HAL_CAN_MspInit+0x88>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
<<<<<<< HEAD
 8000976:	4b45      	ldr	r3, [pc, #276]	; (8000a8c <HAL_CAN_MspInit+0x138>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	3301      	adds	r3, #1
 800097c:	4a43      	ldr	r2, [pc, #268]	; (8000a8c <HAL_CAN_MspInit+0x138>)
 800097e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000980:	4b42      	ldr	r3, [pc, #264]	; (8000a8c <HAL_CAN_MspInit+0x138>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2b01      	cmp	r3, #1
 8000986:	d10b      	bne.n	80009a0 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000988:	4b41      	ldr	r3, [pc, #260]	; (8000a90 <HAL_CAN_MspInit+0x13c>)
 800098a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800098c:	4a40      	ldr	r2, [pc, #256]	; (8000a90 <HAL_CAN_MspInit+0x13c>)
 800098e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000992:	6593      	str	r3, [r2, #88]	; 0x58
 8000994:	4b3e      	ldr	r3, [pc, #248]	; (8000a90 <HAL_CAN_MspInit+0x13c>)
 8000996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800099c:	61bb      	str	r3, [r7, #24]
 800099e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a0:	4b3b      	ldr	r3, [pc, #236]	; (8000a90 <HAL_CAN_MspInit+0x13c>)
 80009a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a4:	4a3a      	ldr	r2, [pc, #232]	; (8000a90 <HAL_CAN_MspInit+0x13c>)
 80009a6:	f043 0302 	orr.w	r3, r3, #2
 80009aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ac:	4b38      	ldr	r3, [pc, #224]	; (8000a90 <HAL_CAN_MspInit+0x13c>)
 80009ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b0:	f003 0302 	and.w	r3, r3, #2
 80009b4:	617b      	str	r3, [r7, #20]
 80009b6:	697b      	ldr	r3, [r7, #20]
=======
 800094a:	4b45      	ldr	r3, [pc, #276]	; (8000a60 <HAL_CAN_MspInit+0x138>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	3301      	adds	r3, #1
 8000950:	4a43      	ldr	r2, [pc, #268]	; (8000a60 <HAL_CAN_MspInit+0x138>)
 8000952:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000954:	4b42      	ldr	r3, [pc, #264]	; (8000a60 <HAL_CAN_MspInit+0x138>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b01      	cmp	r3, #1
 800095a:	d10b      	bne.n	8000974 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800095c:	4b41      	ldr	r3, [pc, #260]	; (8000a64 <HAL_CAN_MspInit+0x13c>)
 800095e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000960:	4a40      	ldr	r2, [pc, #256]	; (8000a64 <HAL_CAN_MspInit+0x13c>)
 8000962:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000966:	6593      	str	r3, [r2, #88]	; 0x58
 8000968:	4b3e      	ldr	r3, [pc, #248]	; (8000a64 <HAL_CAN_MspInit+0x13c>)
 800096a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800096c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000970:	61bb      	str	r3, [r7, #24]
 8000972:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000974:	4b3b      	ldr	r3, [pc, #236]	; (8000a64 <HAL_CAN_MspInit+0x13c>)
 8000976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000978:	4a3a      	ldr	r2, [pc, #232]	; (8000a64 <HAL_CAN_MspInit+0x13c>)
 800097a:	f043 0302 	orr.w	r3, r3, #2
 800097e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000980:	4b38      	ldr	r3, [pc, #224]	; (8000a64 <HAL_CAN_MspInit+0x13c>)
 8000982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000984:	f003 0302 	and.w	r3, r3, #2
 8000988:	617b      	str	r3, [r7, #20]
 800098a:	697b      	ldr	r3, [r7, #20]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
<<<<<<< HEAD
 80009b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009be:	2302      	movs	r3, #2
 80009c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c6:	2303      	movs	r3, #3
 80009c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80009ca:	2309      	movs	r3, #9
 80009cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	4619      	mov	r1, r3
 80009d4:	482f      	ldr	r0, [pc, #188]	; (8000a94 <HAL_CAN_MspInit+0x140>)
 80009d6:	f001 fc5f 	bl	8002298 <HAL_GPIO_Init>
=======
 800098c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000992:	2302      	movs	r3, #2
 8000994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099a:	2303      	movs	r3, #3
 800099c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800099e:	2309      	movs	r3, #9
 80009a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	4619      	mov	r1, r3
 80009a8:	482f      	ldr	r0, [pc, #188]	; (8000a68 <HAL_CAN_MspInit+0x140>)
 80009aa:	f001 fc59 	bl	8002260 <HAL_GPIO_Init>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
<<<<<<< HEAD
 80009da:	e051      	b.n	8000a80 <HAL_CAN_MspInit+0x12c>
  else if(hcan->Instance==CAN2)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a2d      	ldr	r2, [pc, #180]	; (8000a98 <HAL_CAN_MspInit+0x144>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d14c      	bne.n	8000a80 <HAL_CAN_MspInit+0x12c>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80009e6:	4b2a      	ldr	r3, [pc, #168]	; (8000a90 <HAL_CAN_MspInit+0x13c>)
 80009e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ea:	4a29      	ldr	r2, [pc, #164]	; (8000a90 <HAL_CAN_MspInit+0x13c>)
 80009ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80009f0:	6593      	str	r3, [r2, #88]	; 0x58
 80009f2:	4b27      	ldr	r3, [pc, #156]	; (8000a90 <HAL_CAN_MspInit+0x13c>)
 80009f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80009fa:	613b      	str	r3, [r7, #16]
 80009fc:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80009fe:	4b23      	ldr	r3, [pc, #140]	; (8000a8c <HAL_CAN_MspInit+0x138>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	3301      	adds	r3, #1
 8000a04:	4a21      	ldr	r2, [pc, #132]	; (8000a8c <HAL_CAN_MspInit+0x138>)
 8000a06:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000a08:	4b20      	ldr	r3, [pc, #128]	; (8000a8c <HAL_CAN_MspInit+0x138>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d10b      	bne.n	8000a28 <HAL_CAN_MspInit+0xd4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000a10:	4b1f      	ldr	r3, [pc, #124]	; (8000a90 <HAL_CAN_MspInit+0x13c>)
 8000a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a14:	4a1e      	ldr	r2, [pc, #120]	; (8000a90 <HAL_CAN_MspInit+0x13c>)
 8000a16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a1a:	6593      	str	r3, [r2, #88]	; 0x58
 8000a1c:	4b1c      	ldr	r3, [pc, #112]	; (8000a90 <HAL_CAN_MspInit+0x13c>)
 8000a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a28:	4b19      	ldr	r3, [pc, #100]	; (8000a90 <HAL_CAN_MspInit+0x13c>)
 8000a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2c:	4a18      	ldr	r2, [pc, #96]	; (8000a90 <HAL_CAN_MspInit+0x13c>)
 8000a2e:	f043 0302 	orr.w	r3, r3, #2
 8000a32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a34:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <HAL_CAN_MspInit+0x13c>)
 8000a36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a38:	f003 0302 	and.w	r3, r3, #2
 8000a3c:	60bb      	str	r3, [r7, #8]
 8000a3e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a40:	2320      	movs	r3, #32
 8000a42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a44:	2302      	movs	r3, #2
 8000a46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_CAN2;
 8000a50:	2303      	movs	r3, #3
 8000a52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a54:	f107 031c 	add.w	r3, r7, #28
 8000a58:	4619      	mov	r1, r3
 8000a5a:	480e      	ldr	r0, [pc, #56]	; (8000a94 <HAL_CAN_MspInit+0x140>)
 8000a5c:	f001 fc1c 	bl	8002298 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a60:	2340      	movs	r3, #64	; 0x40
 8000a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a64:	2302      	movs	r3, #2
 8000a66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_CAN2;
 8000a70:	2308      	movs	r3, #8
 8000a72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a74:	f107 031c 	add.w	r3, r7, #28
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4806      	ldr	r0, [pc, #24]	; (8000a94 <HAL_CAN_MspInit+0x140>)
 8000a7c:	f001 fc0c 	bl	8002298 <HAL_GPIO_Init>
}
 8000a80:	bf00      	nop
 8000a82:	3730      	adds	r7, #48	; 0x30
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40006400 	.word	0x40006400
 8000a8c:	2000070c 	.word	0x2000070c
 8000a90:	40021000 	.word	0x40021000
 8000a94:	48000400 	.word	0x48000400
 8000a98:	40006800 	.word	0x40006800

08000a9c <HAL_I2C_MspInit>:
=======
 80009ae:	e051      	b.n	8000a54 <HAL_CAN_MspInit+0x12c>
  else if(hcan->Instance==CAN2)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a2d      	ldr	r2, [pc, #180]	; (8000a6c <HAL_CAN_MspInit+0x144>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d14c      	bne.n	8000a54 <HAL_CAN_MspInit+0x12c>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80009ba:	4b2a      	ldr	r3, [pc, #168]	; (8000a64 <HAL_CAN_MspInit+0x13c>)
 80009bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009be:	4a29      	ldr	r2, [pc, #164]	; (8000a64 <HAL_CAN_MspInit+0x13c>)
 80009c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80009c4:	6593      	str	r3, [r2, #88]	; 0x58
 80009c6:	4b27      	ldr	r3, [pc, #156]	; (8000a64 <HAL_CAN_MspInit+0x13c>)
 80009c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80009d2:	4b23      	ldr	r3, [pc, #140]	; (8000a60 <HAL_CAN_MspInit+0x138>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	3301      	adds	r3, #1
 80009d8:	4a21      	ldr	r2, [pc, #132]	; (8000a60 <HAL_CAN_MspInit+0x138>)
 80009da:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80009dc:	4b20      	ldr	r3, [pc, #128]	; (8000a60 <HAL_CAN_MspInit+0x138>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d10b      	bne.n	80009fc <HAL_CAN_MspInit+0xd4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80009e4:	4b1f      	ldr	r3, [pc, #124]	; (8000a64 <HAL_CAN_MspInit+0x13c>)
 80009e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009e8:	4a1e      	ldr	r2, [pc, #120]	; (8000a64 <HAL_CAN_MspInit+0x13c>)
 80009ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009ee:	6593      	str	r3, [r2, #88]	; 0x58
 80009f0:	4b1c      	ldr	r3, [pc, #112]	; (8000a64 <HAL_CAN_MspInit+0x13c>)
 80009f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fc:	4b19      	ldr	r3, [pc, #100]	; (8000a64 <HAL_CAN_MspInit+0x13c>)
 80009fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a00:	4a18      	ldr	r2, [pc, #96]	; (8000a64 <HAL_CAN_MspInit+0x13c>)
 8000a02:	f043 0302 	orr.w	r3, r3, #2
 8000a06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a08:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <HAL_CAN_MspInit+0x13c>)
 8000a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0c:	f003 0302 	and.w	r3, r3, #2
 8000a10:	60bb      	str	r3, [r7, #8]
 8000a12:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a14:	2320      	movs	r3, #32
 8000a16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a20:	2303      	movs	r3, #3
 8000a22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_CAN2;
 8000a24:	2303      	movs	r3, #3
 8000a26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	480e      	ldr	r0, [pc, #56]	; (8000a68 <HAL_CAN_MspInit+0x140>)
 8000a30:	f001 fc16 	bl	8002260 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a34:	2340      	movs	r3, #64	; 0x40
 8000a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a40:	2303      	movs	r3, #3
 8000a42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_CAN2;
 8000a44:	2308      	movs	r3, #8
 8000a46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a48:	f107 031c 	add.w	r3, r7, #28
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4806      	ldr	r0, [pc, #24]	; (8000a68 <HAL_CAN_MspInit+0x140>)
 8000a50:	f001 fc06 	bl	8002260 <HAL_GPIO_Init>
}
 8000a54:	bf00      	nop
 8000a56:	3730      	adds	r7, #48	; 0x30
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40006400 	.word	0x40006400
 8000a60:	20000720 	.word	0x20000720
 8000a64:	40021000 	.word	0x40021000
 8000a68:	48000400 	.word	0x48000400
 8000a6c:	40006800 	.word	0x40006800

08000a70 <HAL_I2C_MspInit>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
<<<<<<< HEAD
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b0ac      	sub	sp, #176	; 0xb0
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ab4:	f107 0310 	add.w	r3, r7, #16
 8000ab8:	228c      	movs	r2, #140	; 0x8c
 8000aba:	2100      	movs	r1, #0
 8000abc:	4618      	mov	r0, r3
 8000abe:	f006 ffb5 	bl	8007a2c <memset>
  if(hi2c->Instance==I2C2)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a21      	ldr	r2, [pc, #132]	; (8000b4c <HAL_I2C_MspInit+0xb0>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d13b      	bne.n	8000b44 <HAL_I2C_MspInit+0xa8>
=======
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b0ac      	sub	sp, #176	; 0xb0
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a88:	f107 0310 	add.w	r3, r7, #16
 8000a8c:	228c      	movs	r2, #140	; 0x8c
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4618      	mov	r0, r3
 8000a92:	f006 ffbf 	bl	8007a14 <memset>
  if(hi2c->Instance==I2C2)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a21      	ldr	r2, [pc, #132]	; (8000b20 <HAL_I2C_MspInit+0xb0>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d13b      	bne.n	8000b18 <HAL_I2C_MspInit+0xa8>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
<<<<<<< HEAD
 8000acc:	2380      	movs	r3, #128	; 0x80
 8000ace:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ad4:	f107 0310 	add.w	r3, r7, #16
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f002 fee7 	bl	80038ac <HAL_RCCEx_PeriphCLKConfig>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000ae4:	f7ff fec8 	bl	8000878 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae8:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <HAL_I2C_MspInit+0xb4>)
 8000aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aec:	4a18      	ldr	r2, [pc, #96]	; (8000b50 <HAL_I2C_MspInit+0xb4>)
 8000aee:	f043 0302 	orr.w	r3, r3, #2
 8000af2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af4:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <HAL_I2C_MspInit+0xb4>)
 8000af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af8:	f003 0302 	and.w	r3, r3, #2
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	68fb      	ldr	r3, [r7, #12]
=======
 8000aa0:	2380      	movs	r3, #128	; 0x80
 8000aa2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aa8:	f107 0310 	add.w	r3, r7, #16
 8000aac:	4618      	mov	r0, r3
 8000aae:	f002 febd 	bl	800382c <HAL_RCCEx_PeriphCLKConfig>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000ab8:	f7ff fec8 	bl	800084c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abc:	4b19      	ldr	r3, [pc, #100]	; (8000b24 <HAL_I2C_MspInit+0xb4>)
 8000abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac0:	4a18      	ldr	r2, [pc, #96]	; (8000b24 <HAL_I2C_MspInit+0xb4>)
 8000ac2:	f043 0302 	orr.w	r3, r3, #2
 8000ac6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac8:	4b16      	ldr	r3, [pc, #88]	; (8000b24 <HAL_I2C_MspInit+0xb4>)
 8000aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000acc:	f003 0302 	and.w	r3, r3, #2
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	68fb      	ldr	r3, [r7, #12]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
<<<<<<< HEAD
 8000b00:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b08:	2312      	movs	r3, #18
 8000b0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b14:	2303      	movs	r3, #3
 8000b16:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000b1a:	2304      	movs	r3, #4
 8000b1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b20:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b24:	4619      	mov	r1, r3
 8000b26:	480b      	ldr	r0, [pc, #44]	; (8000b54 <HAL_I2C_MspInit+0xb8>)
 8000b28:	f001 fbb6 	bl	8002298 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <HAL_I2C_MspInit+0xb4>)
 8000b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b30:	4a07      	ldr	r2, [pc, #28]	; (8000b50 <HAL_I2C_MspInit+0xb4>)
 8000b32:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b36:	6593      	str	r3, [r2, #88]	; 0x58
 8000b38:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <HAL_I2C_MspInit+0xb4>)
 8000b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	68bb      	ldr	r3, [r7, #8]
=======
 8000ad4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ad8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000adc:	2312      	movs	r3, #18
 8000ade:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae8:	2303      	movs	r3, #3
 8000aea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000aee:	2304      	movs	r3, #4
 8000af0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000af8:	4619      	mov	r1, r3
 8000afa:	480b      	ldr	r0, [pc, #44]	; (8000b28 <HAL_I2C_MspInit+0xb8>)
 8000afc:	f001 fbb0 	bl	8002260 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000b00:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <HAL_I2C_MspInit+0xb4>)
 8000b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b04:	4a07      	ldr	r2, [pc, #28]	; (8000b24 <HAL_I2C_MspInit+0xb4>)
 8000b06:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b0a:	6593      	str	r3, [r2, #88]	; 0x58
 8000b0c:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <HAL_I2C_MspInit+0xb4>)
 8000b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b14:	60bb      	str	r3, [r7, #8]
 8000b16:	68bb      	ldr	r3, [r7, #8]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
<<<<<<< HEAD
 8000b44:	bf00      	nop
 8000b46:	37b0      	adds	r7, #176	; 0xb0
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40005800 	.word	0x40005800
 8000b50:	40021000 	.word	0x40021000
 8000b54:	48000400 	.word	0x48000400

08000b58 <HAL_SPI_MspInit>:
=======
 8000b18:	bf00      	nop
 8000b1a:	37b0      	adds	r7, #176	; 0xb0
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40005800 	.word	0x40005800
 8000b24:	40021000 	.word	0x40021000
 8000b28:	48000400 	.word	0x48000400

08000b2c <HAL_SPI_MspInit>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
<<<<<<< HEAD
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08a      	sub	sp, #40	; 0x28
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a17      	ldr	r2, [pc, #92]	; (8000bd4 <HAL_SPI_MspInit+0x7c>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d128      	bne.n	8000bcc <HAL_SPI_MspInit+0x74>
=======
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08a      	sub	sp, #40	; 0x28
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a17      	ldr	r2, [pc, #92]	; (8000ba8 <HAL_SPI_MspInit+0x7c>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d128      	bne.n	8000ba0 <HAL_SPI_MspInit+0x74>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
<<<<<<< HEAD
 8000b7a:	4b17      	ldr	r3, [pc, #92]	; (8000bd8 <HAL_SPI_MspInit+0x80>)
 8000b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b7e:	4a16      	ldr	r2, [pc, #88]	; (8000bd8 <HAL_SPI_MspInit+0x80>)
 8000b80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b84:	6613      	str	r3, [r2, #96]	; 0x60
 8000b86:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <HAL_SPI_MspInit+0x80>)
 8000b88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b92:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <HAL_SPI_MspInit+0x80>)
 8000b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b96:	4a10      	ldr	r2, [pc, #64]	; (8000bd8 <HAL_SPI_MspInit+0x80>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <HAL_SPI_MspInit+0x80>)
 8000ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
=======
 8000b4e:	4b17      	ldr	r3, [pc, #92]	; (8000bac <HAL_SPI_MspInit+0x80>)
 8000b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b52:	4a16      	ldr	r2, [pc, #88]	; (8000bac <HAL_SPI_MspInit+0x80>)
 8000b54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b58:	6613      	str	r3, [r2, #96]	; 0x60
 8000b5a:	4b14      	ldr	r3, [pc, #80]	; (8000bac <HAL_SPI_MspInit+0x80>)
 8000b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b62:	613b      	str	r3, [r7, #16]
 8000b64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b66:	4b11      	ldr	r3, [pc, #68]	; (8000bac <HAL_SPI_MspInit+0x80>)
 8000b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6a:	4a10      	ldr	r2, [pc, #64]	; (8000bac <HAL_SPI_MspInit+0x80>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b72:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <HAL_SPI_MspInit+0x80>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
<<<<<<< HEAD
 8000baa:	23e0      	movs	r3, #224	; 0xe0
 8000bac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bba:	2305      	movs	r3, #5
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbe:	f107 0314 	add.w	r3, r7, #20
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc8:	f001 fb66 	bl	8002298 <HAL_GPIO_Init>
=======
 8000b7e:	23e0      	movs	r3, #224	; 0xe0
 8000b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	2302      	movs	r3, #2
 8000b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b8e:	2305      	movs	r3, #5
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	4619      	mov	r1, r3
 8000b98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b9c:	f001 fb60 	bl	8002260 <HAL_GPIO_Init>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
<<<<<<< HEAD
 8000bcc:	bf00      	nop
 8000bce:	3728      	adds	r7, #40	; 0x28
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40013000 	.word	0x40013000
 8000bd8:	40021000 	.word	0x40021000

08000bdc <HAL_PCD_MspInit>:
=======
 8000ba0:	bf00      	nop
 8000ba2:	3728      	adds	r7, #40	; 0x28
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40013000 	.word	0x40013000
 8000bac:	40021000 	.word	0x40021000

08000bb0 <HAL_PCD_MspInit>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
<<<<<<< HEAD
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08a      	sub	sp, #40	; 0x28
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000bfc:	d154      	bne.n	8000ca8 <HAL_PCD_MspInit+0xcc>
=======
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08a      	sub	sp, #40	; 0x28
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000bd0:	d154      	bne.n	8000c7c <HAL_PCD_MspInit+0xcc>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
<<<<<<< HEAD
 8000bfe:	4b2c      	ldr	r3, [pc, #176]	; (8000cb0 <HAL_PCD_MspInit+0xd4>)
 8000c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c02:	4a2b      	ldr	r2, [pc, #172]	; (8000cb0 <HAL_PCD_MspInit+0xd4>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c0a:	4b29      	ldr	r3, [pc, #164]	; (8000cb0 <HAL_PCD_MspInit+0xd4>)
 8000c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]
=======
 8000bd2:	4b2c      	ldr	r3, [pc, #176]	; (8000c84 <HAL_PCD_MspInit+0xd4>)
 8000bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd6:	4a2b      	ldr	r2, [pc, #172]	; (8000c84 <HAL_PCD_MspInit+0xd4>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bde:	4b29      	ldr	r3, [pc, #164]	; (8000c84 <HAL_PCD_MspInit+0xd4>)
 8000be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	693b      	ldr	r3, [r7, #16]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
<<<<<<< HEAD
 8000c16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	4619      	mov	r1, r3
 8000c2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c2e:	f001 fb33 	bl	8002298 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000c32:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c40:	2303      	movs	r3, #3
 8000c42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c44:	230a      	movs	r3, #10
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c52:	f001 fb21 	bl	8002298 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000c56:	4b16      	ldr	r3, [pc, #88]	; (8000cb0 <HAL_PCD_MspInit+0xd4>)
 8000c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5a:	4a15      	ldr	r2, [pc, #84]	; (8000cb0 <HAL_PCD_MspInit+0xd4>)
 8000c5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c62:	4b13      	ldr	r3, [pc, #76]	; (8000cb0 <HAL_PCD_MspInit+0xd4>)
 8000c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c6e:	4b10      	ldr	r3, [pc, #64]	; (8000cb0 <HAL_PCD_MspInit+0xd4>)
 8000c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d114      	bne.n	8000ca4 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c7a:	4b0d      	ldr	r3, [pc, #52]	; (8000cb0 <HAL_PCD_MspInit+0xd4>)
 8000c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c7e:	4a0c      	ldr	r2, [pc, #48]	; (8000cb0 <HAL_PCD_MspInit+0xd4>)
 8000c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c84:	6593      	str	r3, [r2, #88]	; 0x58
 8000c86:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <HAL_PCD_MspInit+0xd4>)
 8000c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8000c92:	f001 ffa1 	bl	8002bd8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c96:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_PCD_MspInit+0xd4>)
 8000c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c9a:	4a05      	ldr	r2, [pc, #20]	; (8000cb0 <HAL_PCD_MspInit+0xd4>)
 8000c9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ca0:	6593      	str	r3, [r2, #88]	; 0x58
=======
 8000bea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c02:	f001 fb2d 	bl	8002260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000c06:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c14:	2303      	movs	r3, #3
 8000c16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c18:	230a      	movs	r3, #10
 8000c1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	4619      	mov	r1, r3
 8000c22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c26:	f001 fb1b 	bl	8002260 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000c2a:	4b16      	ldr	r3, [pc, #88]	; (8000c84 <HAL_PCD_MspInit+0xd4>)
 8000c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2e:	4a15      	ldr	r2, [pc, #84]	; (8000c84 <HAL_PCD_MspInit+0xd4>)
 8000c30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c36:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <HAL_PCD_MspInit+0xd4>)
 8000c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c42:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <HAL_PCD_MspInit+0xd4>)
 8000c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d114      	bne.n	8000c78 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c4e:	4b0d      	ldr	r3, [pc, #52]	; (8000c84 <HAL_PCD_MspInit+0xd4>)
 8000c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c52:	4a0c      	ldr	r2, [pc, #48]	; (8000c84 <HAL_PCD_MspInit+0xd4>)
 8000c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c58:	6593      	str	r3, [r2, #88]	; 0x58
 8000c5a:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <HAL_PCD_MspInit+0xd4>)
 8000c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c62:	60bb      	str	r3, [r7, #8]
 8000c64:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8000c66:	f001 ff77 	bl	8002b58 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c6a:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <HAL_PCD_MspInit+0xd4>)
 8000c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c6e:	4a05      	ldr	r2, [pc, #20]	; (8000c84 <HAL_PCD_MspInit+0xd4>)
 8000c70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c74:	6593      	str	r3, [r2, #88]	; 0x58
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
<<<<<<< HEAD
 8000ca2:	e001      	b.n	8000ca8 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8000ca4:	f001 ff98 	bl	8002bd8 <HAL_PWREx_EnableVddUSB>
}
 8000ca8:	bf00      	nop
 8000caa:	3728      	adds	r7, #40	; 0x28
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40021000 	.word	0x40021000

08000cb4 <HAL_InitTick>:
=======
 8000c76:	e001      	b.n	8000c7c <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8000c78:	f001 ff6e 	bl	8002b58 <HAL_PWREx_EnableVddUSB>
}
 8000c7c:	bf00      	nop
 8000c7e:	3728      	adds	r7, #40	; 0x28
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40021000 	.word	0x40021000

08000c88 <HAL_InitTick>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08e      	sub	sp, #56	; 0x38
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
=======
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08e      	sub	sp, #56	; 0x38
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
<<<<<<< HEAD
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000cc2:	4b34      	ldr	r3, [pc, #208]	; (8000d94 <HAL_InitTick+0xe0>)
 8000cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cc6:	4a33      	ldr	r2, [pc, #204]	; (8000d94 <HAL_InitTick+0xe0>)
 8000cc8:	f043 0320 	orr.w	r3, r3, #32
 8000ccc:	6593      	str	r3, [r2, #88]	; 0x58
 8000cce:	4b31      	ldr	r3, [pc, #196]	; (8000d94 <HAL_InitTick+0xe0>)
 8000cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd2:	f003 0320 	and.w	r3, r3, #32
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cda:	f107 0210 	add.w	r2, r7, #16
 8000cde:	f107 0314 	add.w	r3, r7, #20
 8000ce2:	4611      	mov	r1, r2
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f002 fd4f 	bl	8003788 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000cea:	6a3b      	ldr	r3, [r7, #32]
 8000cec:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d103      	bne.n	8000cfc <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cf4:	f002 fd32 	bl	800375c <HAL_RCC_GetPCLK1Freq>
 8000cf8:	6378      	str	r0, [r7, #52]	; 0x34
 8000cfa:	e004      	b.n	8000d06 <HAL_InitTick+0x52>
=======
 8000c90:	2300      	movs	r3, #0
 8000c92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000c96:	4b34      	ldr	r3, [pc, #208]	; (8000d68 <HAL_InitTick+0xe0>)
 8000c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c9a:	4a33      	ldr	r2, [pc, #204]	; (8000d68 <HAL_InitTick+0xe0>)
 8000c9c:	f043 0320 	orr.w	r3, r3, #32
 8000ca0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ca2:	4b31      	ldr	r3, [pc, #196]	; (8000d68 <HAL_InitTick+0xe0>)
 8000ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ca6:	f003 0320 	and.w	r3, r3, #32
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cae:	f107 0210 	add.w	r2, r7, #16
 8000cb2:	f107 0314 	add.w	r3, r7, #20
 8000cb6:	4611      	mov	r1, r2
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f002 fd25 	bl	8003708 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000cbe:	6a3b      	ldr	r3, [r7, #32]
 8000cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d103      	bne.n	8000cd0 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cc8:	f002 fd08 	bl	80036dc <HAL_RCC_GetPCLK1Freq>
 8000ccc:	6378      	str	r0, [r7, #52]	; 0x34
 8000cce:	e004      	b.n	8000cda <HAL_InitTick+0x52>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
<<<<<<< HEAD
 8000cfc:	f002 fd2e 	bl	800375c <HAL_RCC_GetPCLK1Freq>
 8000d00:	4603      	mov	r3, r0
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	637b      	str	r3, [r7, #52]	; 0x34
=======
 8000cd0:	f002 fd04 	bl	80036dc <HAL_RCC_GetPCLK1Freq>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	637b      	str	r3, [r7, #52]	; 0x34
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
<<<<<<< HEAD
 8000d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d08:	4a23      	ldr	r2, [pc, #140]	; (8000d98 <HAL_InitTick+0xe4>)
 8000d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d0e:	0c9b      	lsrs	r3, r3, #18
 8000d10:	3b01      	subs	r3, #1
 8000d12:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000d14:	4b21      	ldr	r3, [pc, #132]	; (8000d9c <HAL_InitTick+0xe8>)
 8000d16:	4a22      	ldr	r2, [pc, #136]	; (8000da0 <HAL_InitTick+0xec>)
 8000d18:	601a      	str	r2, [r3, #0]
=======
 8000cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cdc:	4a23      	ldr	r2, [pc, #140]	; (8000d6c <HAL_InitTick+0xe4>)
 8000cde:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce2:	0c9b      	lsrs	r3, r3, #18
 8000ce4:	3b01      	subs	r3, #1
 8000ce6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000ce8:	4b21      	ldr	r3, [pc, #132]	; (8000d70 <HAL_InitTick+0xe8>)
 8000cea:	4a22      	ldr	r2, [pc, #136]	; (8000d74 <HAL_InitTick+0xec>)
 8000cec:	601a      	str	r2, [r3, #0]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
<<<<<<< HEAD
 8000d1a:	4b20      	ldr	r3, [pc, #128]	; (8000d9c <HAL_InitTick+0xe8>)
 8000d1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d20:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000d22:	4a1e      	ldr	r2, [pc, #120]	; (8000d9c <HAL_InitTick+0xe8>)
 8000d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d26:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000d28:	4b1c      	ldr	r3, [pc, #112]	; (8000d9c <HAL_InitTick+0xe8>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d2e:	4b1b      	ldr	r3, [pc, #108]	; (8000d9c <HAL_InitTick+0xe8>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d34:	4b19      	ldr	r3, [pc, #100]	; (8000d9c <HAL_InitTick+0xe8>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8000d3a:	4818      	ldr	r0, [pc, #96]	; (8000d9c <HAL_InitTick+0xe8>)
 8000d3c:	f003 fb33 	bl	80043a6 <HAL_TIM_Base_Init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000d46:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d11b      	bne.n	8000d86 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8000d4e:	4813      	ldr	r0, [pc, #76]	; (8000d9c <HAL_InitTick+0xe8>)
 8000d50:	f003 fb8a 	bl	8004468 <HAL_TIM_Base_Start_IT>
 8000d54:	4603      	mov	r3, r0
 8000d56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000d5a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d111      	bne.n	8000d86 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000d62:	2037      	movs	r0, #55	; 0x37
 8000d64:	f001 fa8a 	bl	800227c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2b0f      	cmp	r3, #15
 8000d6c:	d808      	bhi.n	8000d80 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	6879      	ldr	r1, [r7, #4]
 8000d72:	2037      	movs	r0, #55	; 0x37
 8000d74:	f001 fa66 	bl	8002244 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d78:	4a0a      	ldr	r2, [pc, #40]	; (8000da4 <HAL_InitTick+0xf0>)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6013      	str	r3, [r2, #0]
 8000d7e:	e002      	b.n	8000d86 <HAL_InitTick+0xd2>
=======
 8000cee:	4b20      	ldr	r3, [pc, #128]	; (8000d70 <HAL_InitTick+0xe8>)
 8000cf0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cf4:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000cf6:	4a1e      	ldr	r2, [pc, #120]	; (8000d70 <HAL_InitTick+0xe8>)
 8000cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cfa:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000cfc:	4b1c      	ldr	r3, [pc, #112]	; (8000d70 <HAL_InitTick+0xe8>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d02:	4b1b      	ldr	r3, [pc, #108]	; (8000d70 <HAL_InitTick+0xe8>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d08:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <HAL_InitTick+0xe8>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8000d0e:	4818      	ldr	r0, [pc, #96]	; (8000d70 <HAL_InitTick+0xe8>)
 8000d10:	f003 fb09 	bl	8004326 <HAL_TIM_Base_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000d1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d11b      	bne.n	8000d5a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8000d22:	4813      	ldr	r0, [pc, #76]	; (8000d70 <HAL_InitTick+0xe8>)
 8000d24:	f003 fb60 	bl	80043e8 <HAL_TIM_Base_Start_IT>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000d2e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d111      	bne.n	8000d5a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000d36:	2037      	movs	r0, #55	; 0x37
 8000d38:	f001 fa84 	bl	8002244 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2b0f      	cmp	r3, #15
 8000d40:	d808      	bhi.n	8000d54 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8000d42:	2200      	movs	r2, #0
 8000d44:	6879      	ldr	r1, [r7, #4]
 8000d46:	2037      	movs	r0, #55	; 0x37
 8000d48:	f001 fa60 	bl	800220c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d4c:	4a0a      	ldr	r2, [pc, #40]	; (8000d78 <HAL_InitTick+0xf0>)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6013      	str	r3, [r2, #0]
 8000d52:	e002      	b.n	8000d5a <HAL_InitTick+0xd2>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
      }
      else
      {
        status = HAL_ERROR;
<<<<<<< HEAD
 8000d80:	2301      	movs	r3, #1
 8000d82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
=======
 8000d54:	2301      	movs	r3, #1
 8000d56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
      }
    }
  }

 /* Return function status */
  return status;
<<<<<<< HEAD
 8000d86:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3738      	adds	r7, #56	; 0x38
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40021000 	.word	0x40021000
 8000d98:	431bde83 	.word	0x431bde83
 8000d9c:	20000710 	.word	0x20000710
 8000da0:	40001400 	.word	0x40001400
 8000da4:	20000004 	.word	0x20000004

08000da8 <NMI_Handler>:
=======
 8000d5a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3738      	adds	r7, #56	; 0x38
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	431bde83 	.word	0x431bde83
 8000d70:	20000724 	.word	0x20000724
 8000d74:	40001400 	.word	0x40001400
 8000d78:	20000004 	.word	0x20000004

08000d7c <NMI_Handler>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
=======
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
<<<<<<< HEAD
 8000dac:	e7fe      	b.n	8000dac <NMI_Handler+0x4>

08000dae <HardFault_Handler>:
=======
 8000d80:	e7fe      	b.n	8000d80 <NMI_Handler+0x4>

08000d82 <HardFault_Handler>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0
=======
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8000db2:	e7fe      	b.n	8000db2 <HardFault_Handler+0x4>

08000db4 <MemManage_Handler>:
=======
 8000d86:	e7fe      	b.n	8000d86 <HardFault_Handler+0x4>

08000d88 <MemManage_Handler>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
=======
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8000db8:	e7fe      	b.n	8000db8 <MemManage_Handler+0x4>

08000dba <BusFault_Handler>:
=======
 8000d8c:	e7fe      	b.n	8000d8c <MemManage_Handler+0x4>

08000d8e <BusFault_Handler>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0
=======
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8000dbe:	e7fe      	b.n	8000dbe <BusFault_Handler+0x4>

08000dc0 <UsageFault_Handler>:
=======
 8000d92:	e7fe      	b.n	8000d92 <BusFault_Handler+0x4>

08000d94 <UsageFault_Handler>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
=======
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8000dc4:	e7fe      	b.n	8000dc4 <UsageFault_Handler+0x4>

08000dc6 <DebugMon_Handler>:
=======
 8000d98:	e7fe      	b.n	8000d98 <UsageFault_Handler+0x4>

08000d9a <DebugMon_Handler>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0
=======
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 8000dca:	bf00      	nop
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000dd8:	2010      	movs	r0, #16
 8000dda:	f001 fc07 	bl	80025ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <TIM7_IRQHandler>:
=======
 8000d9e:	bf00      	nop
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <TIM7_IRQHandler>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
<<<<<<< HEAD
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
=======
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
<<<<<<< HEAD
 8000de8:	4802      	ldr	r0, [pc, #8]	; (8000df4 <TIM7_IRQHandler+0x10>)
 8000dea:	f003 fbad 	bl	8004548 <HAL_TIM_IRQHandler>
=======
 8000dac:	4802      	ldr	r0, [pc, #8]	; (8000db8 <TIM7_IRQHandler+0x10>)
 8000dae:	f003 fb8b 	bl	80044c8 <HAL_TIM_IRQHandler>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
<<<<<<< HEAD
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000710 	.word	0x20000710

08000df8 <SystemInit>:
=======
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000724 	.word	0x20000724

08000dbc <SystemInit>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
<<<<<<< HEAD
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
=======
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
<<<<<<< HEAD
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <SystemInit+0x20>)
 8000dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e02:	4a05      	ldr	r2, [pc, #20]	; (8000e18 <SystemInit+0x20>)
 8000e04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <Reset_Handler>:
=======
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <SystemInit+0x20>)
 8000dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dc6:	4a05      	ldr	r2, [pc, #20]	; (8000ddc <SystemInit+0x20>)
 8000dc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <Reset_Handler>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
<<<<<<< HEAD
 8000e1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e54 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e20:	f7ff ffea 	bl	8000df8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e24:	480c      	ldr	r0, [pc, #48]	; (8000e58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e26:	490d      	ldr	r1, [pc, #52]	; (8000e5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e28:	4a0d      	ldr	r2, [pc, #52]	; (8000e60 <LoopForever+0xe>)
  movs r3, #0
 8000e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e2c:	e002      	b.n	8000e34 <LoopCopyDataInit>

08000e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e32:	3304      	adds	r3, #4

08000e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e38:	d3f9      	bcc.n	8000e2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3a:	4a0a      	ldr	r2, [pc, #40]	; (8000e64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e3c:	4c0a      	ldr	r4, [pc, #40]	; (8000e68 <LoopForever+0x16>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e40:	e001      	b.n	8000e46 <LoopFillZerobss>

08000e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e44:	3204      	adds	r2, #4

08000e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e48:	d3fb      	bcc.n	8000e42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e4a:	f006 fe4d 	bl	8007ae8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e4e:	f7ff f9cf 	bl	80001f0 <main>

08000e52 <LoopForever>:

LoopForever:
    b LoopForever
 8000e52:	e7fe      	b.n	8000e52 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e54:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e5c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000e60:	08007d74 	.word	0x08007d74
  ldr r2, =_sbss
 8000e64:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000e68:	20002628 	.word	0x20002628

08000e6c <ADC1_2_IRQHandler>:
=======
 8000de0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e18 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000de4:	f7ff ffea 	bl	8000dbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000de8:	480c      	ldr	r0, [pc, #48]	; (8000e1c <LoopForever+0x6>)
  ldr r1, =_edata
 8000dea:	490d      	ldr	r1, [pc, #52]	; (8000e20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dec:	4a0d      	ldr	r2, [pc, #52]	; (8000e24 <LoopForever+0xe>)
  movs r3, #0
 8000dee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df0:	e002      	b.n	8000df8 <LoopCopyDataInit>

08000df2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000df2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000df6:	3304      	adds	r3, #4

08000df8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dfc:	d3f9      	bcc.n	8000df2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dfe:	4a0a      	ldr	r2, [pc, #40]	; (8000e28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e00:	4c0a      	ldr	r4, [pc, #40]	; (8000e2c <LoopForever+0x16>)
  movs r3, #0
 8000e02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e04:	e001      	b.n	8000e0a <LoopFillZerobss>

08000e06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e08:	3204      	adds	r2, #4

08000e0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e0c:	d3fb      	bcc.n	8000e06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e0e:	f006 fdcd 	bl	80079ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e12:	f7ff f9ed 	bl	80001f0 <main>

08000e16 <LoopForever>:

LoopForever:
    b LoopForever
 8000e16:	e7fe      	b.n	8000e16 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e18:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000e1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e20:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000e24:	08007d7c 	.word	0x08007d7c
  ldr r2, =_sbss
 8000e28:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000e2c:	2000252c 	.word	0x2000252c

08000e30 <ADC1_2_IRQHandler>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
<<<<<<< HEAD
 8000e6c:	e7fe      	b.n	8000e6c <ADC1_2_IRQHandler>

08000e6e <HAL_Init>:
=======
 8000e30:	e7fe      	b.n	8000e30 <ADC1_2_IRQHandler>

08000e32 <HAL_Init>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b082      	sub	sp, #8
 8000e72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e74:	2300      	movs	r3, #0
 8000e76:	71fb      	strb	r3, [r7, #7]
=======
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	71fb      	strb	r3, [r7, #7]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 8000e78:	2003      	movs	r0, #3
 8000e7a:	f001 f9d8 	bl	800222e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e7e:	200f      	movs	r0, #15
 8000e80:	f7ff ff18 	bl	8000cb4 <HAL_InitTick>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d002      	beq.n	8000e90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	71fb      	strb	r3, [r7, #7]
 8000e8e:	e001      	b.n	8000e94 <HAL_Init+0x26>
=======
 8000e3c:	2003      	movs	r0, #3
 8000e3e:	f001 f9da 	bl	80021f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e42:	200f      	movs	r0, #15
 8000e44:	f7ff ff20 	bl	8000c88 <HAL_InitTick>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d002      	beq.n	8000e54 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	71fb      	strb	r3, [r7, #7]
 8000e52:	e001      	b.n	8000e58 <HAL_Init+0x26>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
<<<<<<< HEAD
 8000e90:	f7ff fcf8 	bl	8000884 <HAL_MspInit>
=======
 8000e54:	f7ff fd00 	bl	8000858 <HAL_MspInit>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }

  /* Return function status */
  return status;
<<<<<<< HEAD
 8000e94:	79fb      	ldrb	r3, [r7, #7]
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
	...

08000ea0 <HAL_IncTick>:
=======
 8000e58:	79fb      	ldrb	r3, [r7, #7]
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <HAL_IncTick>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ea4:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <HAL_IncTick+0x20>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <HAL_IncTick+0x24>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4413      	add	r3, r2
 8000eb0:	4a04      	ldr	r2, [pc, #16]	; (8000ec4 <HAL_IncTick+0x24>)
 8000eb2:	6013      	str	r3, [r2, #0]
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	20000008 	.word	0x20000008
 8000ec4:	2000075c 	.word	0x2000075c

08000ec8 <HAL_GetTick>:
=======
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e68:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <HAL_IncTick+0x20>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <HAL_IncTick+0x24>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4413      	add	r3, r2
 8000e74:	4a04      	ldr	r2, [pc, #16]	; (8000e88 <HAL_IncTick+0x24>)
 8000e76:	6013      	str	r3, [r2, #0]
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	20000008 	.word	0x20000008
 8000e88:	20000770 	.word	0x20000770

08000e8c <HAL_GetTick>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  return uwTick;
 8000ecc:	4b03      	ldr	r3, [pc, #12]	; (8000edc <HAL_GetTick+0x14>)
 8000ece:	681b      	ldr	r3, [r3, #0]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	2000075c 	.word	0x2000075c

08000ee0 <HAL_Delay>:
=======
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e90:	4b03      	ldr	r3, [pc, #12]	; (8000ea0 <HAL_GetTick+0x14>)
 8000e92:	681b      	ldr	r3, [r3, #0]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	20000770 	.word	0x20000770

08000ea4 <HAL_Delay>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
<<<<<<< HEAD
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee8:	f7ff ffee 	bl	8000ec8 <HAL_GetTick>
 8000eec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef8:	d005      	beq.n	8000f06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000efa:	4b0a      	ldr	r3, [pc, #40]	; (8000f24 <HAL_Delay+0x44>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	461a      	mov	r2, r3
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	4413      	add	r3, r2
 8000f04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f06:	bf00      	nop
 8000f08:	f7ff ffde 	bl	8000ec8 <HAL_GetTick>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	68fa      	ldr	r2, [r7, #12]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d8f7      	bhi.n	8000f08 <HAL_Delay+0x28>
  {
  }
}
 8000f18:	bf00      	nop
 8000f1a:	bf00      	nop
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000008 	.word	0x20000008

08000f28 <LL_ADC_SetCommonClock>:
=======
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eac:	f7ff ffee 	bl	8000e8c <HAL_GetTick>
 8000eb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ebc:	d005      	beq.n	8000eca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ebe:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <HAL_Delay+0x44>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eca:	bf00      	nop
 8000ecc:	f7ff ffde 	bl	8000e8c <HAL_GetTick>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	68fa      	ldr	r2, [r7, #12]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d8f7      	bhi.n	8000ecc <HAL_Delay+0x28>
  {
  }
}
 8000edc:	bf00      	nop
 8000ede:	bf00      	nop
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20000008 	.word	0x20000008

08000eec <LL_ADC_SetCommonClock>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
<<<<<<< HEAD
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	431a      	orrs	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	609a      	str	r2, [r3, #8]
}
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <LL_ADC_SetCommonPathInternalCh>:
=======
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	431a      	orrs	r2, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	609a      	str	r2, [r3, #8]
}
 8000f06:	bf00      	nop
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr

08000f12 <LL_ADC_SetCommonPathInternalCh>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
<<<<<<< HEAD
 8000f4e:	b480      	push	{r7}
 8000f50:	b083      	sub	sp, #12
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
 8000f56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	431a      	orrs	r2, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	609a      	str	r2, [r3, #8]
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <LL_ADC_GetCommonPathInternalCh>:
=======
 8000f12:	b480      	push	{r7}
 8000f14:	b083      	sub	sp, #12
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
 8000f1a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	431a      	orrs	r2, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
}
 8000f2c:	bf00      	nop
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <LL_ADC_GetCommonPathInternalCh>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
<<<<<<< HEAD
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <LL_ADC_SetOffset>:
=======
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <LL_ADC_SetOffset>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
<<<<<<< HEAD
 8000f90:	b480      	push	{r7}
 8000f92:	b087      	sub	sp, #28
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
 8000f9c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	3360      	adds	r3, #96	; 0x60
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	4413      	add	r3, r2
 8000faa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <LL_ADC_SetOffset+0x44>)
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000fba:	683a      	ldr	r2, [r7, #0]
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000fc8:	bf00      	nop
 8000fca:	371c      	adds	r7, #28
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	03fff000 	.word	0x03fff000

08000fd8 <LL_ADC_GetOffsetChannel>:
=======
 8000f54:	b480      	push	{r7}
 8000f56:	b087      	sub	sp, #28
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
 8000f60:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	3360      	adds	r3, #96	; 0x60
 8000f66:	461a      	mov	r2, r3
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	4413      	add	r3, r2
 8000f6e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <LL_ADC_SetOffset+0x44>)
 8000f76:	4013      	ands	r3, r2
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000f7e:	683a      	ldr	r2, [r7, #0]
 8000f80:	430a      	orrs	r2, r1
 8000f82:	4313      	orrs	r3, r2
 8000f84:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000f8c:	bf00      	nop
 8000f8e:	371c      	adds	r7, #28
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	03fff000 	.word	0x03fff000

08000f9c <LL_ADC_GetOffsetChannel>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
<<<<<<< HEAD
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	3360      	adds	r3, #96	; 0x60
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	4413      	add	r3, r2
 8000fee:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3714      	adds	r7, #20
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <LL_ADC_SetOffsetState>:
=======
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	3360      	adds	r3, #96	; 0x60
 8000faa:	461a      	mov	r2, r3
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	4413      	add	r3, r2
 8000fb2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <LL_ADC_SetOffsetState>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
<<<<<<< HEAD
 8001004:	b480      	push	{r7}
 8001006:	b087      	sub	sp, #28
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	3360      	adds	r3, #96	; 0x60
 8001014:	461a      	mov	r2, r3
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	4413      	add	r3, r2
 800101c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	431a      	orrs	r2, r3
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800102e:	bf00      	nop
 8001030:	371c      	adds	r7, #28
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <LL_ADC_SetSamplingTimeCommonConfig>:
=======
 8000fc8:	b480      	push	{r7}
 8000fca:	b087      	sub	sp, #28
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	3360      	adds	r3, #96	; 0x60
 8000fd8:	461a      	mov	r2, r3
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	4413      	add	r3, r2
 8000fe0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	431a      	orrs	r2, r3
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000ff2:	bf00      	nop
 8000ff4:	371c      	adds	r7, #28
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <LL_ADC_SetSamplingTimeCommonConfig>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
<<<<<<< HEAD
 800103a:	b480      	push	{r7}
 800103c:	b083      	sub	sp, #12
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
 8001042:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	695b      	ldr	r3, [r3, #20]
 8001048:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	431a      	orrs	r2, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	615a      	str	r2, [r3, #20]
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <LL_ADC_REG_SetSequencerRanks>:
=======
 8000ffe:	b480      	push	{r7}
 8001000:	b083      	sub	sp, #12
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
 8001006:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	695b      	ldr	r3, [r3, #20]
 800100c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	431a      	orrs	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	615a      	str	r2, [r3, #20]
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <LL_ADC_REG_SetSequencerRanks>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
<<<<<<< HEAD
 8001060:	b480      	push	{r7}
 8001062:	b087      	sub	sp, #28
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
=======
 8001024:	b480      	push	{r7}
 8001026:	b087      	sub	sp, #28
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
<<<<<<< HEAD
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	3330      	adds	r3, #48	; 0x30
 8001070:	461a      	mov	r2, r3
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	0a1b      	lsrs	r3, r3, #8
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	f003 030c 	and.w	r3, r3, #12
 800107c:	4413      	add	r3, r2
 800107e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	f003 031f 	and.w	r3, r3, #31
 800108a:	211f      	movs	r1, #31
 800108c:	fa01 f303 	lsl.w	r3, r1, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	401a      	ands	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	0e9b      	lsrs	r3, r3, #26
 8001098:	f003 011f 	and.w	r1, r3, #31
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	f003 031f 	and.w	r3, r3, #31
 80010a2:	fa01 f303 	lsl.w	r3, r1, r3
 80010a6:	431a      	orrs	r2, r3
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80010ac:	bf00      	nop
 80010ae:	371c      	adds	r7, #28
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <LL_ADC_SetChannelSamplingTime>:
=======
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	3330      	adds	r3, #48	; 0x30
 8001034:	461a      	mov	r2, r3
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	0a1b      	lsrs	r3, r3, #8
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	f003 030c 	and.w	r3, r3, #12
 8001040:	4413      	add	r3, r2
 8001042:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	f003 031f 	and.w	r3, r3, #31
 800104e:	211f      	movs	r1, #31
 8001050:	fa01 f303 	lsl.w	r3, r1, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	401a      	ands	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	0e9b      	lsrs	r3, r3, #26
 800105c:	f003 011f 	and.w	r1, r3, #31
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	f003 031f 	and.w	r3, r3, #31
 8001066:	fa01 f303 	lsl.w	r3, r1, r3
 800106a:	431a      	orrs	r2, r3
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001070:	bf00      	nop
 8001072:	371c      	adds	r7, #28
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <LL_ADC_SetChannelSamplingTime>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
<<<<<<< HEAD
 80010b8:	b480      	push	{r7}
 80010ba:	b087      	sub	sp, #28
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
=======
 800107c:	b480      	push	{r7}
 800107e:	b087      	sub	sp, #28
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
<<<<<<< HEAD
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	3314      	adds	r3, #20
 80010c8:	461a      	mov	r2, r3
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	0e5b      	lsrs	r3, r3, #25
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	f003 0304 	and.w	r3, r3, #4
 80010d4:	4413      	add	r3, r2
 80010d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	0d1b      	lsrs	r3, r3, #20
 80010e0:	f003 031f 	and.w	r3, r3, #31
 80010e4:	2107      	movs	r1, #7
 80010e6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ea:	43db      	mvns	r3, r3
 80010ec:	401a      	ands	r2, r3
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	0d1b      	lsrs	r3, r3, #20
 80010f2:	f003 031f 	and.w	r3, r3, #31
 80010f6:	6879      	ldr	r1, [r7, #4]
 80010f8:	fa01 f303 	lsl.w	r3, r1, r3
 80010fc:	431a      	orrs	r2, r3
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001102:	bf00      	nop
 8001104:	371c      	adds	r7, #28
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
	...

08001110 <LL_ADC_SetChannelSingleDiff>:
=======
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	3314      	adds	r3, #20
 800108c:	461a      	mov	r2, r3
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	0e5b      	lsrs	r3, r3, #25
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	f003 0304 	and.w	r3, r3, #4
 8001098:	4413      	add	r3, r2
 800109a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	0d1b      	lsrs	r3, r3, #20
 80010a4:	f003 031f 	and.w	r3, r3, #31
 80010a8:	2107      	movs	r1, #7
 80010aa:	fa01 f303 	lsl.w	r3, r1, r3
 80010ae:	43db      	mvns	r3, r3
 80010b0:	401a      	ands	r2, r3
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	0d1b      	lsrs	r3, r3, #20
 80010b6:	f003 031f 	and.w	r3, r3, #31
 80010ba:	6879      	ldr	r1, [r7, #4]
 80010bc:	fa01 f303 	lsl.w	r3, r1, r3
 80010c0:	431a      	orrs	r2, r3
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80010c6:	bf00      	nop
 80010c8:	371c      	adds	r7, #28
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
	...

080010d4 <LL_ADC_SetChannelSingleDiff>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
<<<<<<< HEAD
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
=======
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
<<<<<<< HEAD
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001128:	43db      	mvns	r3, r3
 800112a:	401a      	ands	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f003 0318 	and.w	r3, r3, #24
 8001132:	4908      	ldr	r1, [pc, #32]	; (8001154 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001134:	40d9      	lsrs	r1, r3
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	400b      	ands	r3, r1
 800113a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800113e:	431a      	orrs	r2, r3
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001146:	bf00      	nop
 8001148:	3714      	adds	r7, #20
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	0007ffff 	.word	0x0007ffff

08001158 <LL_ADC_DisableDeepPowerDown>:
=======
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010ec:	43db      	mvns	r3, r3
 80010ee:	401a      	ands	r2, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f003 0318 	and.w	r3, r3, #24
 80010f6:	4908      	ldr	r1, [pc, #32]	; (8001118 <LL_ADC_SetChannelSingleDiff+0x44>)
 80010f8:	40d9      	lsrs	r1, r3
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	400b      	ands	r3, r1
 80010fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001102:	431a      	orrs	r2, r3
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800110a:	bf00      	nop
 800110c:	3714      	adds	r7, #20
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	0007ffff 	.word	0x0007ffff

0800111c <LL_ADC_DisableDeepPowerDown>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
=======
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
<<<<<<< HEAD
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001168:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	6093      	str	r3, [r2, #8]
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <LL_ADC_IsDeepPowerDownEnabled>:
=======
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800112c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	6093      	str	r3, [r2, #8]
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <LL_ADC_IsDeepPowerDownEnabled>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800118c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001190:	d101      	bne.n	8001196 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001192:	2301      	movs	r3, #1
 8001194:	e000      	b.n	8001198 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001196:	2300      	movs	r3, #0
}
 8001198:	4618      	mov	r0, r3
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <LL_ADC_EnableInternalRegulator>:
=======
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001150:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001154:	d101      	bne.n	800115a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001156:	2301      	movs	r3, #1
 8001158:	e000      	b.n	800115c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800115a:	2300      	movs	r3, #0
}
 800115c:	4618      	mov	r0, r3
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <LL_ADC_EnableInternalRegulator>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
=======
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
<<<<<<< HEAD
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80011b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011b8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <LL_ADC_IsInternalRegulatorEnabled>:
=======
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001178:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800117c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <LL_ADC_IsInternalRegulatorEnabled>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80011e0:	d101      	bne.n	80011e6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80011e2:	2301      	movs	r3, #1
 80011e4:	e000      	b.n	80011e8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80011e6:	2300      	movs	r3, #0
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <LL_ADC_IsEnabled>:
=======
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80011a4:	d101      	bne.n	80011aa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80011a6:	2301      	movs	r3, #1
 80011a8:	e000      	b.n	80011ac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80011aa:	2300      	movs	r3, #0
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <LL_ADC_IsEnabled>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	f003 0301 	and.w	r3, r3, #1
 8001204:	2b01      	cmp	r3, #1
 8001206:	d101      	bne.n	800120c <LL_ADC_IsEnabled+0x18>
 8001208:	2301      	movs	r3, #1
 800120a:	e000      	b.n	800120e <LL_ADC_IsEnabled+0x1a>
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <LL_ADC_REG_IsConversionOngoing>:
=======
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d101      	bne.n	80011d0 <LL_ADC_IsEnabled+0x18>
 80011cc:	2301      	movs	r3, #1
 80011ce:	e000      	b.n	80011d2 <LL_ADC_IsEnabled+0x1a>
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <LL_ADC_REG_IsConversionOngoing>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 800121a:	b480      	push	{r7}
 800121c:	b083      	sub	sp, #12
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f003 0304 	and.w	r3, r3, #4
 800122a:	2b04      	cmp	r3, #4
 800122c:	d101      	bne.n	8001232 <LL_ADC_REG_IsConversionOngoing+0x18>
 800122e:	2301      	movs	r3, #1
 8001230:	e000      	b.n	8001234 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001232:	2300      	movs	r3, #0
}
 8001234:	4618      	mov	r0, r3
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <LL_ADC_INJ_IsConversionOngoing>:
=======
 80011de:	b480      	push	{r7}
 80011e0:	b083      	sub	sp, #12
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	f003 0304 	and.w	r3, r3, #4
 80011ee:	2b04      	cmp	r3, #4
 80011f0:	d101      	bne.n	80011f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80011f2:	2301      	movs	r3, #1
 80011f4:	e000      	b.n	80011f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80011f6:	2300      	movs	r3, #0
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <LL_ADC_INJ_IsConversionOngoing>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	f003 0308 	and.w	r3, r3, #8
 8001250:	2b08      	cmp	r3, #8
 8001252:	d101      	bne.n	8001258 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001254:	2301      	movs	r3, #1
 8001256:	e000      	b.n	800125a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
	...

08001268 <HAL_ADC_Init>:
=======
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	f003 0308 	and.w	r3, r3, #8
 8001214:	2b08      	cmp	r3, #8
 8001216:	d101      	bne.n	800121c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001218:	2301      	movs	r3, #1
 800121a:	e000      	b.n	800121e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
	...

0800122c <HAL_ADC_Init>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 8001268:	b590      	push	{r4, r7, lr}
 800126a:	b089      	sub	sp, #36	; 0x24
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001270:	2300      	movs	r3, #0
 8001272:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001274:	2300      	movs	r3, #0
 8001276:	60bb      	str	r3, [r7, #8]
=======
 800122c:	b590      	push	{r4, r7, lr}
 800122e:	b089      	sub	sp, #36	; 0x24
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001234:	2300      	movs	r3, #0
 8001236:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001238:	2300      	movs	r3, #0
 800123a:	60bb      	str	r3, [r7, #8]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
<<<<<<< HEAD
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d101      	bne.n	8001282 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e139      	b.n	80014f6 <HAL_ADC_Init+0x28e>
=======
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d101      	bne.n	8001246 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e139      	b.n	80014ba <HAL_ADC_Init+0x28e>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
<<<<<<< HEAD
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	691b      	ldr	r3, [r3, #16]
 8001286:	2b00      	cmp	r3, #0
=======
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	691b      	ldr	r3, [r3, #16]
 800124a:	2b00      	cmp	r3, #0
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
<<<<<<< HEAD
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800128c:	2b00      	cmp	r3, #0
 800128e:	d109      	bne.n	80012a4 <HAL_ADC_Init+0x3c>
=======
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001250:	2b00      	cmp	r3, #0
 8001252:	d109      	bne.n	8001268 <HAL_ADC_Init+0x3c>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
<<<<<<< HEAD
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff fb1f 	bl	80008d4 <HAL_ADC_MspInit>
=======
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f7ff fb27 	bl	80008a8 <HAL_ADC_MspInit>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< HEAD
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
=======
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2200      	movs	r2, #0
 800125e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2200      	movs	r2, #0
 8001264:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
<<<<<<< HEAD
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff ff67 	bl	800117c <LL_ADC_IsDeepPowerDownEnabled>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d004      	beq.n	80012be <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff ff4d 	bl	8001158 <LL_ADC_DisableDeepPowerDown>
=======
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff ff67 	bl	8001140 <LL_ADC_IsDeepPowerDownEnabled>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d004      	beq.n	8001282 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ff4d 	bl	800111c <LL_ADC_DisableDeepPowerDown>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
<<<<<<< HEAD
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff ff82 	bl	80011cc <LL_ADC_IsInternalRegulatorEnabled>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d115      	bne.n	80012fa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff ff66 	bl	80011a4 <LL_ADC_EnableInternalRegulator>
=======
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff ff82 	bl	8001190 <LL_ADC_IsInternalRegulatorEnabled>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d115      	bne.n	80012be <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff ff66 	bl	8001168 <LL_ADC_EnableInternalRegulator>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
<<<<<<< HEAD
 80012d8:	4b89      	ldr	r3, [pc, #548]	; (8001500 <HAL_ADC_Init+0x298>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	099b      	lsrs	r3, r3, #6
 80012de:	4a89      	ldr	r2, [pc, #548]	; (8001504 <HAL_ADC_Init+0x29c>)
 80012e0:	fba2 2303 	umull	r2, r3, r2, r3
 80012e4:	099b      	lsrs	r3, r3, #6
 80012e6:	3301      	adds	r3, #1
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80012ec:	e002      	b.n	80012f4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	3b01      	subs	r3, #1
 80012f2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d1f9      	bne.n	80012ee <HAL_ADC_Init+0x86>
=======
 800129c:	4b89      	ldr	r3, [pc, #548]	; (80014c4 <HAL_ADC_Init+0x298>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	099b      	lsrs	r3, r3, #6
 80012a2:	4a89      	ldr	r2, [pc, #548]	; (80014c8 <HAL_ADC_Init+0x29c>)
 80012a4:	fba2 2303 	umull	r2, r3, r2, r3
 80012a8:	099b      	lsrs	r3, r3, #6
 80012aa:	3301      	adds	r3, #1
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80012b0:	e002      	b.n	80012b8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	3b01      	subs	r3, #1
 80012b6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1f9      	bne.n	80012b2 <HAL_ADC_Init+0x86>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
<<<<<<< HEAD
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff ff64 	bl	80011cc <LL_ADC_IsInternalRegulatorEnabled>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d10d      	bne.n	8001326 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800130e:	f043 0210 	orr.w	r2, r3, #16
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800131a:	f043 0201 	orr.w	r2, r3, #1
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	77fb      	strb	r3, [r7, #31]
=======
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff ff64 	bl	8001190 <LL_ADC_IsInternalRegulatorEnabled>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d10d      	bne.n	80012ea <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d2:	f043 0210 	orr.w	r2, r3, #16
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012de:	f043 0201 	orr.w	r2, r3, #1
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	77fb      	strb	r3, [r7, #31]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
<<<<<<< HEAD
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff ff75 	bl	800121a <LL_ADC_REG_IsConversionOngoing>
 8001330:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001336:	f003 0310 	and.w	r3, r3, #16
 800133a:	2b00      	cmp	r3, #0
 800133c:	f040 80d2 	bne.w	80014e4 <HAL_ADC_Init+0x27c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	2b00      	cmp	r3, #0
 8001344:	f040 80ce 	bne.w	80014e4 <HAL_ADC_Init+0x27c>
=======
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff ff75 	bl	80011de <LL_ADC_REG_IsConversionOngoing>
 80012f4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012fa:	f003 0310 	and.w	r3, r3, #16
 80012fe:	2b00      	cmp	r3, #0
 8001300:	f040 80d2 	bne.w	80014a8 <HAL_ADC_Init+0x27c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	2b00      	cmp	r3, #0
 8001308:	f040 80ce 	bne.w	80014a8 <HAL_ADC_Init+0x27c>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
<<<<<<< HEAD
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800134c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001350:	f043 0202 	orr.w	r2, r3, #2
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	659a      	str	r2, [r3, #88]	; 0x58
=======
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001310:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001314:	f043 0202 	orr.w	r2, r3, #2
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	659a      	str	r2, [r3, #88]	; 0x58
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
<<<<<<< HEAD
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff49 	bl	80011f4 <LL_ADC_IsEnabled>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d115      	bne.n	8001394 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001368:	4867      	ldr	r0, [pc, #412]	; (8001508 <HAL_ADC_Init+0x2a0>)
 800136a:	f7ff ff43 	bl	80011f4 <LL_ADC_IsEnabled>
 800136e:	4604      	mov	r4, r0
 8001370:	4866      	ldr	r0, [pc, #408]	; (800150c <HAL_ADC_Init+0x2a4>)
 8001372:	f7ff ff3f 	bl	80011f4 <LL_ADC_IsEnabled>
 8001376:	4603      	mov	r3, r0
 8001378:	431c      	orrs	r4, r3
 800137a:	4865      	ldr	r0, [pc, #404]	; (8001510 <HAL_ADC_Init+0x2a8>)
 800137c:	f7ff ff3a 	bl	80011f4 <LL_ADC_IsEnabled>
 8001380:	4603      	mov	r3, r0
 8001382:	4323      	orrs	r3, r4
 8001384:	2b00      	cmp	r3, #0
 8001386:	d105      	bne.n	8001394 <HAL_ADC_Init+0x12c>
=======
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ff49 	bl	80011b8 <LL_ADC_IsEnabled>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d115      	bne.n	8001358 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800132c:	4867      	ldr	r0, [pc, #412]	; (80014cc <HAL_ADC_Init+0x2a0>)
 800132e:	f7ff ff43 	bl	80011b8 <LL_ADC_IsEnabled>
 8001332:	4604      	mov	r4, r0
 8001334:	4866      	ldr	r0, [pc, #408]	; (80014d0 <HAL_ADC_Init+0x2a4>)
 8001336:	f7ff ff3f 	bl	80011b8 <LL_ADC_IsEnabled>
 800133a:	4603      	mov	r3, r0
 800133c:	431c      	orrs	r4, r3
 800133e:	4865      	ldr	r0, [pc, #404]	; (80014d4 <HAL_ADC_Init+0x2a8>)
 8001340:	f7ff ff3a 	bl	80011b8 <LL_ADC_IsEnabled>
 8001344:	4603      	mov	r3, r0
 8001346:	4323      	orrs	r3, r4
 8001348:	2b00      	cmp	r3, #0
 800134a:	d105      	bne.n	8001358 <HAL_ADC_Init+0x12c>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
<<<<<<< HEAD
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	4619      	mov	r1, r3
 800138e:	4861      	ldr	r0, [pc, #388]	; (8001514 <HAL_ADC_Init+0x2ac>)
 8001390:	f7ff fdca 	bl	8000f28 <LL_ADC_SetCommonClock>
=======
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	4619      	mov	r1, r3
 8001352:	4861      	ldr	r0, [pc, #388]	; (80014d8 <HAL_ADC_Init+0x2ac>)
 8001354:	f7ff fdca 	bl	8000eec <LL_ADC_SetCommonClock>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
<<<<<<< HEAD
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	7e5b      	ldrb	r3, [r3, #25]
 8001398:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800139e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80013a4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80013aa:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013b2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013b4:	4313      	orrs	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d106      	bne.n	80013d0 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c6:	3b01      	subs	r3, #1
 80013c8:	045b      	lsls	r3, r3, #17
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
=======
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	7e5b      	ldrb	r3, [r3, #25]
 800135c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001362:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001368:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800136e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001376:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001378:	4313      	orrs	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d106      	bne.n	8001394 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138a:	3b01      	subs	r3, #1
 800138c:	045b      	lsls	r3, r3, #17
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4313      	orrs	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
<<<<<<< HEAD
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d009      	beq.n	80013ec <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013dc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
=======
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001398:	2b00      	cmp	r3, #0
 800139a:	d009      	beq.n	80013b0 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
<<<<<<< HEAD
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	68da      	ldr	r2, [r3, #12]
 80013f2:	4b49      	ldr	r3, [pc, #292]	; (8001518 <HAL_ADC_Init+0x2b0>)
 80013f4:	4013      	ands	r3, r2
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	6812      	ldr	r2, [r2, #0]
 80013fa:	69b9      	ldr	r1, [r7, #24]
 80013fc:	430b      	orrs	r3, r1
 80013fe:	60d3      	str	r3, [r2, #12]
=======
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	68da      	ldr	r2, [r3, #12]
 80013b6:	4b49      	ldr	r3, [pc, #292]	; (80014dc <HAL_ADC_Init+0x2b0>)
 80013b8:	4013      	ands	r3, r2
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	6812      	ldr	r2, [r2, #0]
 80013be:	69b9      	ldr	r1, [r7, #24]
 80013c0:	430b      	orrs	r3, r1
 80013c2:	60d3      	str	r3, [r2, #12]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
<<<<<<< HEAD
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff ff08 	bl	800121a <LL_ADC_REG_IsConversionOngoing>
 800140a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff ff15 	bl	8001240 <LL_ADC_INJ_IsConversionOngoing>
 8001416:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d140      	bne.n	80014a0 <HAL_ADC_Init+0x238>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d13d      	bne.n	80014a0 <HAL_ADC_Init+0x238>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	7e1b      	ldrb	r3, [r3, #24]
 800142c:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800142e:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001436:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001438:	4313      	orrs	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001446:	f023 0306 	bic.w	r3, r3, #6
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	6812      	ldr	r2, [r2, #0]
 800144e:	69b9      	ldr	r1, [r7, #24]
 8001450:	430b      	orrs	r3, r1
 8001452:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800145a:	2b01      	cmp	r3, #1
 800145c:	d118      	bne.n	8001490 <HAL_ADC_Init+0x228>
=======
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff ff08 	bl	80011de <LL_ADC_REG_IsConversionOngoing>
 80013ce:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff ff15 	bl	8001204 <LL_ADC_INJ_IsConversionOngoing>
 80013da:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d140      	bne.n	8001464 <HAL_ADC_Init+0x238>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d13d      	bne.n	8001464 <HAL_ADC_Init+0x238>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	7e1b      	ldrb	r3, [r3, #24]
 80013f0:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80013f2:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013fa:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800140a:	f023 0306 	bic.w	r3, r3, #6
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	6812      	ldr	r2, [r2, #0]
 8001412:	69b9      	ldr	r1, [r7, #24]
 8001414:	430b      	orrs	r3, r1
 8001416:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800141e:	2b01      	cmp	r3, #1
 8001420:	d118      	bne.n	8001454 <HAL_ADC_Init+0x228>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
<<<<<<< HEAD
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001468:	f023 0304 	bic.w	r3, r3, #4
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001474:	4311      	orrs	r1, r2
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800147a:	4311      	orrs	r1, r2
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001480:	430a      	orrs	r2, r1
 8001482:	431a      	orrs	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f042 0201 	orr.w	r2, r2, #1
 800148c:	611a      	str	r2, [r3, #16]
 800148e:	e007      	b.n	80014a0 <HAL_ADC_Init+0x238>
=======
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	691b      	ldr	r3, [r3, #16]
 8001428:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800142c:	f023 0304 	bic.w	r3, r3, #4
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001438:	4311      	orrs	r1, r2
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800143e:	4311      	orrs	r1, r2
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001444:	430a      	orrs	r2, r1
 8001446:	431a      	orrs	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f042 0201 	orr.w	r2, r2, #1
 8001450:	611a      	str	r2, [r3, #16]
 8001452:	e007      	b.n	8001464 <HAL_ADC_Init+0x238>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
<<<<<<< HEAD
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	691a      	ldr	r2, [r3, #16]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f022 0201 	bic.w	r2, r2, #1
 800149e:	611a      	str	r2, [r3, #16]
=======
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	691a      	ldr	r2, [r3, #16]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f022 0201 	bic.w	r2, r2, #1
 8001462:	611a      	str	r2, [r3, #16]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
<<<<<<< HEAD
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	691b      	ldr	r3, [r3, #16]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d10c      	bne.n	80014c2 <HAL_ADC_Init+0x25a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f023 010f 	bic.w	r1, r3, #15
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	1e5a      	subs	r2, r3, #1
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	430a      	orrs	r2, r1
 80014be:	631a      	str	r2, [r3, #48]	; 0x30
 80014c0:	e007      	b.n	80014d2 <HAL_ADC_Init+0x26a>
=======
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	691b      	ldr	r3, [r3, #16]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d10c      	bne.n	8001486 <HAL_ADC_Init+0x25a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f023 010f 	bic.w	r1, r3, #15
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	69db      	ldr	r3, [r3, #28]
 800147a:	1e5a      	subs	r2, r3, #1
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	430a      	orrs	r2, r1
 8001482:	631a      	str	r2, [r3, #48]	; 0x30
 8001484:	e007      	b.n	8001496 <HAL_ADC_Init+0x26a>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
<<<<<<< HEAD
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f022 020f 	bic.w	r2, r2, #15
 80014d0:	631a      	str	r2, [r3, #48]	; 0x30
=======
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f022 020f 	bic.w	r2, r2, #15
 8001494:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
<<<<<<< HEAD
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d6:	f023 0303 	bic.w	r3, r3, #3
 80014da:	f043 0201 	orr.w	r2, r3, #1
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	659a      	str	r2, [r3, #88]	; 0x58
 80014e2:	e007      	b.n	80014f4 <HAL_ADC_Init+0x28c>
=======
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800149a:	f023 0303 	bic.w	r3, r3, #3
 800149e:	f043 0201 	orr.w	r2, r3, #1
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	659a      	str	r2, [r3, #88]	; 0x58
 80014a6:	e007      	b.n	80014b8 <HAL_ADC_Init+0x28c>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
<<<<<<< HEAD
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e8:	f043 0210 	orr.w	r2, r3, #16
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	77fb      	strb	r3, [r7, #31]
=======
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ac:	f043 0210 	orr.w	r2, r3, #16
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	77fb      	strb	r3, [r7, #31]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }

  /* Return function status */
  return tmp_hal_status;
<<<<<<< HEAD
 80014f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3724      	adds	r7, #36	; 0x24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd90      	pop	{r4, r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000000 	.word	0x20000000
 8001504:	053e2d63 	.word	0x053e2d63
 8001508:	50040000 	.word	0x50040000
 800150c:	50040100 	.word	0x50040100
 8001510:	50040200 	.word	0x50040200
 8001514:	50040300 	.word	0x50040300
 8001518:	fff0c007 	.word	0xfff0c007

0800151c <HAL_ADC_ConfigChannel>:
=======
 80014b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3724      	adds	r7, #36	; 0x24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd90      	pop	{r4, r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000000 	.word	0x20000000
 80014c8:	053e2d63 	.word	0x053e2d63
 80014cc:	50040000 	.word	0x50040000
 80014d0:	50040100 	.word	0x50040100
 80014d4:	50040200 	.word	0x50040200
 80014d8:	50040300 	.word	0x50040300
 80014dc:	fff0c007 	.word	0xfff0c007

080014e0 <HAL_ADC_ConfigChannel>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
<<<<<<< HEAD
 800151c:	b580      	push	{r7, lr}
 800151e:	b0b6      	sub	sp, #216	; 0xd8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001526:	2300      	movs	r3, #0
 8001528:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800152c:	2300      	movs	r3, #0
 800152e:	60fb      	str	r3, [r7, #12]
=======
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b0b6      	sub	sp, #216	; 0xd8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014ea:	2300      	movs	r3, #0
 80014ec:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	60fb      	str	r3, [r7, #12]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001536:	2b01      	cmp	r3, #1
 8001538:	d101      	bne.n	800153e <HAL_ADC_ConfigChannel+0x22>
 800153a:	2302      	movs	r3, #2
 800153c:	e3e1      	b.n	8001d02 <HAL_ADC_ConfigChannel+0x7e6>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2201      	movs	r2, #1
 8001542:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
=======
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d101      	bne.n	8001502 <HAL_ADC_ConfigChannel+0x22>
 80014fe:	2302      	movs	r3, #2
 8001500:	e3e3      	b.n	8001cca <HAL_ADC_ConfigChannel+0x7ea>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2201      	movs	r2, #1
 8001506:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
<<<<<<< HEAD
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff fe65 	bl	800121a <LL_ADC_REG_IsConversionOngoing>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	f040 83c2 	bne.w	8001cdc <HAL_ADC_ConfigChannel+0x7c0>
=======
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff fe65 	bl	80011de <LL_ADC_REG_IsConversionOngoing>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	f040 83c4 	bne.w	8001ca4 <HAL_ADC_ConfigChannel+0x7c4>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
<<<<<<< HEAD
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	2b05      	cmp	r3, #5
 800155e:	d824      	bhi.n	80015aa <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	3b02      	subs	r3, #2
 8001566:	2b03      	cmp	r3, #3
 8001568:	d81b      	bhi.n	80015a2 <HAL_ADC_ConfigChannel+0x86>
 800156a:	a201      	add	r2, pc, #4	; (adr r2, 8001570 <HAL_ADC_ConfigChannel+0x54>)
 800156c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001570:	08001581 	.word	0x08001581
 8001574:	08001589 	.word	0x08001589
 8001578:	08001591 	.word	0x08001591
 800157c:	08001599 	.word	0x08001599
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	220c      	movs	r2, #12
 8001584:	605a      	str	r2, [r3, #4]
          break;
 8001586:	e010      	b.n	80015aa <HAL_ADC_ConfigChannel+0x8e>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	2212      	movs	r2, #18
 800158c:	605a      	str	r2, [r3, #4]
          break;
 800158e:	e00c      	b.n	80015aa <HAL_ADC_ConfigChannel+0x8e>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	2218      	movs	r2, #24
 8001594:	605a      	str	r2, [r3, #4]
          break;
 8001596:	e008      	b.n	80015aa <HAL_ADC_ConfigChannel+0x8e>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800159e:	605a      	str	r2, [r3, #4]
          break;
 80015a0:	e003      	b.n	80015aa <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	2206      	movs	r2, #6
 80015a6:	605a      	str	r2, [r3, #4]
          break;
 80015a8:	bf00      	nop
      }
    }
=======
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	2b05      	cmp	r3, #5
 8001522:	d824      	bhi.n	800156e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	3b02      	subs	r3, #2
 800152a:	2b03      	cmp	r3, #3
 800152c:	d81b      	bhi.n	8001566 <HAL_ADC_ConfigChannel+0x86>
 800152e:	a201      	add	r2, pc, #4	; (adr r2, 8001534 <HAL_ADC_ConfigChannel+0x54>)
 8001530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001534:	08001545 	.word	0x08001545
 8001538:	0800154d 	.word	0x0800154d
 800153c:	08001555 	.word	0x08001555
 8001540:	0800155d 	.word	0x0800155d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	220c      	movs	r2, #12
 8001548:	605a      	str	r2, [r3, #4]
          break;
 800154a:	e011      	b.n	8001570 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	2212      	movs	r2, #18
 8001550:	605a      	str	r2, [r3, #4]
          break;
 8001552:	e00d      	b.n	8001570 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	2218      	movs	r2, #24
 8001558:	605a      	str	r2, [r3, #4]
          break;
 800155a:	e009      	b.n	8001570 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001562:	605a      	str	r2, [r3, #4]
          break;
 8001564:	e004      	b.n	8001570 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	2206      	movs	r2, #6
 800156a:	605a      	str	r2, [r3, #4]
          break;
 800156c:	e000      	b.n	8001570 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800156e:	bf00      	nop
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
<<<<<<< HEAD
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6818      	ldr	r0, [r3, #0]
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	6859      	ldr	r1, [r3, #4]
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	461a      	mov	r2, r3
 80015b8:	f7ff fd52 	bl	8001060 <LL_ADC_REG_SetSequencerRanks>
=======
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6818      	ldr	r0, [r3, #0]
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	6859      	ldr	r1, [r3, #4]
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	461a      	mov	r2, r3
 800157e:	f7ff fd51 	bl	8001024 <LL_ADC_REG_SetSequencerRanks>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
<<<<<<< HEAD
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff fe2a 	bl	800121a <LL_ADC_REG_IsConversionOngoing>
 80015c6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff fe36 	bl	8001240 <LL_ADC_INJ_IsConversionOngoing>
 80015d4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80015d8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f040 81c1 	bne.w	8001964 <HAL_ADC_ConfigChannel+0x448>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80015e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f040 81bc 	bne.w	8001964 <HAL_ADC_ConfigChannel+0x448>
=======
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff fe29 	bl	80011de <LL_ADC_REG_IsConversionOngoing>
 800158c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff fe35 	bl	8001204 <LL_ADC_INJ_IsConversionOngoing>
 800159a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800159e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f040 81c1 	bne.w	800192a <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80015a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f040 81bc 	bne.w	800192a <HAL_ADC_ConfigChannel+0x44a>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
<<<<<<< HEAD
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80015f4:	d10f      	bne.n	8001616 <HAL_ADC_ConfigChannel+0xfa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6818      	ldr	r0, [r3, #0]
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2200      	movs	r2, #0
 8001600:	4619      	mov	r1, r3
 8001602:	f7ff fd59 	bl	80010b8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff fd13 	bl	800103a <LL_ADC_SetSamplingTimeCommonConfig>
 8001614:	e00e      	b.n	8001634 <HAL_ADC_ConfigChannel+0x118>
=======
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80015ba:	d10f      	bne.n	80015dc <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6818      	ldr	r0, [r3, #0]
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2200      	movs	r2, #0
 80015c6:	4619      	mov	r1, r3
 80015c8:	f7ff fd58 	bl	800107c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff fd12 	bl	8000ffe <LL_ADC_SetSamplingTimeCommonConfig>
 80015da:	e00e      	b.n	80015fa <HAL_ADC_ConfigChannel+0x11a>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
<<<<<<< HEAD
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6818      	ldr	r0, [r3, #0]
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	6819      	ldr	r1, [r3, #0]
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	461a      	mov	r2, r3
 8001624:	f7ff fd48 	bl	80010b8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2100      	movs	r1, #0
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff fd03 	bl	800103a <LL_ADC_SetSamplingTimeCommonConfig>
=======
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6818      	ldr	r0, [r3, #0]
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	6819      	ldr	r1, [r3, #0]
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	461a      	mov	r2, r3
 80015ea:	f7ff fd47 	bl	800107c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2100      	movs	r1, #0
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff fd02 	bl	8000ffe <LL_ADC_SetSamplingTimeCommonConfig>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
<<<<<<< HEAD
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	695a      	ldr	r2, [r3, #20]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	08db      	lsrs	r3, r3, #3
 8001640:	f003 0303 	and.w	r3, r3, #3
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	691b      	ldr	r3, [r3, #16]
 8001652:	2b04      	cmp	r3, #4
 8001654:	d00a      	beq.n	800166c <HAL_ADC_ConfigChannel+0x150>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6818      	ldr	r0, [r3, #0]
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	6919      	ldr	r1, [r3, #16]
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001666:	f7ff fc93 	bl	8000f90 <LL_ADC_SetOffset>
 800166a:	e17b      	b.n	8001964 <HAL_ADC_ConfigChannel+0x448>
=======
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	695a      	ldr	r2, [r3, #20]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	08db      	lsrs	r3, r3, #3
 8001606:	f003 0303 	and.w	r3, r3, #3
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	691b      	ldr	r3, [r3, #16]
 8001618:	2b04      	cmp	r3, #4
 800161a:	d00a      	beq.n	8001632 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6818      	ldr	r0, [r3, #0]
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	6919      	ldr	r1, [r3, #16]
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800162c:	f7ff fc92 	bl	8000f54 <LL_ADC_SetOffset>
 8001630:	e17b      	b.n	800192a <HAL_ADC_ConfigChannel+0x44a>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
<<<<<<< HEAD
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2100      	movs	r1, #0
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff fcb0 	bl	8000fd8 <LL_ADC_GetOffsetChannel>
 8001678:	4603      	mov	r3, r0
 800167a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800167e:	2b00      	cmp	r3, #0
 8001680:	d10a      	bne.n	8001698 <HAL_ADC_ConfigChannel+0x17c>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2100      	movs	r1, #0
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff fca5 	bl	8000fd8 <LL_ADC_GetOffsetChannel>
 800168e:	4603      	mov	r3, r0
 8001690:	0e9b      	lsrs	r3, r3, #26
 8001692:	f003 021f 	and.w	r2, r3, #31
 8001696:	e01e      	b.n	80016d6 <HAL_ADC_ConfigChannel+0x1ba>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2100      	movs	r1, #0
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff fc9a 	bl	8000fd8 <LL_ADC_GetOffsetChannel>
 80016a4:	4603      	mov	r3, r0
 80016a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
=======
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2100      	movs	r1, #0
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff fcaf 	bl	8000f9c <LL_ADC_GetOffsetChannel>
 800163e:	4603      	mov	r3, r0
 8001640:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001644:	2b00      	cmp	r3, #0
 8001646:	d10a      	bne.n	800165e <HAL_ADC_ConfigChannel+0x17e>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2100      	movs	r1, #0
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff fca4 	bl	8000f9c <LL_ADC_GetOffsetChannel>
 8001654:	4603      	mov	r3, r0
 8001656:	0e9b      	lsrs	r3, r3, #26
 8001658:	f003 021f 	and.w	r2, r3, #31
 800165c:	e01e      	b.n	800169c <HAL_ADC_ConfigChannel+0x1bc>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2100      	movs	r1, #0
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff fc99 	bl	8000f9c <LL_ADC_GetOffsetChannel>
 800166a:	4603      	mov	r3, r0
 800166c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
<<<<<<< HEAD
 80016aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80016ae:	fa93 f3a3 	rbit	r3, r3
 80016b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
=======
 8001670:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001674:	fa93 f3a3 	rbit	r3, r3
 8001678:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
<<<<<<< HEAD
 80016b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80016ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
=======
 800167c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001680:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
<<<<<<< HEAD
 80016be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d101      	bne.n	80016ca <HAL_ADC_ConfigChannel+0x1ae>
  {
    return 32U;
 80016c6:	2320      	movs	r3, #32
 80016c8:	e004      	b.n	80016d4 <HAL_ADC_ConfigChannel+0x1b8>
  }
  return __builtin_clz(value);
 80016ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80016ce:	fab3 f383 	clz	r3, r3
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d105      	bne.n	80016ee <HAL_ADC_ConfigChannel+0x1d2>
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	0e9b      	lsrs	r3, r3, #26
 80016e8:	f003 031f 	and.w	r3, r3, #31
 80016ec:	e018      	b.n	8001720 <HAL_ADC_ConfigChannel+0x204>
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80016fa:	fa93 f3a3 	rbit	r3, r3
 80016fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001702:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001706:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800170a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800170e:	2b00      	cmp	r3, #0
 8001710:	d101      	bne.n	8001716 <HAL_ADC_ConfigChannel+0x1fa>
    return 32U;
 8001712:	2320      	movs	r3, #32
 8001714:	e004      	b.n	8001720 <HAL_ADC_ConfigChannel+0x204>
  return __builtin_clz(value);
 8001716:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800171a:	fab3 f383 	clz	r3, r3
 800171e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001720:	429a      	cmp	r2, r3
 8001722:	d106      	bne.n	8001732 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2200      	movs	r2, #0
 800172a:	2100      	movs	r1, #0
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff fc69 	bl	8001004 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2101      	movs	r1, #1
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff fc4d 	bl	8000fd8 <LL_ADC_GetOffsetChannel>
 800173e:	4603      	mov	r3, r0
 8001740:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001744:	2b00      	cmp	r3, #0
 8001746:	d10a      	bne.n	800175e <HAL_ADC_ConfigChannel+0x242>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2101      	movs	r1, #1
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff fc42 	bl	8000fd8 <LL_ADC_GetOffsetChannel>
 8001754:	4603      	mov	r3, r0
 8001756:	0e9b      	lsrs	r3, r3, #26
 8001758:	f003 021f 	and.w	r2, r3, #31
 800175c:	e01e      	b.n	800179c <HAL_ADC_ConfigChannel+0x280>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2101      	movs	r1, #1
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff fc37 	bl	8000fd8 <LL_ADC_GetOffsetChannel>
 800176a:	4603      	mov	r3, r0
 800176c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001770:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001774:	fa93 f3a3 	rbit	r3, r3
 8001778:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800177c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001780:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001784:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001788:	2b00      	cmp	r3, #0
 800178a:	d101      	bne.n	8001790 <HAL_ADC_ConfigChannel+0x274>
    return 32U;
 800178c:	2320      	movs	r3, #32
 800178e:	e004      	b.n	800179a <HAL_ADC_ConfigChannel+0x27e>
  return __builtin_clz(value);
 8001790:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001794:	fab3 f383 	clz	r3, r3
 8001798:	b2db      	uxtb	r3, r3
 800179a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d105      	bne.n	80017b4 <HAL_ADC_ConfigChannel+0x298>
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	0e9b      	lsrs	r3, r3, #26
 80017ae:	f003 031f 	and.w	r3, r3, #31
 80017b2:	e018      	b.n	80017e6 <HAL_ADC_ConfigChannel+0x2ca>
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80017c0:	fa93 f3a3 	rbit	r3, r3
 80017c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80017c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80017cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80017d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d101      	bne.n	80017dc <HAL_ADC_ConfigChannel+0x2c0>
    return 32U;
 80017d8:	2320      	movs	r3, #32
 80017da:	e004      	b.n	80017e6 <HAL_ADC_ConfigChannel+0x2ca>
  return __builtin_clz(value);
 80017dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80017e0:	fab3 f383 	clz	r3, r3
 80017e4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d106      	bne.n	80017f8 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2200      	movs	r2, #0
 80017f0:	2101      	movs	r1, #1
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff fc06 	bl	8001004 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2102      	movs	r1, #2
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff fbea 	bl	8000fd8 <LL_ADC_GetOffsetChannel>
 8001804:	4603      	mov	r3, r0
 8001806:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800180a:	2b00      	cmp	r3, #0
 800180c:	d10a      	bne.n	8001824 <HAL_ADC_ConfigChannel+0x308>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2102      	movs	r1, #2
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff fbdf 	bl	8000fd8 <LL_ADC_GetOffsetChannel>
 800181a:	4603      	mov	r3, r0
 800181c:	0e9b      	lsrs	r3, r3, #26
 800181e:	f003 021f 	and.w	r2, r3, #31
 8001822:	e01e      	b.n	8001862 <HAL_ADC_ConfigChannel+0x346>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2102      	movs	r1, #2
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff fbd4 	bl	8000fd8 <LL_ADC_GetOffsetChannel>
 8001830:	4603      	mov	r3, r0
 8001832:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001836:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800183a:	fa93 f3a3 	rbit	r3, r3
 800183e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001842:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001846:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800184a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800184e:	2b00      	cmp	r3, #0
 8001850:	d101      	bne.n	8001856 <HAL_ADC_ConfigChannel+0x33a>
    return 32U;
 8001852:	2320      	movs	r3, #32
 8001854:	e004      	b.n	8001860 <HAL_ADC_ConfigChannel+0x344>
  return __builtin_clz(value);
 8001856:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800185a:	fab3 f383 	clz	r3, r3
 800185e:	b2db      	uxtb	r3, r3
 8001860:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800186a:	2b00      	cmp	r3, #0
 800186c:	d105      	bne.n	800187a <HAL_ADC_ConfigChannel+0x35e>
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	0e9b      	lsrs	r3, r3, #26
 8001874:	f003 031f 	and.w	r3, r3, #31
 8001878:	e016      	b.n	80018a8 <HAL_ADC_ConfigChannel+0x38c>
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001882:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001886:	fa93 f3a3 	rbit	r3, r3
 800188a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800188c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800188e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001892:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001896:	2b00      	cmp	r3, #0
 8001898:	d101      	bne.n	800189e <HAL_ADC_ConfigChannel+0x382>
    return 32U;
 800189a:	2320      	movs	r3, #32
 800189c:	e004      	b.n	80018a8 <HAL_ADC_ConfigChannel+0x38c>
  return __builtin_clz(value);
 800189e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80018a2:	fab3 f383 	clz	r3, r3
 80018a6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d106      	bne.n	80018ba <HAL_ADC_ConfigChannel+0x39e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2200      	movs	r2, #0
 80018b2:	2102      	movs	r1, #2
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff fba5 	bl	8001004 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2103      	movs	r1, #3
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff fb89 	bl	8000fd8 <LL_ADC_GetOffsetChannel>
 80018c6:	4603      	mov	r3, r0
 80018c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d10a      	bne.n	80018e6 <HAL_ADC_ConfigChannel+0x3ca>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2103      	movs	r1, #3
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff fb7e 	bl	8000fd8 <LL_ADC_GetOffsetChannel>
 80018dc:	4603      	mov	r3, r0
 80018de:	0e9b      	lsrs	r3, r3, #26
 80018e0:	f003 021f 	and.w	r2, r3, #31
 80018e4:	e017      	b.n	8001916 <HAL_ADC_ConfigChannel+0x3fa>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2103      	movs	r1, #3
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff fb73 	bl	8000fd8 <LL_ADC_GetOffsetChannel>
 80018f2:	4603      	mov	r3, r0
 80018f4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018f8:	fa93 f3a3 	rbit	r3, r3
 80018fc:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80018fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001900:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001902:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001904:	2b00      	cmp	r3, #0
 8001906:	d101      	bne.n	800190c <HAL_ADC_ConfigChannel+0x3f0>
    return 32U;
 8001908:	2320      	movs	r3, #32
 800190a:	e003      	b.n	8001914 <HAL_ADC_ConfigChannel+0x3f8>
  return __builtin_clz(value);
 800190c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800190e:	fab3 f383 	clz	r3, r3
 8001912:	b2db      	uxtb	r3, r3
 8001914:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800191e:	2b00      	cmp	r3, #0
 8001920:	d105      	bne.n	800192e <HAL_ADC_ConfigChannel+0x412>
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	0e9b      	lsrs	r3, r3, #26
 8001928:	f003 031f 	and.w	r3, r3, #31
 800192c:	e011      	b.n	8001952 <HAL_ADC_ConfigChannel+0x436>
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001934:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001936:	fa93 f3a3 	rbit	r3, r3
 800193a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800193c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800193e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001940:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <HAL_ADC_ConfigChannel+0x42e>
    return 32U;
 8001946:	2320      	movs	r3, #32
 8001948:	e003      	b.n	8001952 <HAL_ADC_ConfigChannel+0x436>
  return __builtin_clz(value);
 800194a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800194c:	fab3 f383 	clz	r3, r3
 8001950:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001952:	429a      	cmp	r2, r3
 8001954:	d106      	bne.n	8001964 <HAL_ADC_ConfigChannel+0x448>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2200      	movs	r2, #0
 800195c:	2103      	movs	r1, #3
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff fb50 	bl	8001004 <LL_ADC_SetOffsetState>
=======
 8001684:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d101      	bne.n	8001690 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 800168c:	2320      	movs	r3, #32
 800168e:	e004      	b.n	800169a <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8001690:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001694:	fab3 f383 	clz	r3, r3
 8001698:	b2db      	uxtb	r3, r3
 800169a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d105      	bne.n	80016b4 <HAL_ADC_ConfigChannel+0x1d4>
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	0e9b      	lsrs	r3, r3, #26
 80016ae:	f003 031f 	and.w	r3, r3, #31
 80016b2:	e018      	b.n	80016e6 <HAL_ADC_ConfigChannel+0x206>
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80016c0:	fa93 f3a3 	rbit	r3, r3
 80016c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80016c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80016cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80016d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d101      	bne.n	80016dc <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80016d8:	2320      	movs	r3, #32
 80016da:	e004      	b.n	80016e6 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80016dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80016e0:	fab3 f383 	clz	r3, r3
 80016e4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d106      	bne.n	80016f8 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2200      	movs	r2, #0
 80016f0:	2100      	movs	r1, #0
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff fc68 	bl	8000fc8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2101      	movs	r1, #1
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff fc4c 	bl	8000f9c <LL_ADC_GetOffsetChannel>
 8001704:	4603      	mov	r3, r0
 8001706:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800170a:	2b00      	cmp	r3, #0
 800170c:	d10a      	bne.n	8001724 <HAL_ADC_ConfigChannel+0x244>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2101      	movs	r1, #1
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff fc41 	bl	8000f9c <LL_ADC_GetOffsetChannel>
 800171a:	4603      	mov	r3, r0
 800171c:	0e9b      	lsrs	r3, r3, #26
 800171e:	f003 021f 	and.w	r2, r3, #31
 8001722:	e01e      	b.n	8001762 <HAL_ADC_ConfigChannel+0x282>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2101      	movs	r1, #1
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff fc36 	bl	8000f9c <LL_ADC_GetOffsetChannel>
 8001730:	4603      	mov	r3, r0
 8001732:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001736:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800173a:	fa93 f3a3 	rbit	r3, r3
 800173e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001742:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001746:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800174a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8001752:	2320      	movs	r3, #32
 8001754:	e004      	b.n	8001760 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8001756:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800175a:	fab3 f383 	clz	r3, r3
 800175e:	b2db      	uxtb	r3, r3
 8001760:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800176a:	2b00      	cmp	r3, #0
 800176c:	d105      	bne.n	800177a <HAL_ADC_ConfigChannel+0x29a>
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	0e9b      	lsrs	r3, r3, #26
 8001774:	f003 031f 	and.w	r3, r3, #31
 8001778:	e018      	b.n	80017ac <HAL_ADC_ConfigChannel+0x2cc>
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001782:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001786:	fa93 f3a3 	rbit	r3, r3
 800178a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800178e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001792:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001796:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800179a:	2b00      	cmp	r3, #0
 800179c:	d101      	bne.n	80017a2 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800179e:	2320      	movs	r3, #32
 80017a0:	e004      	b.n	80017ac <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80017a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80017a6:	fab3 f383 	clz	r3, r3
 80017aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d106      	bne.n	80017be <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2200      	movs	r2, #0
 80017b6:	2101      	movs	r1, #1
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff fc05 	bl	8000fc8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2102      	movs	r1, #2
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff fbe9 	bl	8000f9c <LL_ADC_GetOffsetChannel>
 80017ca:	4603      	mov	r3, r0
 80017cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d10a      	bne.n	80017ea <HAL_ADC_ConfigChannel+0x30a>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2102      	movs	r1, #2
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff fbde 	bl	8000f9c <LL_ADC_GetOffsetChannel>
 80017e0:	4603      	mov	r3, r0
 80017e2:	0e9b      	lsrs	r3, r3, #26
 80017e4:	f003 021f 	and.w	r2, r3, #31
 80017e8:	e01e      	b.n	8001828 <HAL_ADC_ConfigChannel+0x348>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2102      	movs	r1, #2
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff fbd3 	bl	8000f9c <LL_ADC_GetOffsetChannel>
 80017f6:	4603      	mov	r3, r0
 80017f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001800:	fa93 f3a3 	rbit	r3, r3
 8001804:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001808:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800180c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001810:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001814:	2b00      	cmp	r3, #0
 8001816:	d101      	bne.n	800181c <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001818:	2320      	movs	r3, #32
 800181a:	e004      	b.n	8001826 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 800181c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001820:	fab3 f383 	clz	r3, r3
 8001824:	b2db      	uxtb	r3, r3
 8001826:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001830:	2b00      	cmp	r3, #0
 8001832:	d105      	bne.n	8001840 <HAL_ADC_ConfigChannel+0x360>
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	0e9b      	lsrs	r3, r3, #26
 800183a:	f003 031f 	and.w	r3, r3, #31
 800183e:	e016      	b.n	800186e <HAL_ADC_ConfigChannel+0x38e>
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001848:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800184c:	fa93 f3a3 	rbit	r3, r3
 8001850:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001852:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001854:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001858:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800185c:	2b00      	cmp	r3, #0
 800185e:	d101      	bne.n	8001864 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8001860:	2320      	movs	r3, #32
 8001862:	e004      	b.n	800186e <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8001864:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001868:	fab3 f383 	clz	r3, r3
 800186c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800186e:	429a      	cmp	r2, r3
 8001870:	d106      	bne.n	8001880 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2200      	movs	r2, #0
 8001878:	2102      	movs	r1, #2
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff fba4 	bl	8000fc8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2103      	movs	r1, #3
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff fb88 	bl	8000f9c <LL_ADC_GetOffsetChannel>
 800188c:	4603      	mov	r3, r0
 800188e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001892:	2b00      	cmp	r3, #0
 8001894:	d10a      	bne.n	80018ac <HAL_ADC_ConfigChannel+0x3cc>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2103      	movs	r1, #3
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff fb7d 	bl	8000f9c <LL_ADC_GetOffsetChannel>
 80018a2:	4603      	mov	r3, r0
 80018a4:	0e9b      	lsrs	r3, r3, #26
 80018a6:	f003 021f 	and.w	r2, r3, #31
 80018aa:	e017      	b.n	80018dc <HAL_ADC_ConfigChannel+0x3fc>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2103      	movs	r1, #3
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff fb72 	bl	8000f9c <LL_ADC_GetOffsetChannel>
 80018b8:	4603      	mov	r3, r0
 80018ba:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018be:	fa93 f3a3 	rbit	r3, r3
 80018c2:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80018c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018c6:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80018c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d101      	bne.n	80018d2 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80018ce:	2320      	movs	r3, #32
 80018d0:	e003      	b.n	80018da <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80018d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80018d4:	fab3 f383 	clz	r3, r3
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d105      	bne.n	80018f4 <HAL_ADC_ConfigChannel+0x414>
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	0e9b      	lsrs	r3, r3, #26
 80018ee:	f003 031f 	and.w	r3, r3, #31
 80018f2:	e011      	b.n	8001918 <HAL_ADC_ConfigChannel+0x438>
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80018fc:	fa93 f3a3 	rbit	r3, r3
 8001900:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001902:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001904:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001908:	2b00      	cmp	r3, #0
 800190a:	d101      	bne.n	8001910 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 800190c:	2320      	movs	r3, #32
 800190e:	e003      	b.n	8001918 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8001910:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001912:	fab3 f383 	clz	r3, r3
 8001916:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001918:	429a      	cmp	r2, r3
 800191a:	d106      	bne.n	800192a <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2200      	movs	r2, #0
 8001922:	2103      	movs	r1, #3
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff fb4f 	bl	8000fc8 <LL_ADC_SetOffsetState>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
<<<<<<< HEAD
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff fc43 	bl	80011f4 <LL_ADC_IsEnabled>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	f040 813f 	bne.w	8001bf4 <HAL_ADC_ConfigChannel+0x6d8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6818      	ldr	r0, [r3, #0]
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	6819      	ldr	r1, [r3, #0]
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	461a      	mov	r2, r3
 8001984:	f7ff fbc4 	bl	8001110 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	4a8e      	ldr	r2, [pc, #568]	; (8001bc8 <HAL_ADC_ConfigChannel+0x6ac>)
 800198e:	4293      	cmp	r3, r2
 8001990:	f040 8130 	bne.w	8001bf4 <HAL_ADC_ConfigChannel+0x6d8>
=======
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff fc42 	bl	80011b8 <LL_ADC_IsEnabled>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	f040 8140 	bne.w	8001bbc <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6818      	ldr	r0, [r3, #0]
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	6819      	ldr	r1, [r3, #0]
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	461a      	mov	r2, r3
 800194a:	f7ff fbc3 	bl	80010d4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	4a8f      	ldr	r2, [pc, #572]	; (8001b90 <HAL_ADC_ConfigChannel+0x6b0>)
 8001954:	4293      	cmp	r3, r2
 8001956:	f040 8131 	bne.w	8001bbc <HAL_ADC_ConfigChannel+0x6dc>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
<<<<<<< HEAD
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d10b      	bne.n	80019bc <HAL_ADC_ConfigChannel+0x4a0>
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	0e9b      	lsrs	r3, r3, #26
 80019aa:	3301      	adds	r3, #1
 80019ac:	f003 031f 	and.w	r3, r3, #31
 80019b0:	2b09      	cmp	r3, #9
 80019b2:	bf94      	ite	ls
 80019b4:	2301      	movls	r3, #1
 80019b6:	2300      	movhi	r3, #0
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	e019      	b.n	80019f0 <HAL_ADC_ConfigChannel+0x4d4>
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019c4:	fa93 f3a3 	rbit	r3, r3
 80019c8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80019ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019cc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80019ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d101      	bne.n	80019d8 <HAL_ADC_ConfigChannel+0x4bc>
    return 32U;
 80019d4:	2320      	movs	r3, #32
 80019d6:	e003      	b.n	80019e0 <HAL_ADC_ConfigChannel+0x4c4>
  return __builtin_clz(value);
 80019d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019da:	fab3 f383 	clz	r3, r3
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	3301      	adds	r3, #1
 80019e2:	f003 031f 	and.w	r3, r3, #31
 80019e6:	2b09      	cmp	r3, #9
 80019e8:	bf94      	ite	ls
 80019ea:	2301      	movls	r3, #1
 80019ec:	2300      	movhi	r3, #0
 80019ee:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d079      	beq.n	8001ae8 <HAL_ADC_ConfigChannel+0x5cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d107      	bne.n	8001a10 <HAL_ADC_ConfigChannel+0x4f4>
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	0e9b      	lsrs	r3, r3, #26
 8001a06:	3301      	adds	r3, #1
 8001a08:	069b      	lsls	r3, r3, #26
 8001a0a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a0e:	e015      	b.n	8001a3c <HAL_ADC_ConfigChannel+0x520>
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a18:	fa93 f3a3 	rbit	r3, r3
 8001a1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001a1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a20:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001a22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d101      	bne.n	8001a2c <HAL_ADC_ConfigChannel+0x510>
    return 32U;
 8001a28:	2320      	movs	r3, #32
 8001a2a:	e003      	b.n	8001a34 <HAL_ADC_ConfigChannel+0x518>
  return __builtin_clz(value);
 8001a2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a2e:	fab3 f383 	clz	r3, r3
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	3301      	adds	r3, #1
 8001a36:	069b      	lsls	r3, r3, #26
 8001a38:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d109      	bne.n	8001a5c <HAL_ADC_ConfigChannel+0x540>
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	0e9b      	lsrs	r3, r3, #26
 8001a4e:	3301      	adds	r3, #1
 8001a50:	f003 031f 	and.w	r3, r3, #31
 8001a54:	2101      	movs	r1, #1
 8001a56:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5a:	e017      	b.n	8001a8c <HAL_ADC_ConfigChannel+0x570>
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a64:	fa93 f3a3 	rbit	r3, r3
 8001a68:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001a6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a6c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001a6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <HAL_ADC_ConfigChannel+0x55c>
    return 32U;
 8001a74:	2320      	movs	r3, #32
 8001a76:	e003      	b.n	8001a80 <HAL_ADC_ConfigChannel+0x564>
  return __builtin_clz(value);
 8001a78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a7a:	fab3 f383 	clz	r3, r3
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	3301      	adds	r3, #1
 8001a82:	f003 031f 	and.w	r3, r3, #31
 8001a86:	2101      	movs	r1, #1
 8001a88:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8c:	ea42 0103 	orr.w	r1, r2, r3
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d10a      	bne.n	8001ab2 <HAL_ADC_ConfigChannel+0x596>
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	0e9b      	lsrs	r3, r3, #26
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	f003 021f 	and.w	r2, r3, #31
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	4413      	add	r3, r2
 8001aae:	051b      	lsls	r3, r3, #20
 8001ab0:	e018      	b.n	8001ae4 <HAL_ADC_ConfigChannel+0x5c8>
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aba:	fa93 f3a3 	rbit	r3, r3
 8001abe:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001ac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 8001aca:	2320      	movs	r3, #32
 8001acc:	e003      	b.n	8001ad6 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 8001ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ad0:	fab3 f383 	clz	r3, r3
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	f003 021f 	and.w	r2, r3, #31
 8001adc:	4613      	mov	r3, r2
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	4413      	add	r3, r2
 8001ae2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ae4:	430b      	orrs	r3, r1
 8001ae6:	e080      	b.n	8001bea <HAL_ADC_ConfigChannel+0x6ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d107      	bne.n	8001b04 <HAL_ADC_ConfigChannel+0x5e8>
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	0e9b      	lsrs	r3, r3, #26
 8001afa:	3301      	adds	r3, #1
 8001afc:	069b      	lsls	r3, r3, #26
 8001afe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b02:	e015      	b.n	8001b30 <HAL_ADC_ConfigChannel+0x614>
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b0c:	fa93 f3a3 	rbit	r3, r3
 8001b10:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b14:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d101      	bne.n	8001b20 <HAL_ADC_ConfigChannel+0x604>
    return 32U;
 8001b1c:	2320      	movs	r3, #32
 8001b1e:	e003      	b.n	8001b28 <HAL_ADC_ConfigChannel+0x60c>
  return __builtin_clz(value);
 8001b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b22:	fab3 f383 	clz	r3, r3
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	3301      	adds	r3, #1
 8001b2a:	069b      	lsls	r3, r3, #26
 8001b2c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d109      	bne.n	8001b50 <HAL_ADC_ConfigChannel+0x634>
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	0e9b      	lsrs	r3, r3, #26
 8001b42:	3301      	adds	r3, #1
 8001b44:	f003 031f 	and.w	r3, r3, #31
 8001b48:	2101      	movs	r1, #1
 8001b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4e:	e017      	b.n	8001b80 <HAL_ADC_ConfigChannel+0x664>
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b56:	6a3b      	ldr	r3, [r7, #32]
 8001b58:	fa93 f3a3 	rbit	r3, r3
 8001b5c:	61fb      	str	r3, [r7, #28]
  return result;
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d101      	bne.n	8001b6c <HAL_ADC_ConfigChannel+0x650>
    return 32U;
 8001b68:	2320      	movs	r3, #32
 8001b6a:	e003      	b.n	8001b74 <HAL_ADC_ConfigChannel+0x658>
  return __builtin_clz(value);
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6e:	fab3 f383 	clz	r3, r3
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	3301      	adds	r3, #1
 8001b76:	f003 031f 	and.w	r3, r3, #31
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b80:	ea42 0103 	orr.w	r1, r2, r3
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d10d      	bne.n	8001bac <HAL_ADC_ConfigChannel+0x690>
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	0e9b      	lsrs	r3, r3, #26
 8001b96:	3301      	adds	r3, #1
 8001b98:	f003 021f 	and.w	r2, r3, #31
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	4413      	add	r3, r2
 8001ba2:	3b1e      	subs	r3, #30
 8001ba4:	051b      	lsls	r3, r3, #20
 8001ba6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001baa:	e01d      	b.n	8001be8 <HAL_ADC_ConfigChannel+0x6cc>
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	fa93 f3a3 	rbit	r3, r3
 8001bb8:	613b      	str	r3, [r7, #16]
  return result;
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d103      	bne.n	8001bcc <HAL_ADC_ConfigChannel+0x6b0>
    return 32U;
 8001bc4:	2320      	movs	r3, #32
 8001bc6:	e005      	b.n	8001bd4 <HAL_ADC_ConfigChannel+0x6b8>
 8001bc8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	fab3 f383 	clz	r3, r3
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	f003 021f 	and.w	r2, r3, #31
 8001bda:	4613      	mov	r3, r2
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	4413      	add	r3, r2
 8001be0:	3b1e      	subs	r3, #30
 8001be2:	051b      	lsls	r3, r3, #20
 8001be4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001be8:	430b      	orrs	r3, r1
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	6892      	ldr	r2, [r2, #8]
 8001bee:	4619      	mov	r1, r3
 8001bf0:	f7ff fa62 	bl	80010b8 <LL_ADC_SetChannelSamplingTime>
=======
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001966:	2b00      	cmp	r3, #0
 8001968:	d10b      	bne.n	8001982 <HAL_ADC_ConfigChannel+0x4a2>
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	0e9b      	lsrs	r3, r3, #26
 8001970:	3301      	adds	r3, #1
 8001972:	f003 031f 	and.w	r3, r3, #31
 8001976:	2b09      	cmp	r3, #9
 8001978:	bf94      	ite	ls
 800197a:	2301      	movls	r3, #1
 800197c:	2300      	movhi	r3, #0
 800197e:	b2db      	uxtb	r3, r3
 8001980:	e019      	b.n	80019b6 <HAL_ADC_ConfigChannel+0x4d6>
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001988:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800198a:	fa93 f3a3 	rbit	r3, r3
 800198e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001990:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001992:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001994:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800199a:	2320      	movs	r3, #32
 800199c:	e003      	b.n	80019a6 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800199e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019a0:	fab3 f383 	clz	r3, r3
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	3301      	adds	r3, #1
 80019a8:	f003 031f 	and.w	r3, r3, #31
 80019ac:	2b09      	cmp	r3, #9
 80019ae:	bf94      	ite	ls
 80019b0:	2301      	movls	r3, #1
 80019b2:	2300      	movhi	r3, #0
 80019b4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d079      	beq.n	8001aae <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d107      	bne.n	80019d6 <HAL_ADC_ConfigChannel+0x4f6>
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	0e9b      	lsrs	r3, r3, #26
 80019cc:	3301      	adds	r3, #1
 80019ce:	069b      	lsls	r3, r3, #26
 80019d0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019d4:	e015      	b.n	8001a02 <HAL_ADC_ConfigChannel+0x522>
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019de:	fa93 f3a3 	rbit	r3, r3
 80019e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80019e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019e6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80019e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80019ee:	2320      	movs	r3, #32
 80019f0:	e003      	b.n	80019fa <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80019f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019f4:	fab3 f383 	clz	r3, r3
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	3301      	adds	r3, #1
 80019fc:	069b      	lsls	r3, r3, #26
 80019fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d109      	bne.n	8001a22 <HAL_ADC_ConfigChannel+0x542>
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	0e9b      	lsrs	r3, r3, #26
 8001a14:	3301      	adds	r3, #1
 8001a16:	f003 031f 	and.w	r3, r3, #31
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a20:	e017      	b.n	8001a52 <HAL_ADC_ConfigChannel+0x572>
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a2a:	fa93 f3a3 	rbit	r3, r3
 8001a2e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001a30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a32:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001a34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8001a3a:	2320      	movs	r3, #32
 8001a3c:	e003      	b.n	8001a46 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8001a3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a40:	fab3 f383 	clz	r3, r3
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	3301      	adds	r3, #1
 8001a48:	f003 031f 	and.w	r3, r3, #31
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a52:	ea42 0103 	orr.w	r1, r2, r3
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d10a      	bne.n	8001a78 <HAL_ADC_ConfigChannel+0x598>
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	0e9b      	lsrs	r3, r3, #26
 8001a68:	3301      	adds	r3, #1
 8001a6a:	f003 021f 	and.w	r2, r3, #31
 8001a6e:	4613      	mov	r3, r2
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	4413      	add	r3, r2
 8001a74:	051b      	lsls	r3, r3, #20
 8001a76:	e018      	b.n	8001aaa <HAL_ADC_ConfigChannel+0x5ca>
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a80:	fa93 f3a3 	rbit	r3, r3
 8001a84:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a88:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001a8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d101      	bne.n	8001a94 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8001a90:	2320      	movs	r3, #32
 8001a92:	e003      	b.n	8001a9c <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8001a94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a96:	fab3 f383 	clz	r3, r3
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	f003 021f 	and.w	r2, r3, #31
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	4413      	add	r3, r2
 8001aa8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001aaa:	430b      	orrs	r3, r1
 8001aac:	e081      	b.n	8001bb2 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d107      	bne.n	8001aca <HAL_ADC_ConfigChannel+0x5ea>
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	0e9b      	lsrs	r3, r3, #26
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	069b      	lsls	r3, r3, #26
 8001ac4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ac8:	e015      	b.n	8001af6 <HAL_ADC_ConfigChannel+0x616>
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ad2:	fa93 f3a3 	rbit	r3, r3
 8001ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ada:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8001ae2:	2320      	movs	r3, #32
 8001ae4:	e003      	b.n	8001aee <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8001ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ae8:	fab3 f383 	clz	r3, r3
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	3301      	adds	r3, #1
 8001af0:	069b      	lsls	r3, r3, #26
 8001af2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d109      	bne.n	8001b16 <HAL_ADC_ConfigChannel+0x636>
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	0e9b      	lsrs	r3, r3, #26
 8001b08:	3301      	adds	r3, #1
 8001b0a:	f003 031f 	and.w	r3, r3, #31
 8001b0e:	2101      	movs	r1, #1
 8001b10:	fa01 f303 	lsl.w	r3, r1, r3
 8001b14:	e017      	b.n	8001b46 <HAL_ADC_ConfigChannel+0x666>
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1c:	6a3b      	ldr	r3, [r7, #32]
 8001b1e:	fa93 f3a3 	rbit	r3, r3
 8001b22:	61fb      	str	r3, [r7, #28]
  return result;
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8001b2e:	2320      	movs	r3, #32
 8001b30:	e003      	b.n	8001b3a <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	fab3 f383 	clz	r3, r3
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	f003 031f 	and.w	r3, r3, #31
 8001b40:	2101      	movs	r1, #1
 8001b42:	fa01 f303 	lsl.w	r3, r1, r3
 8001b46:	ea42 0103 	orr.w	r1, r2, r3
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10d      	bne.n	8001b72 <HAL_ADC_ConfigChannel+0x692>
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	0e9b      	lsrs	r3, r3, #26
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	f003 021f 	and.w	r2, r3, #31
 8001b62:	4613      	mov	r3, r2
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	4413      	add	r3, r2
 8001b68:	3b1e      	subs	r3, #30
 8001b6a:	051b      	lsls	r3, r3, #20
 8001b6c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b70:	e01e      	b.n	8001bb0 <HAL_ADC_ConfigChannel+0x6d0>
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	fa93 f3a3 	rbit	r3, r3
 8001b7e:	613b      	str	r3, [r7, #16]
  return result;
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d104      	bne.n	8001b94 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001b8a:	2320      	movs	r3, #32
 8001b8c:	e006      	b.n	8001b9c <HAL_ADC_ConfigChannel+0x6bc>
 8001b8e:	bf00      	nop
 8001b90:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	fab3 f383 	clz	r3, r3
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	f003 021f 	and.w	r2, r3, #31
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	4413      	add	r3, r2
 8001ba8:	3b1e      	subs	r3, #30
 8001baa:	051b      	lsls	r3, r3, #20
 8001bac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bb0:	430b      	orrs	r3, r1
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	6892      	ldr	r2, [r2, #8]
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	f7ff fa60 	bl	800107c <LL_ADC_SetChannelSamplingTime>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
<<<<<<< HEAD
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	4b44      	ldr	r3, [pc, #272]	; (8001d0c <HAL_ADC_ConfigChannel+0x7f0>)
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d07a      	beq.n	8001cf6 <HAL_ADC_ConfigChannel+0x7da>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c00:	4843      	ldr	r0, [pc, #268]	; (8001d10 <HAL_ADC_ConfigChannel+0x7f4>)
 8001c02:	f7ff f9b7 	bl	8000f74 <LL_ADC_GetCommonPathInternalCh>
 8001c06:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
=======
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	4b44      	ldr	r3, [pc, #272]	; (8001cd4 <HAL_ADC_ConfigChannel+0x7f4>)
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d07a      	beq.n	8001cbe <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001bc8:	4843      	ldr	r0, [pc, #268]	; (8001cd8 <HAL_ADC_ConfigChannel+0x7f8>)
 8001bca:	f7ff f9b5 	bl	8000f38 <LL_ADC_GetCommonPathInternalCh>
 8001bce:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
<<<<<<< HEAD
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a41      	ldr	r2, [pc, #260]	; (8001d14 <HAL_ADC_ConfigChannel+0x7f8>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d12c      	bne.n	8001c6e <HAL_ADC_ConfigChannel+0x752>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d126      	bne.n	8001c6e <HAL_ADC_ConfigChannel+0x752>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a3c      	ldr	r2, [pc, #240]	; (8001d18 <HAL_ADC_ConfigChannel+0x7fc>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d004      	beq.n	8001c34 <HAL_ADC_ConfigChannel+0x718>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a3b      	ldr	r2, [pc, #236]	; (8001d1c <HAL_ADC_ConfigChannel+0x800>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d15d      	bne.n	8001cf0 <HAL_ADC_ConfigChannel+0x7d4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c38:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4834      	ldr	r0, [pc, #208]	; (8001d10 <HAL_ADC_ConfigChannel+0x7f4>)
 8001c40:	f7ff f985 	bl	8000f4e <LL_ADC_SetCommonPathInternalCh>
=======
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a41      	ldr	r2, [pc, #260]	; (8001cdc <HAL_ADC_ConfigChannel+0x7fc>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d12c      	bne.n	8001c36 <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001bdc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001be0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d126      	bne.n	8001c36 <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a3c      	ldr	r2, [pc, #240]	; (8001ce0 <HAL_ADC_ConfigChannel+0x800>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d004      	beq.n	8001bfc <HAL_ADC_ConfigChannel+0x71c>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a3b      	ldr	r2, [pc, #236]	; (8001ce4 <HAL_ADC_ConfigChannel+0x804>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d15d      	bne.n	8001cb8 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bfc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c00:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c04:	4619      	mov	r1, r3
 8001c06:	4834      	ldr	r0, [pc, #208]	; (8001cd8 <HAL_ADC_ConfigChannel+0x7f8>)
 8001c08:	f7ff f983 	bl	8000f12 <LL_ADC_SetCommonPathInternalCh>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
<<<<<<< HEAD
 8001c44:	4b36      	ldr	r3, [pc, #216]	; (8001d20 <HAL_ADC_ConfigChannel+0x804>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	099b      	lsrs	r3, r3, #6
 8001c4a:	4a36      	ldr	r2, [pc, #216]	; (8001d24 <HAL_ADC_ConfigChannel+0x808>)
 8001c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c50:	099b      	lsrs	r3, r3, #6
 8001c52:	1c5a      	adds	r2, r3, #1
 8001c54:	4613      	mov	r3, r2
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	4413      	add	r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c5e:	e002      	b.n	8001c66 <HAL_ADC_ConfigChannel+0x74a>
          {
            wait_loop_index--;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	3b01      	subs	r3, #1
 8001c64:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d1f9      	bne.n	8001c60 <HAL_ADC_ConfigChannel+0x744>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c6c:	e040      	b.n	8001cf0 <HAL_ADC_ConfigChannel+0x7d4>
=======
 8001c0c:	4b36      	ldr	r3, [pc, #216]	; (8001ce8 <HAL_ADC_ConfigChannel+0x808>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	099b      	lsrs	r3, r3, #6
 8001c12:	4a36      	ldr	r2, [pc, #216]	; (8001cec <HAL_ADC_ConfigChannel+0x80c>)
 8001c14:	fba2 2303 	umull	r2, r3, r2, r3
 8001c18:	099b      	lsrs	r3, r3, #6
 8001c1a:	1c5a      	adds	r2, r3, #1
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	4413      	add	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c26:	e002      	b.n	8001c2e <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d1f9      	bne.n	8001c28 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c34:	e040      	b.n	8001cb8 <HAL_ADC_ConfigChannel+0x7d8>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
<<<<<<< HEAD
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a2d      	ldr	r2, [pc, #180]	; (8001d28 <HAL_ADC_ConfigChannel+0x80c>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d118      	bne.n	8001caa <HAL_ADC_ConfigChannel+0x78e>
 8001c78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d112      	bne.n	8001caa <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a23      	ldr	r2, [pc, #140]	; (8001d18 <HAL_ADC_ConfigChannel+0x7fc>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d004      	beq.n	8001c98 <HAL_ADC_ConfigChannel+0x77c>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a22      	ldr	r2, [pc, #136]	; (8001d1c <HAL_ADC_ConfigChannel+0x800>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d12d      	bne.n	8001cf4 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	481b      	ldr	r0, [pc, #108]	; (8001d10 <HAL_ADC_ConfigChannel+0x7f4>)
 8001ca4:	f7ff f953 	bl	8000f4e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ca8:	e024      	b.n	8001cf4 <HAL_ADC_ConfigChannel+0x7d8>
=======
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a2d      	ldr	r2, [pc, #180]	; (8001cf0 <HAL_ADC_ConfigChannel+0x810>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d118      	bne.n	8001c72 <HAL_ADC_ConfigChannel+0x792>
 8001c40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d112      	bne.n	8001c72 <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a23      	ldr	r2, [pc, #140]	; (8001ce0 <HAL_ADC_ConfigChannel+0x800>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d004      	beq.n	8001c60 <HAL_ADC_ConfigChannel+0x780>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a22      	ldr	r2, [pc, #136]	; (8001ce4 <HAL_ADC_ConfigChannel+0x804>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d12d      	bne.n	8001cbc <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c68:	4619      	mov	r1, r3
 8001c6a:	481b      	ldr	r0, [pc, #108]	; (8001cd8 <HAL_ADC_ConfigChannel+0x7f8>)
 8001c6c:	f7ff f951 	bl	8000f12 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c70:	e024      	b.n	8001cbc <HAL_ADC_ConfigChannel+0x7dc>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
<<<<<<< HEAD
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a1f      	ldr	r2, [pc, #124]	; (8001d2c <HAL_ADC_ConfigChannel+0x810>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d120      	bne.n	8001cf6 <HAL_ADC_ConfigChannel+0x7da>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001cb4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d11a      	bne.n	8001cf6 <HAL_ADC_ConfigChannel+0x7da>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a14      	ldr	r2, [pc, #80]	; (8001d18 <HAL_ADC_ConfigChannel+0x7fc>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d115      	bne.n	8001cf6 <HAL_ADC_ConfigChannel+0x7da>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	480e      	ldr	r0, [pc, #56]	; (8001d10 <HAL_ADC_ConfigChannel+0x7f4>)
 8001cd6:	f7ff f93a 	bl	8000f4e <LL_ADC_SetCommonPathInternalCh>
 8001cda:	e00c      	b.n	8001cf6 <HAL_ADC_ConfigChannel+0x7da>
=======
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a1f      	ldr	r2, [pc, #124]	; (8001cf4 <HAL_ADC_ConfigChannel+0x814>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d120      	bne.n	8001cbe <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001c7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d11a      	bne.n	8001cbe <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a14      	ldr	r2, [pc, #80]	; (8001ce0 <HAL_ADC_ConfigChannel+0x800>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d115      	bne.n	8001cbe <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c96:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	480e      	ldr	r0, [pc, #56]	; (8001cd8 <HAL_ADC_ConfigChannel+0x7f8>)
 8001c9e:	f7ff f938 	bl	8000f12 <LL_ADC_SetCommonPathInternalCh>
 8001ca2:	e00c      	b.n	8001cbe <HAL_ADC_ConfigChannel+0x7de>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
<<<<<<< HEAD
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce0:	f043 0220 	orr.w	r2, r3, #32
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001cee:	e002      	b.n	8001cf6 <HAL_ADC_ConfigChannel+0x7da>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001cf0:	bf00      	nop
 8001cf2:	e000      	b.n	8001cf6 <HAL_ADC_ConfigChannel+0x7da>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001cf4:	bf00      	nop
=======
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca8:	f043 0220 	orr.w	r2, r3, #32
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001cb6:	e002      	b.n	8001cbe <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001cb8:	bf00      	nop
 8001cba:	e000      	b.n	8001cbe <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001cbc:	bf00      	nop
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001cfe:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	37d8      	adds	r7, #216	; 0xd8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	80080000 	.word	0x80080000
 8001d10:	50040300 	.word	0x50040300
 8001d14:	c7520000 	.word	0xc7520000
 8001d18:	50040000 	.word	0x50040000
 8001d1c:	50040200 	.word	0x50040200
 8001d20:	20000000 	.word	0x20000000
 8001d24:	053e2d63 	.word	0x053e2d63
 8001d28:	cb840000 	.word	0xcb840000
 8001d2c:	80000001 	.word	0x80000001

08001d30 <LL_ADC_IsEnabled>:
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d101      	bne.n	8001d48 <LL_ADC_IsEnabled+0x18>
 8001d44:	2301      	movs	r3, #1
 8001d46:	e000      	b.n	8001d4a <LL_ADC_IsEnabled+0x1a>
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <LL_ADC_REG_IsConversionOngoing>:
{
 8001d56:	b480      	push	{r7}
 8001d58:	b083      	sub	sp, #12
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 0304 	and.w	r3, r3, #4
 8001d66:	2b04      	cmp	r3, #4
 8001d68:	d101      	bne.n	8001d6e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e000      	b.n	8001d70 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <HAL_ADCEx_MultiModeConfigChannel>:
=======
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001cc6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	37d8      	adds	r7, #216	; 0xd8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	80080000 	.word	0x80080000
 8001cd8:	50040300 	.word	0x50040300
 8001cdc:	c7520000 	.word	0xc7520000
 8001ce0:	50040000 	.word	0x50040000
 8001ce4:	50040200 	.word	0x50040200
 8001ce8:	20000000 	.word	0x20000000
 8001cec:	053e2d63 	.word	0x053e2d63
 8001cf0:	cb840000 	.word	0xcb840000
 8001cf4:	80000001 	.word	0x80000001

08001cf8 <LL_ADC_IsEnabled>:
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d101      	bne.n	8001d10 <LL_ADC_IsEnabled+0x18>
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e000      	b.n	8001d12 <LL_ADC_IsEnabled+0x1a>
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <LL_ADC_REG_IsConversionOngoing>:
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f003 0304 	and.w	r3, r3, #4
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	d101      	bne.n	8001d36 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d32:	2301      	movs	r3, #1
 8001d34:	e000      	b.n	8001d38 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d36:	2300      	movs	r3, #0
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <HAL_ADCEx_MultiModeConfigChannel>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
<<<<<<< HEAD
 8001d7c:	b590      	push	{r4, r7, lr}
 8001d7e:	b0a1      	sub	sp, #132	; 0x84
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d86:	2300      	movs	r3, #0
 8001d88:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
=======
 8001d44:	b590      	push	{r4, r7, lr}
 8001d46:	b0a1      	sub	sp, #132	; 0x84
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d101      	bne.n	8001d9a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001d96:	2302      	movs	r3, #2
 8001d98:	e093      	b.n	8001ec2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001da2:	2300      	movs	r3, #0
 8001da4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001da6:	2300      	movs	r3, #0
 8001da8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a47      	ldr	r2, [pc, #284]	; (8001ecc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d102      	bne.n	8001dba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001db4:	4b46      	ldr	r3, [pc, #280]	; (8001ed0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	e001      	b.n	8001dbe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d10b      	bne.n	8001ddc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc8:	f043 0220 	orr.w	r2, r3, #32
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e072      	b.n	8001ec2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
=======
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d101      	bne.n	8001d62 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001d5e:	2302      	movs	r3, #2
 8001d60:	e093      	b.n	8001e8a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2201      	movs	r2, #1
 8001d66:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001d6e:	2300      	movs	r3, #0
 8001d70:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a47      	ldr	r2, [pc, #284]	; (8001e94 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d102      	bne.n	8001d82 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001d7c:	4b46      	ldr	r3, [pc, #280]	; (8001e98 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	e001      	b.n	8001d86 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001d82:	2300      	movs	r3, #0
 8001d84:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d10b      	bne.n	8001da4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d90:	f043 0220 	orr.w	r2, r3, #32
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e072      	b.n	8001e8a <HAL_ADCEx_MultiModeConfigChannel+0x146>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
<<<<<<< HEAD
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff ffb9 	bl	8001d56 <LL_ADC_REG_IsConversionOngoing>
 8001de4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff ffb3 	bl	8001d56 <LL_ADC_REG_IsConversionOngoing>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d154      	bne.n	8001ea0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001df6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d151      	bne.n	8001ea0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001dfc:	4b35      	ldr	r3, [pc, #212]	; (8001ed4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8001dfe:	677b      	str	r3, [r7, #116]	; 0x74
=======
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff ffb9 	bl	8001d1e <LL_ADC_REG_IsConversionOngoing>
 8001dac:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff ffb3 	bl	8001d1e <LL_ADC_REG_IsConversionOngoing>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d154      	bne.n	8001e68 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001dbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d151      	bne.n	8001e68 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001dc4:	4b35      	ldr	r3, [pc, #212]	; (8001e9c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8001dc6:	677b      	str	r3, [r7, #116]	; 0x74
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
<<<<<<< HEAD
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d02c      	beq.n	8001e62 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001e08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	6859      	ldr	r1, [r3, #4]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e1a:	035b      	lsls	r3, r3, #13
 8001e1c:	430b      	orrs	r3, r1
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e22:	609a      	str	r2, [r3, #8]
=======
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d02c      	beq.n	8001e2a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001dd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	6859      	ldr	r1, [r3, #4]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001de2:	035b      	lsls	r3, r3, #13
 8001de4:	430b      	orrs	r3, r1
 8001de6:	431a      	orrs	r2, r3
 8001de8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001dea:	609a      	str	r2, [r3, #8]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
<<<<<<< HEAD
 8001e24:	4829      	ldr	r0, [pc, #164]	; (8001ecc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001e26:	f7ff ff83 	bl	8001d30 <LL_ADC_IsEnabled>
 8001e2a:	4604      	mov	r4, r0
 8001e2c:	4828      	ldr	r0, [pc, #160]	; (8001ed0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001e2e:	f7ff ff7f 	bl	8001d30 <LL_ADC_IsEnabled>
 8001e32:	4603      	mov	r3, r0
 8001e34:	431c      	orrs	r4, r3
 8001e36:	4828      	ldr	r0, [pc, #160]	; (8001ed8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001e38:	f7ff ff7a 	bl	8001d30 <LL_ADC_IsEnabled>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	4323      	orrs	r3, r4
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d137      	bne.n	8001eb4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001e44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001e4c:	f023 030f 	bic.w	r3, r3, #15
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	6811      	ldr	r1, [r2, #0]
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	6892      	ldr	r2, [r2, #8]
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e5e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e60:	e028      	b.n	8001eb4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
=======
 8001dec:	4829      	ldr	r0, [pc, #164]	; (8001e94 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001dee:	f7ff ff83 	bl	8001cf8 <LL_ADC_IsEnabled>
 8001df2:	4604      	mov	r4, r0
 8001df4:	4828      	ldr	r0, [pc, #160]	; (8001e98 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001df6:	f7ff ff7f 	bl	8001cf8 <LL_ADC_IsEnabled>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	431c      	orrs	r4, r3
 8001dfe:	4828      	ldr	r0, [pc, #160]	; (8001ea0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001e00:	f7ff ff7a 	bl	8001cf8 <LL_ADC_IsEnabled>
 8001e04:	4603      	mov	r3, r0
 8001e06:	4323      	orrs	r3, r4
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d137      	bne.n	8001e7c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001e0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001e14:	f023 030f 	bic.w	r3, r3, #15
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	6811      	ldr	r1, [r2, #0]
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	6892      	ldr	r2, [r2, #8]
 8001e20:	430a      	orrs	r2, r1
 8001e22:	431a      	orrs	r2, r3
 8001e24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e26:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e28:	e028      	b.n	8001e7c <HAL_ADCEx_MultiModeConfigChannel+0x138>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
<<<<<<< HEAD
 8001e62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e6c:	609a      	str	r2, [r3, #8]
=======
 8001e2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e34:	609a      	str	r2, [r3, #8]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
<<<<<<< HEAD
 8001e6e:	4817      	ldr	r0, [pc, #92]	; (8001ecc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001e70:	f7ff ff5e 	bl	8001d30 <LL_ADC_IsEnabled>
 8001e74:	4604      	mov	r4, r0
 8001e76:	4816      	ldr	r0, [pc, #88]	; (8001ed0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001e78:	f7ff ff5a 	bl	8001d30 <LL_ADC_IsEnabled>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	431c      	orrs	r4, r3
 8001e80:	4815      	ldr	r0, [pc, #84]	; (8001ed8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001e82:	f7ff ff55 	bl	8001d30 <LL_ADC_IsEnabled>
 8001e86:	4603      	mov	r3, r0
 8001e88:	4323      	orrs	r3, r4
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d112      	bne.n	8001eb4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001e8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001e96:	f023 030f 	bic.w	r3, r3, #15
 8001e9a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001e9c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e9e:	e009      	b.n	8001eb4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
=======
 8001e36:	4817      	ldr	r0, [pc, #92]	; (8001e94 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001e38:	f7ff ff5e 	bl	8001cf8 <LL_ADC_IsEnabled>
 8001e3c:	4604      	mov	r4, r0
 8001e3e:	4816      	ldr	r0, [pc, #88]	; (8001e98 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001e40:	f7ff ff5a 	bl	8001cf8 <LL_ADC_IsEnabled>
 8001e44:	4603      	mov	r3, r0
 8001e46:	431c      	orrs	r4, r3
 8001e48:	4815      	ldr	r0, [pc, #84]	; (8001ea0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001e4a:	f7ff ff55 	bl	8001cf8 <LL_ADC_IsEnabled>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	4323      	orrs	r3, r4
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d112      	bne.n	8001e7c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001e56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001e5e:	f023 030f 	bic.w	r3, r3, #15
 8001e62:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001e64:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e66:	e009      	b.n	8001e7c <HAL_ADCEx_MultiModeConfigChannel+0x138>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
<<<<<<< HEAD
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea4:	f043 0220 	orr.w	r2, r3, #32
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001eb2:	e000      	b.n	8001eb6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001eb4:	bf00      	nop
=======
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6c:	f043 0220 	orr.w	r2, r3, #32
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001e7a:	e000      	b.n	8001e7e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e7c:	bf00      	nop
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001ebe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3784      	adds	r7, #132	; 0x84
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd90      	pop	{r4, r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	50040000 	.word	0x50040000
 8001ed0:	50040100 	.word	0x50040100
 8001ed4:	50040300 	.word	0x50040300
 8001ed8:	50040200 	.word	0x50040200

08001edc <HAL_CAN_Init>:
=======
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001e86:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3784      	adds	r7, #132	; 0x84
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd90      	pop	{r4, r7, pc}
 8001e92:	bf00      	nop
 8001e94:	50040000 	.word	0x50040000
 8001e98:	50040100 	.word	0x50040100
 8001e9c:	50040300 	.word	0x50040300
 8001ea0:	50040200 	.word	0x50040200

08001ea4 <HAL_CAN_Init>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
=======
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
<<<<<<< HEAD
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e0ed      	b.n	80020ca <HAL_CAN_Init+0x1ee>
=======
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e0ed      	b.n	8002092 <HAL_CAN_Init+0x1ee>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
<<<<<<< HEAD
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d102      	bne.n	8001f00 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7fe fd2a 	bl	8000954 <HAL_CAN_MspInit>
=======
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d102      	bne.n	8001ec8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7fe fd30 	bl	8000928 <HAL_CAN_MspInit>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
<<<<<<< HEAD
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f042 0201 	orr.w	r2, r2, #1
 8001f0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f10:	f7fe ffda 	bl	8000ec8 <HAL_GetTick>
 8001f14:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001f16:	e012      	b.n	8001f3e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f18:	f7fe ffd6 	bl	8000ec8 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b0a      	cmp	r3, #10
 8001f24:	d90b      	bls.n	8001f3e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2205      	movs	r2, #5
 8001f36:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e0c5      	b.n	80020ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d0e5      	beq.n	8001f18 <HAL_CAN_Init+0x3c>
=======
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f042 0201 	orr.w	r2, r2, #1
 8001ed6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ed8:	f7fe ffd8 	bl	8000e8c <HAL_GetTick>
 8001edc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ede:	e012      	b.n	8001f06 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ee0:	f7fe ffd4 	bl	8000e8c <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b0a      	cmp	r3, #10
 8001eec:	d90b      	bls.n	8001f06 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2205      	movs	r2, #5
 8001efe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e0c5      	b.n	8002092 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d0e5      	beq.n	8001ee0 <HAL_CAN_Init+0x3c>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
<<<<<<< HEAD
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f022 0202 	bic.w	r2, r2, #2
 8001f5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f5c:	f7fe ffb4 	bl	8000ec8 <HAL_GetTick>
 8001f60:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f62:	e012      	b.n	8001f8a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f64:	f7fe ffb0 	bl	8000ec8 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b0a      	cmp	r3, #10
 8001f70:	d90b      	bls.n	8001f8a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f76:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2205      	movs	r2, #5
 8001f82:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e09f      	b.n	80020ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d1e5      	bne.n	8001f64 <HAL_CAN_Init+0x88>
=======
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f022 0202 	bic.w	r2, r2, #2
 8001f22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f24:	f7fe ffb2 	bl	8000e8c <HAL_GetTick>
 8001f28:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f2a:	e012      	b.n	8001f52 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f2c:	f7fe ffae 	bl	8000e8c <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b0a      	cmp	r3, #10
 8001f38:	d90b      	bls.n	8001f52 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2205      	movs	r2, #5
 8001f4a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e09f      	b.n	8002092 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d1e5      	bne.n	8001f2c <HAL_CAN_Init+0x88>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
<<<<<<< HEAD
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	7e1b      	ldrb	r3, [r3, #24]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d108      	bne.n	8001fb2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	e007      	b.n	8001fc2 <HAL_CAN_Init+0xe6>
=======
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	7e1b      	ldrb	r3, [r3, #24]
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d108      	bne.n	8001f7a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	e007      	b.n	8001f8a <HAL_CAN_Init+0xe6>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
<<<<<<< HEAD
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fc0:	601a      	str	r2, [r3, #0]
=======
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f88:	601a      	str	r2, [r3, #0]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
<<<<<<< HEAD
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	7e5b      	ldrb	r3, [r3, #25]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d108      	bne.n	8001fdc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	e007      	b.n	8001fec <HAL_CAN_Init+0x110>
=======
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	7e5b      	ldrb	r3, [r3, #25]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d108      	bne.n	8001fa4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	e007      	b.n	8001fb4 <HAL_CAN_Init+0x110>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
<<<<<<< HEAD
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fea:	601a      	str	r2, [r3, #0]
=======
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fb2:	601a      	str	r2, [r3, #0]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
<<<<<<< HEAD
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	7e9b      	ldrb	r3, [r3, #26]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d108      	bne.n	8002006 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f042 0220 	orr.w	r2, r2, #32
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	e007      	b.n	8002016 <HAL_CAN_Init+0x13a>
=======
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	7e9b      	ldrb	r3, [r3, #26]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d108      	bne.n	8001fce <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f042 0220 	orr.w	r2, r2, #32
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	e007      	b.n	8001fde <HAL_CAN_Init+0x13a>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
<<<<<<< HEAD
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 0220 	bic.w	r2, r2, #32
 8002014:	601a      	str	r2, [r3, #0]
=======
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 0220 	bic.w	r2, r2, #32
 8001fdc:	601a      	str	r2, [r3, #0]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
<<<<<<< HEAD
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	7edb      	ldrb	r3, [r3, #27]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d108      	bne.n	8002030 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 0210 	bic.w	r2, r2, #16
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	e007      	b.n	8002040 <HAL_CAN_Init+0x164>
=======
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	7edb      	ldrb	r3, [r3, #27]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d108      	bne.n	8001ff8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f022 0210 	bic.w	r2, r2, #16
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	e007      	b.n	8002008 <HAL_CAN_Init+0x164>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
<<<<<<< HEAD
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f042 0210 	orr.w	r2, r2, #16
 800203e:	601a      	str	r2, [r3, #0]
=======
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f042 0210 	orr.w	r2, r2, #16
 8002006:	601a      	str	r2, [r3, #0]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
<<<<<<< HEAD
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	7f1b      	ldrb	r3, [r3, #28]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d108      	bne.n	800205a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f042 0208 	orr.w	r2, r2, #8
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	e007      	b.n	800206a <HAL_CAN_Init+0x18e>
=======
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	7f1b      	ldrb	r3, [r3, #28]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d108      	bne.n	8002022 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f042 0208 	orr.w	r2, r2, #8
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	e007      	b.n	8002032 <HAL_CAN_Init+0x18e>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
<<<<<<< HEAD
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 0208 	bic.w	r2, r2, #8
 8002068:	601a      	str	r2, [r3, #0]
=======
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f022 0208 	bic.w	r2, r2, #8
 8002030:	601a      	str	r2, [r3, #0]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
<<<<<<< HEAD
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	7f5b      	ldrb	r3, [r3, #29]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d108      	bne.n	8002084 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f042 0204 	orr.w	r2, r2, #4
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	e007      	b.n	8002094 <HAL_CAN_Init+0x1b8>
=======
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	7f5b      	ldrb	r3, [r3, #29]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d108      	bne.n	800204c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f042 0204 	orr.w	r2, r2, #4
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	e007      	b.n	800205c <HAL_CAN_Init+0x1b8>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
<<<<<<< HEAD
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f022 0204 	bic.w	r2, r2, #4
 8002092:	601a      	str	r2, [r3, #0]
=======
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f022 0204 	bic.w	r2, r2, #4
 800205a:	601a      	str	r2, [r3, #0]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
<<<<<<< HEAD
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689a      	ldr	r2, [r3, #8]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	431a      	orrs	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	431a      	orrs	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	695b      	ldr	r3, [r3, #20]
 80020a8:	ea42 0103 	orr.w	r1, r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	1e5a      	subs	r2, r3, #1
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	430a      	orrs	r2, r1
 80020b8:	61da      	str	r2, [r3, #28]
=======
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689a      	ldr	r2, [r3, #8]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	431a      	orrs	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	431a      	orrs	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	695b      	ldr	r3, [r3, #20]
 8002070:	ea42 0103 	orr.w	r1, r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	1e5a      	subs	r2, r3, #1
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	430a      	orrs	r2, r1
 8002080:	61da      	str	r2, [r3, #28]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
<<<<<<< HEAD
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
	...

080020d4 <__NVIC_SetPriorityGrouping>:
=======
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
	...

0800209c <__NVIC_SetPriorityGrouping>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020e4:	4b0c      	ldr	r3, [pc, #48]	; (8002118 <__NVIC_SetPriorityGrouping+0x44>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ea:	68ba      	ldr	r2, [r7, #8]
 80020ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020f0:	4013      	ands	r3, r2
 80020f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002104:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002106:	4a04      	ldr	r2, [pc, #16]	; (8002118 <__NVIC_SetPriorityGrouping+0x44>)
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	60d3      	str	r3, [r2, #12]
}
 800210c:	bf00      	nop
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	e000ed00 	.word	0xe000ed00

0800211c <__NVIC_GetPriorityGrouping>:
=======
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020ac:	4b0c      	ldr	r3, [pc, #48]	; (80020e0 <__NVIC_SetPriorityGrouping+0x44>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020b2:	68ba      	ldr	r2, [r7, #8]
 80020b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020b8:	4013      	ands	r3, r2
 80020ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ce:	4a04      	ldr	r2, [pc, #16]	; (80020e0 <__NVIC_SetPriorityGrouping+0x44>)
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	60d3      	str	r3, [r2, #12]
}
 80020d4:	bf00      	nop
 80020d6:	3714      	adds	r7, #20
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <__NVIC_GetPriorityGrouping>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002120:	4b04      	ldr	r3, [pc, #16]	; (8002134 <__NVIC_GetPriorityGrouping+0x18>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	0a1b      	lsrs	r3, r3, #8
 8002126:	f003 0307 	and.w	r3, r3, #7
}
 800212a:	4618      	mov	r0, r3
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	e000ed00 	.word	0xe000ed00

08002138 <__NVIC_EnableIRQ>:
=======
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020e8:	4b04      	ldr	r3, [pc, #16]	; (80020fc <__NVIC_GetPriorityGrouping+0x18>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	0a1b      	lsrs	r3, r3, #8
 80020ee:	f003 0307 	and.w	r3, r3, #7
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	e000ed00 	.word	0xe000ed00

08002100 <__NVIC_EnableIRQ>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	4603      	mov	r3, r0
 8002140:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002146:	2b00      	cmp	r3, #0
 8002148:	db0b      	blt.n	8002162 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800214a:	79fb      	ldrb	r3, [r7, #7]
 800214c:	f003 021f 	and.w	r2, r3, #31
 8002150:	4907      	ldr	r1, [pc, #28]	; (8002170 <__NVIC_EnableIRQ+0x38>)
 8002152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002156:	095b      	lsrs	r3, r3, #5
 8002158:	2001      	movs	r0, #1
 800215a:	fa00 f202 	lsl.w	r2, r0, r2
 800215e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	e000e100 	.word	0xe000e100

08002174 <__NVIC_SetPriority>:
=======
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	4603      	mov	r3, r0
 8002108:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800210a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210e:	2b00      	cmp	r3, #0
 8002110:	db0b      	blt.n	800212a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002112:	79fb      	ldrb	r3, [r7, #7]
 8002114:	f003 021f 	and.w	r2, r3, #31
 8002118:	4907      	ldr	r1, [pc, #28]	; (8002138 <__NVIC_EnableIRQ+0x38>)
 800211a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211e:	095b      	lsrs	r3, r3, #5
 8002120:	2001      	movs	r0, #1
 8002122:	fa00 f202 	lsl.w	r2, r0, r2
 8002126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800212a:	bf00      	nop
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	e000e100 	.word	0xe000e100

0800213c <__NVIC_SetPriority>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	6039      	str	r1, [r7, #0]
 800217e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002184:	2b00      	cmp	r3, #0
 8002186:	db0a      	blt.n	800219e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	b2da      	uxtb	r2, r3
 800218c:	490c      	ldr	r1, [pc, #48]	; (80021c0 <__NVIC_SetPriority+0x4c>)
 800218e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002192:	0112      	lsls	r2, r2, #4
 8002194:	b2d2      	uxtb	r2, r2
 8002196:	440b      	add	r3, r1
 8002198:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	6039      	str	r1, [r7, #0]
 8002146:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214c:	2b00      	cmp	r3, #0
 800214e:	db0a      	blt.n	8002166 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	b2da      	uxtb	r2, r3
 8002154:	490c      	ldr	r1, [pc, #48]	; (8002188 <__NVIC_SetPriority+0x4c>)
 8002156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215a:	0112      	lsls	r2, r2, #4
 800215c:	b2d2      	uxtb	r2, r2
 800215e:	440b      	add	r3, r1
 8002160:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 800219c:	e00a      	b.n	80021b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	4908      	ldr	r1, [pc, #32]	; (80021c4 <__NVIC_SetPriority+0x50>)
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	3b04      	subs	r3, #4
 80021ac:	0112      	lsls	r2, r2, #4
 80021ae:	b2d2      	uxtb	r2, r2
 80021b0:	440b      	add	r3, r1
 80021b2:	761a      	strb	r2, [r3, #24]
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	e000e100 	.word	0xe000e100
 80021c4:	e000ed00 	.word	0xe000ed00

080021c8 <NVIC_EncodePriority>:
=======
 8002164:	e00a      	b.n	800217c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	b2da      	uxtb	r2, r3
 800216a:	4908      	ldr	r1, [pc, #32]	; (800218c <__NVIC_SetPriority+0x50>)
 800216c:	79fb      	ldrb	r3, [r7, #7]
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	3b04      	subs	r3, #4
 8002174:	0112      	lsls	r2, r2, #4
 8002176:	b2d2      	uxtb	r2, r2
 8002178:	440b      	add	r3, r1
 800217a:	761a      	strb	r2, [r3, #24]
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	e000e100 	.word	0xe000e100
 800218c:	e000ed00 	.word	0xe000ed00

08002190 <NVIC_EncodePriority>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 80021c8:	b480      	push	{r7}
 80021ca:	b089      	sub	sp, #36	; 0x24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	61fb      	str	r3, [r7, #28]
=======
 8002190:	b480      	push	{r7}
 8002192:	b089      	sub	sp, #36	; 0x24
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	61fb      	str	r3, [r7, #28]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f1c3 0307 	rsb	r3, r3, #7
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	bf28      	it	cs
 80021e6:	2304      	movcs	r3, #4
 80021e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	3304      	adds	r3, #4
 80021ee:	2b06      	cmp	r3, #6
 80021f0:	d902      	bls.n	80021f8 <NVIC_EncodePriority+0x30>
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	3b03      	subs	r3, #3
 80021f6:	e000      	b.n	80021fa <NVIC_EncodePriority+0x32>
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	43da      	mvns	r2, r3
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	401a      	ands	r2, r3
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002210:	f04f 31ff 	mov.w	r1, #4294967295
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	fa01 f303 	lsl.w	r3, r1, r3
 800221a:	43d9      	mvns	r1, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002220:	4313      	orrs	r3, r2
         );
}
 8002222:	4618      	mov	r0, r3
 8002224:	3724      	adds	r7, #36	; 0x24
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <HAL_NVIC_SetPriorityGrouping>:
=======
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	f1c3 0307 	rsb	r3, r3, #7
 80021aa:	2b04      	cmp	r3, #4
 80021ac:	bf28      	it	cs
 80021ae:	2304      	movcs	r3, #4
 80021b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	3304      	adds	r3, #4
 80021b6:	2b06      	cmp	r3, #6
 80021b8:	d902      	bls.n	80021c0 <NVIC_EncodePriority+0x30>
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	3b03      	subs	r3, #3
 80021be:	e000      	b.n	80021c2 <NVIC_EncodePriority+0x32>
 80021c0:	2300      	movs	r3, #0
 80021c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c4:	f04f 32ff 	mov.w	r2, #4294967295
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43da      	mvns	r2, r3
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	401a      	ands	r2, r3
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021d8:	f04f 31ff 	mov.w	r1, #4294967295
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	fa01 f303 	lsl.w	r3, r1, r3
 80021e2:	43d9      	mvns	r1, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e8:	4313      	orrs	r3, r2
         );
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3724      	adds	r7, #36	; 0x24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 800222e:	b580      	push	{r7, lr}
 8002230:	b082      	sub	sp, #8
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
=======
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b082      	sub	sp, #8
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7ff ff4c 	bl	80020d4 <__NVIC_SetPriorityGrouping>
}
 800223c:	bf00      	nop
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <HAL_NVIC_SetPriority>:
=======
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f7ff ff4c 	bl	800209c <__NVIC_SetPriorityGrouping>
}
 8002204:	bf00      	nop
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <HAL_NVIC_SetPriority>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
 8002250:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002252:	2300      	movs	r3, #0
 8002254:	617b      	str	r3, [r7, #20]
=======
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
 8002218:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 8002256:	f7ff ff61 	bl	800211c <__NVIC_GetPriorityGrouping>
 800225a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	68b9      	ldr	r1, [r7, #8]
 8002260:	6978      	ldr	r0, [r7, #20]
 8002262:	f7ff ffb1 	bl	80021c8 <NVIC_EncodePriority>
 8002266:	4602      	mov	r2, r0
 8002268:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800226c:	4611      	mov	r1, r2
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff ff80 	bl	8002174 <__NVIC_SetPriority>
}
 8002274:	bf00      	nop
 8002276:	3718      	adds	r7, #24
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <HAL_NVIC_EnableIRQ>:
=======
 800221e:	f7ff ff61 	bl	80020e4 <__NVIC_GetPriorityGrouping>
 8002222:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	68b9      	ldr	r1, [r7, #8]
 8002228:	6978      	ldr	r0, [r7, #20]
 800222a:	f7ff ffb1 	bl	8002190 <NVIC_EncodePriority>
 800222e:	4602      	mov	r2, r0
 8002230:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002234:	4611      	mov	r1, r2
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff ff80 	bl	800213c <__NVIC_SetPriority>
}
 800223c:	bf00      	nop
 800223e:	3718      	adds	r7, #24
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <HAL_NVIC_EnableIRQ>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	4603      	mov	r3, r0
 8002284:	71fb      	strb	r3, [r7, #7]
=======
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	71fb      	strb	r3, [r7, #7]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< HEAD
 8002286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff ff54 	bl	8002138 <__NVIC_EnableIRQ>
}
 8002290:	bf00      	nop
 8002292:	3708      	adds	r7, #8
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <HAL_GPIO_Init>:
=======
 800224e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff ff54 	bl	8002100 <__NVIC_EnableIRQ>
}
 8002258:	bf00      	nop
 800225a:	3708      	adds	r7, #8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <HAL_GPIO_Init>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 8002298:	b480      	push	{r7}
 800229a:	b087      	sub	sp, #28
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022a2:	2300      	movs	r3, #0
 80022a4:	617b      	str	r3, [r7, #20]
=======
 8002260:	b480      	push	{r7}
 8002262:	b087      	sub	sp, #28
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800226a:	2300      	movs	r3, #0
 800226c:	617b      	str	r3, [r7, #20]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
<<<<<<< HEAD
 80022a6:	e166      	b.n	8002576 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	2101      	movs	r1, #1
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	fa01 f303 	lsl.w	r3, r1, r3
 80022b4:	4013      	ands	r3, r2
 80022b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f000 8158 	beq.w	8002570 <HAL_GPIO_Init+0x2d8>
=======
 800226e:	e166      	b.n	800253e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	2101      	movs	r1, #1
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	fa01 f303 	lsl.w	r3, r1, r3
 800227c:	4013      	ands	r3, r2
 800227e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2b00      	cmp	r3, #0
 8002284:	f000 8158 	beq.w	8002538 <HAL_GPIO_Init+0x2d8>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
<<<<<<< HEAD
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f003 0303 	and.w	r3, r3, #3
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d005      	beq.n	80022d8 <HAL_GPIO_Init+0x40>
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f003 0303 	and.w	r3, r3, #3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d130      	bne.n	800233a <HAL_GPIO_Init+0xa2>
=======
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 0303 	and.w	r3, r3, #3
 8002290:	2b01      	cmp	r3, #1
 8002292:	d005      	beq.n	80022a0 <HAL_GPIO_Init+0x40>
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f003 0303 	and.w	r3, r3, #3
 800229c:	2b02      	cmp	r3, #2
 800229e:	d130      	bne.n	8002302 <HAL_GPIO_Init+0xa2>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
<<<<<<< HEAD
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	2203      	movs	r2, #3
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	43db      	mvns	r3, r3
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	4013      	ands	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	68da      	ldr	r2, [r3, #12]
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	693a      	ldr	r2, [r7, #16]
 80022fe:	4313      	orrs	r3, r2
 8002300:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800230e:	2201      	movs	r2, #1
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	43db      	mvns	r3, r3
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	4013      	ands	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	091b      	lsrs	r3, r3, #4
 8002324:	f003 0201 	and.w	r2, r3, #1
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	4313      	orrs	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	605a      	str	r2, [r3, #4]
=======
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	2203      	movs	r2, #3
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	4013      	ands	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	68da      	ldr	r2, [r3, #12]
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022d6:	2201      	movs	r2, #1
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	43db      	mvns	r3, r3
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	4013      	ands	r3, r2
 80022e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	091b      	lsrs	r3, r3, #4
 80022ec:	f003 0201 	and.w	r2, r3, #1
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	605a      	str	r2, [r3, #4]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
<<<<<<< HEAD
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f003 0303 	and.w	r3, r3, #3
 8002342:	2b03      	cmp	r3, #3
 8002344:	d017      	beq.n	8002376 <HAL_GPIO_Init+0xde>
=======
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f003 0303 	and.w	r3, r3, #3
 800230a:	2b03      	cmp	r3, #3
 800230c:	d017      	beq.n	800233e <HAL_GPIO_Init+0xde>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
<<<<<<< HEAD
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	2203      	movs	r2, #3
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	43db      	mvns	r3, r3
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	4013      	ands	r3, r2
 800235c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	4313      	orrs	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	60da      	str	r2, [r3, #12]
=======
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	2203      	movs	r2, #3
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	43db      	mvns	r3, r3
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	4013      	ands	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	689a      	ldr	r2, [r3, #8]
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	4313      	orrs	r3, r2
 8002336:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	60da      	str	r2, [r3, #12]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
<<<<<<< HEAD
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f003 0303 	and.w	r3, r3, #3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d123      	bne.n	80023ca <HAL_GPIO_Init+0x132>
=======
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f003 0303 	and.w	r3, r3, #3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d123      	bne.n	8002392 <HAL_GPIO_Init+0x132>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
<<<<<<< HEAD
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	08da      	lsrs	r2, r3, #3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	3208      	adds	r2, #8
 800238a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800238e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	220f      	movs	r2, #15
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	43db      	mvns	r3, r3
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	4013      	ands	r3, r2
 80023a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	691a      	ldr	r2, [r3, #16]
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	08da      	lsrs	r2, r3, #3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3208      	adds	r2, #8
 80023c4:	6939      	ldr	r1, [r7, #16]
 80023c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	08da      	lsrs	r2, r3, #3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	3208      	adds	r2, #8
 8002352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002356:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	220f      	movs	r2, #15
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	43db      	mvns	r3, r3
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	4013      	ands	r3, r2
 800236c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	691a      	ldr	r2, [r3, #16]
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	4313      	orrs	r3, r2
 8002382:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	08da      	lsrs	r2, r3, #3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3208      	adds	r2, #8
 800238c:	6939      	ldr	r1, [r7, #16]
 800238e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< HEAD
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	2203      	movs	r2, #3
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	43db      	mvns	r3, r3
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	4013      	ands	r3, r2
 80023e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f003 0203 	and.w	r2, r3, #3
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	fa02 f303 	lsl.w	r3, r2, r3
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	601a      	str	r2, [r3, #0]
=======
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	2203      	movs	r2, #3
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	43db      	mvns	r3, r3
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	4013      	ands	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f003 0203 	and.w	r2, r3, #3
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	4313      	orrs	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	601a      	str	r2, [r3, #0]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
<<<<<<< HEAD
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002406:	2b00      	cmp	r3, #0
 8002408:	f000 80b2 	beq.w	8002570 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800240c:	4b61      	ldr	r3, [pc, #388]	; (8002594 <HAL_GPIO_Init+0x2fc>)
 800240e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002410:	4a60      	ldr	r2, [pc, #384]	; (8002594 <HAL_GPIO_Init+0x2fc>)
 8002412:	f043 0301 	orr.w	r3, r3, #1
 8002416:	6613      	str	r3, [r2, #96]	; 0x60
 8002418:	4b5e      	ldr	r3, [pc, #376]	; (8002594 <HAL_GPIO_Init+0x2fc>)
 800241a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	60bb      	str	r3, [r7, #8]
 8002422:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002424:	4a5c      	ldr	r2, [pc, #368]	; (8002598 <HAL_GPIO_Init+0x300>)
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	089b      	lsrs	r3, r3, #2
 800242a:	3302      	adds	r3, #2
 800242c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002430:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	f003 0303 	and.w	r3, r3, #3
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	220f      	movs	r2, #15
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	43db      	mvns	r3, r3
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	4013      	ands	r3, r2
 8002446:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800244e:	d02b      	beq.n	80024a8 <HAL_GPIO_Init+0x210>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a52      	ldr	r2, [pc, #328]	; (800259c <HAL_GPIO_Init+0x304>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d025      	beq.n	80024a4 <HAL_GPIO_Init+0x20c>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a51      	ldr	r2, [pc, #324]	; (80025a0 <HAL_GPIO_Init+0x308>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d01f      	beq.n	80024a0 <HAL_GPIO_Init+0x208>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a50      	ldr	r2, [pc, #320]	; (80025a4 <HAL_GPIO_Init+0x30c>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d019      	beq.n	800249c <HAL_GPIO_Init+0x204>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a4f      	ldr	r2, [pc, #316]	; (80025a8 <HAL_GPIO_Init+0x310>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d013      	beq.n	8002498 <HAL_GPIO_Init+0x200>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a4e      	ldr	r2, [pc, #312]	; (80025ac <HAL_GPIO_Init+0x314>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d00d      	beq.n	8002494 <HAL_GPIO_Init+0x1fc>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a4d      	ldr	r2, [pc, #308]	; (80025b0 <HAL_GPIO_Init+0x318>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d007      	beq.n	8002490 <HAL_GPIO_Init+0x1f8>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a4c      	ldr	r2, [pc, #304]	; (80025b4 <HAL_GPIO_Init+0x31c>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d101      	bne.n	800248c <HAL_GPIO_Init+0x1f4>
 8002488:	2307      	movs	r3, #7
 800248a:	e00e      	b.n	80024aa <HAL_GPIO_Init+0x212>
 800248c:	2308      	movs	r3, #8
 800248e:	e00c      	b.n	80024aa <HAL_GPIO_Init+0x212>
 8002490:	2306      	movs	r3, #6
 8002492:	e00a      	b.n	80024aa <HAL_GPIO_Init+0x212>
 8002494:	2305      	movs	r3, #5
 8002496:	e008      	b.n	80024aa <HAL_GPIO_Init+0x212>
 8002498:	2304      	movs	r3, #4
 800249a:	e006      	b.n	80024aa <HAL_GPIO_Init+0x212>
 800249c:	2303      	movs	r3, #3
 800249e:	e004      	b.n	80024aa <HAL_GPIO_Init+0x212>
 80024a0:	2302      	movs	r3, #2
 80024a2:	e002      	b.n	80024aa <HAL_GPIO_Init+0x212>
 80024a4:	2301      	movs	r3, #1
 80024a6:	e000      	b.n	80024aa <HAL_GPIO_Init+0x212>
 80024a8:	2300      	movs	r3, #0
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	f002 0203 	and.w	r2, r2, #3
 80024b0:	0092      	lsls	r2, r2, #2
 80024b2:	4093      	lsls	r3, r2
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024ba:	4937      	ldr	r1, [pc, #220]	; (8002598 <HAL_GPIO_Init+0x300>)
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	089b      	lsrs	r3, r3, #2
 80024c0:	3302      	adds	r3, #2
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024c8:	4b3b      	ldr	r3, [pc, #236]	; (80025b8 <HAL_GPIO_Init+0x320>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	43db      	mvns	r3, r3
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	4013      	ands	r3, r2
 80024d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d003      	beq.n	80024ec <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024ec:	4a32      	ldr	r2, [pc, #200]	; (80025b8 <HAL_GPIO_Init+0x320>)
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80024f2:	4b31      	ldr	r3, [pc, #196]	; (80025b8 <HAL_GPIO_Init+0x320>)
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	43db      	mvns	r3, r3
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	4013      	ands	r3, r2
 8002500:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	4313      	orrs	r3, r2
 8002514:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002516:	4a28      	ldr	r2, [pc, #160]	; (80025b8 <HAL_GPIO_Init+0x320>)
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800251c:	4b26      	ldr	r3, [pc, #152]	; (80025b8 <HAL_GPIO_Init+0x320>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	43db      	mvns	r3, r3
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	4013      	ands	r3, r2
 800252a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d003      	beq.n	8002540 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	4313      	orrs	r3, r2
 800253e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002540:	4a1d      	ldr	r2, [pc, #116]	; (80025b8 <HAL_GPIO_Init+0x320>)
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002546:	4b1c      	ldr	r3, [pc, #112]	; (80025b8 <HAL_GPIO_Init+0x320>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	43db      	mvns	r3, r3
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	4013      	ands	r3, r2
 8002554:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d003      	beq.n	800256a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	4313      	orrs	r3, r2
 8002568:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800256a:	4a13      	ldr	r2, [pc, #76]	; (80025b8 <HAL_GPIO_Init+0x320>)
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	6013      	str	r3, [r2, #0]
=======
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f000 80b2 	beq.w	8002538 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023d4:	4b61      	ldr	r3, [pc, #388]	; (800255c <HAL_GPIO_Init+0x2fc>)
 80023d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023d8:	4a60      	ldr	r2, [pc, #384]	; (800255c <HAL_GPIO_Init+0x2fc>)
 80023da:	f043 0301 	orr.w	r3, r3, #1
 80023de:	6613      	str	r3, [r2, #96]	; 0x60
 80023e0:	4b5e      	ldr	r3, [pc, #376]	; (800255c <HAL_GPIO_Init+0x2fc>)
 80023e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	60bb      	str	r3, [r7, #8]
 80023ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023ec:	4a5c      	ldr	r2, [pc, #368]	; (8002560 <HAL_GPIO_Init+0x300>)
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	089b      	lsrs	r3, r3, #2
 80023f2:	3302      	adds	r3, #2
 80023f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	f003 0303 	and.w	r3, r3, #3
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	220f      	movs	r2, #15
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	43db      	mvns	r3, r3
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	4013      	ands	r3, r2
 800240e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002416:	d02b      	beq.n	8002470 <HAL_GPIO_Init+0x210>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a52      	ldr	r2, [pc, #328]	; (8002564 <HAL_GPIO_Init+0x304>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d025      	beq.n	800246c <HAL_GPIO_Init+0x20c>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4a51      	ldr	r2, [pc, #324]	; (8002568 <HAL_GPIO_Init+0x308>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d01f      	beq.n	8002468 <HAL_GPIO_Init+0x208>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4a50      	ldr	r2, [pc, #320]	; (800256c <HAL_GPIO_Init+0x30c>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d019      	beq.n	8002464 <HAL_GPIO_Init+0x204>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4a4f      	ldr	r2, [pc, #316]	; (8002570 <HAL_GPIO_Init+0x310>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d013      	beq.n	8002460 <HAL_GPIO_Init+0x200>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4a4e      	ldr	r2, [pc, #312]	; (8002574 <HAL_GPIO_Init+0x314>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d00d      	beq.n	800245c <HAL_GPIO_Init+0x1fc>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4a4d      	ldr	r2, [pc, #308]	; (8002578 <HAL_GPIO_Init+0x318>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d007      	beq.n	8002458 <HAL_GPIO_Init+0x1f8>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a4c      	ldr	r2, [pc, #304]	; (800257c <HAL_GPIO_Init+0x31c>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d101      	bne.n	8002454 <HAL_GPIO_Init+0x1f4>
 8002450:	2307      	movs	r3, #7
 8002452:	e00e      	b.n	8002472 <HAL_GPIO_Init+0x212>
 8002454:	2308      	movs	r3, #8
 8002456:	e00c      	b.n	8002472 <HAL_GPIO_Init+0x212>
 8002458:	2306      	movs	r3, #6
 800245a:	e00a      	b.n	8002472 <HAL_GPIO_Init+0x212>
 800245c:	2305      	movs	r3, #5
 800245e:	e008      	b.n	8002472 <HAL_GPIO_Init+0x212>
 8002460:	2304      	movs	r3, #4
 8002462:	e006      	b.n	8002472 <HAL_GPIO_Init+0x212>
 8002464:	2303      	movs	r3, #3
 8002466:	e004      	b.n	8002472 <HAL_GPIO_Init+0x212>
 8002468:	2302      	movs	r3, #2
 800246a:	e002      	b.n	8002472 <HAL_GPIO_Init+0x212>
 800246c:	2301      	movs	r3, #1
 800246e:	e000      	b.n	8002472 <HAL_GPIO_Init+0x212>
 8002470:	2300      	movs	r3, #0
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	f002 0203 	and.w	r2, r2, #3
 8002478:	0092      	lsls	r2, r2, #2
 800247a:	4093      	lsls	r3, r2
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	4313      	orrs	r3, r2
 8002480:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002482:	4937      	ldr	r1, [pc, #220]	; (8002560 <HAL_GPIO_Init+0x300>)
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	089b      	lsrs	r3, r3, #2
 8002488:	3302      	adds	r3, #2
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002490:	4b3b      	ldr	r3, [pc, #236]	; (8002580 <HAL_GPIO_Init+0x320>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	43db      	mvns	r3, r3
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	4013      	ands	r3, r2
 800249e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d003      	beq.n	80024b4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024b4:	4a32      	ldr	r2, [pc, #200]	; (8002580 <HAL_GPIO_Init+0x320>)
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80024ba:	4b31      	ldr	r3, [pc, #196]	; (8002580 <HAL_GPIO_Init+0x320>)
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	43db      	mvns	r3, r3
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	4013      	ands	r3, r2
 80024c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	4313      	orrs	r3, r2
 80024dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024de:	4a28      	ldr	r2, [pc, #160]	; (8002580 <HAL_GPIO_Init+0x320>)
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80024e4:	4b26      	ldr	r3, [pc, #152]	; (8002580 <HAL_GPIO_Init+0x320>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	43db      	mvns	r3, r3
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	4013      	ands	r3, r2
 80024f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d003      	beq.n	8002508 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	4313      	orrs	r3, r2
 8002506:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002508:	4a1d      	ldr	r2, [pc, #116]	; (8002580 <HAL_GPIO_Init+0x320>)
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800250e:	4b1c      	ldr	r3, [pc, #112]	; (8002580 <HAL_GPIO_Init+0x320>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	43db      	mvns	r3, r3
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	4013      	ands	r3, r2
 800251c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	4313      	orrs	r3, r2
 8002530:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002532:	4a13      	ldr	r2, [pc, #76]	; (8002580 <HAL_GPIO_Init+0x320>)
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	6013      	str	r3, [r2, #0]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
      }
    }

    position++;
<<<<<<< HEAD
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	3301      	adds	r3, #1
 8002574:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	fa22 f303 	lsr.w	r3, r2, r3
 8002580:	2b00      	cmp	r3, #0
 8002582:	f47f ae91 	bne.w	80022a8 <HAL_GPIO_Init+0x10>
  }
}
 8002586:	bf00      	nop
 8002588:	bf00      	nop
 800258a:	371c      	adds	r7, #28
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	40021000 	.word	0x40021000
 8002598:	40010000 	.word	0x40010000
 800259c:	48000400 	.word	0x48000400
 80025a0:	48000800 	.word	0x48000800
 80025a4:	48000c00 	.word	0x48000c00
 80025a8:	48001000 	.word	0x48001000
 80025ac:	48001400 	.word	0x48001400
 80025b0:	48001800 	.word	0x48001800
 80025b4:	48001c00 	.word	0x48001c00
 80025b8:	40010400 	.word	0x40010400

080025bc <HAL_GPIO_WritePin>:
=======
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	3301      	adds	r3, #1
 800253c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	fa22 f303 	lsr.w	r3, r2, r3
 8002548:	2b00      	cmp	r3, #0
 800254a:	f47f ae91 	bne.w	8002270 <HAL_GPIO_Init+0x10>
  }
}
 800254e:	bf00      	nop
 8002550:	bf00      	nop
 8002552:	371c      	adds	r7, #28
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr
 800255c:	40021000 	.word	0x40021000
 8002560:	40010000 	.word	0x40010000
 8002564:	48000400 	.word	0x48000400
 8002568:	48000800 	.word	0x48000800
 800256c:	48000c00 	.word	0x48000c00
 8002570:	48001000 	.word	0x48001000
 8002574:	48001400 	.word	0x48001400
 8002578:	48001800 	.word	0x48001800
 800257c:	48001c00 	.word	0x48001c00
 8002580:	40010400 	.word	0x40010400

08002584 <HAL_GPIO_WritePin>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	460b      	mov	r3, r1
 80025c6:	807b      	strh	r3, [r7, #2]
 80025c8:	4613      	mov	r3, r2
 80025ca:	707b      	strb	r3, [r7, #1]
=======
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	460b      	mov	r3, r1
 800258e:	807b      	strh	r3, [r7, #2]
 8002590:	4613      	mov	r3, r2
 8002592:	707b      	strb	r3, [r7, #1]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 80025cc:	787b      	ldrb	r3, [r7, #1]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025d2:	887a      	ldrh	r2, [r7, #2]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	619a      	str	r2, [r3, #24]
=======
 8002594:	787b      	ldrb	r3, [r7, #1]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800259a:	887a      	ldrh	r2, [r7, #2]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	619a      	str	r2, [r3, #24]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
<<<<<<< HEAD
 80025d8:	e002      	b.n	80025e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025da:	887a      	ldrh	r2, [r7, #2]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80025f6:	4b08      	ldr	r3, [pc, #32]	; (8002618 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025f8:	695a      	ldr	r2, [r3, #20]
 80025fa:	88fb      	ldrh	r3, [r7, #6]
 80025fc:	4013      	ands	r3, r2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d006      	beq.n	8002610 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002602:	4a05      	ldr	r2, [pc, #20]	; (8002618 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002604:	88fb      	ldrh	r3, [r7, #6]
 8002606:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002608:	88fb      	ldrh	r3, [r7, #6]
 800260a:	4618      	mov	r0, r3
 800260c:	f000 f806 	bl	800261c <HAL_GPIO_EXTI_Callback>
  }
}
 8002610:	bf00      	nop
 8002612:	3708      	adds	r7, #8
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	40010400 	.word	0x40010400

0800261c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	4603      	mov	r3, r0
 8002624:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002626:	bf00      	nop
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <HAL_I2C_Init>:
=======
 80025a0:	e002      	b.n	80025a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025a2:	887a      	ldrh	r2, [r7, #2]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <HAL_I2C_Init>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8002632:	b580      	push	{r7, lr}
 8002634:	b082      	sub	sp, #8
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d101      	bne.n	8002644 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e081      	b.n	8002748 <HAL_I2C_Init+0x116>
=======
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e081      	b.n	80026ca <HAL_I2C_Init+0x116>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
<<<<<<< HEAD
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b00      	cmp	r3, #0
 800264e:	d106      	bne.n	800265e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
=======
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d106      	bne.n	80025e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
<<<<<<< HEAD
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f7fe fa1f 	bl	8000a9c <HAL_I2C_MspInit>
=======
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f7fe fa48 	bl	8000a70 <HAL_I2C_MspInit>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
<<<<<<< HEAD
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2224      	movs	r2, #36	; 0x24
 8002662:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f022 0201 	bic.w	r2, r2, #1
 8002674:	601a      	str	r2, [r3, #0]
=======
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2224      	movs	r2, #36	; 0x24
 80025e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 0201 	bic.w	r2, r2, #1
 80025f6:	601a      	str	r2, [r3, #0]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
<<<<<<< HEAD
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685a      	ldr	r2, [r3, #4]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002682:	611a      	str	r2, [r3, #16]
=======
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685a      	ldr	r2, [r3, #4]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002604:	611a      	str	r2, [r3, #16]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
<<<<<<< HEAD
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689a      	ldr	r2, [r3, #8]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002692:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d107      	bne.n	80026ac <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026a8:	609a      	str	r2, [r3, #8]
 80026aa:	e006      	b.n	80026ba <HAL_I2C_Init+0x88>
=======
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	689a      	ldr	r2, [r3, #8]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002614:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d107      	bne.n	800262e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	689a      	ldr	r2, [r3, #8]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800262a:	609a      	str	r2, [r3, #8]
 800262c:	e006      	b.n	800263c <HAL_I2C_Init+0x88>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
<<<<<<< HEAD
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80026b8:	609a      	str	r2, [r3, #8]
=======
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800263a:	609a      	str	r2, [r3, #8]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
<<<<<<< HEAD
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d104      	bne.n	80026cc <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026ca:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	6812      	ldr	r2, [r2, #0]
 80026d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026de:	6053      	str	r3, [r2, #4]
=======
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	2b02      	cmp	r3, #2
 8002642:	d104      	bne.n	800264e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800264c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	6812      	ldr	r2, [r2, #0]
 8002658:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800265c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002660:	6053      	str	r3, [r2, #4]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
<<<<<<< HEAD
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68da      	ldr	r2, [r3, #12]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026ee:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	691a      	ldr	r2, [r3, #16]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	430a      	orrs	r2, r1
 8002708:	60da      	str	r2, [r3, #12]
=======
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68da      	ldr	r2, [r3, #12]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002670:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	691a      	ldr	r2, [r3, #16]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	430a      	orrs	r2, r1
 800268a:	60da      	str	r2, [r3, #12]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
<<<<<<< HEAD
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	69d9      	ldr	r1, [r3, #28]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a1a      	ldr	r2, [r3, #32]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f042 0201 	orr.w	r2, r2, #1
 8002728:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2220      	movs	r2, #32
 8002734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3708      	adds	r7, #8
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <HAL_I2CEx_ConfigAnalogFilter>:
=======
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	69d9      	ldr	r1, [r3, #28]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a1a      	ldr	r2, [r3, #32]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	430a      	orrs	r2, r1
 800269a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f042 0201 	orr.w	r2, r2, #1
 80026aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2220      	movs	r2, #32
 80026b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <HAL_I2CEx_ConfigAnalogFilter>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
<<<<<<< HEAD
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
=======
 80026d2:	b480      	push	{r7}
 80026d4:	b083      	sub	sp, #12
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
 80026da:	6039      	str	r1, [r7, #0]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
<<<<<<< HEAD
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b20      	cmp	r3, #32
 8002764:	d138      	bne.n	80027d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800276c:	2b01      	cmp	r3, #1
 800276e:	d101      	bne.n	8002774 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002770:	2302      	movs	r3, #2
 8002772:	e032      	b.n	80027da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2224      	movs	r2, #36	; 0x24
 8002780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f022 0201 	bic.w	r2, r2, #1
 8002792:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80027a2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6819      	ldr	r1, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f042 0201 	orr.w	r2, r2, #1
 80027c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2220      	movs	r2, #32
 80027c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027d4:	2300      	movs	r3, #0
 80027d6:	e000      	b.n	80027da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
=======
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b20      	cmp	r3, #32
 80026e6:	d138      	bne.n	800275a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d101      	bne.n	80026f6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80026f2:	2302      	movs	r3, #2
 80026f4:	e032      	b.n	800275c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2224      	movs	r2, #36	; 0x24
 8002702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 0201 	bic.w	r2, r2, #1
 8002714:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002724:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6819      	ldr	r1, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	430a      	orrs	r2, r1
 8002734:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f042 0201 	orr.w	r2, r2, #1
 8002744:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2220      	movs	r2, #32
 800274a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002756:	2300      	movs	r3, #0
 8002758:	e000      	b.n	800275c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 80027d8:	2302      	movs	r3, #2
  }
}
 80027da:	4618      	mov	r0, r3
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <HAL_I2CEx_ConfigDigitalFilter>:
=======
 800275a:	2302      	movs	r3, #2
  }
}
 800275c:	4618      	mov	r0, r3
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <HAL_I2CEx_ConfigDigitalFilter>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
<<<<<<< HEAD
 80027e6:	b480      	push	{r7}
 80027e8:	b085      	sub	sp, #20
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
 80027ee:	6039      	str	r1, [r7, #0]
=======
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
<<<<<<< HEAD
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b20      	cmp	r3, #32
 80027fa:	d139      	bne.n	8002870 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002802:	2b01      	cmp	r3, #1
 8002804:	d101      	bne.n	800280a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002806:	2302      	movs	r3, #2
 8002808:	e033      	b.n	8002872 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2224      	movs	r2, #36	; 0x24
 8002816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f022 0201 	bic.w	r2, r2, #1
 8002828:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002838:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	021b      	lsls	r3, r3, #8
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	4313      	orrs	r3, r2
 8002842:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f042 0201 	orr.w	r2, r2, #1
 800285a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2220      	movs	r2, #32
 8002860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800286c:	2300      	movs	r3, #0
 800286e:	e000      	b.n	8002872 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
=======
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b20      	cmp	r3, #32
 800277c:	d139      	bne.n	80027f2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002784:	2b01      	cmp	r3, #1
 8002786:	d101      	bne.n	800278c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002788:	2302      	movs	r3, #2
 800278a:	e033      	b.n	80027f4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2224      	movs	r2, #36	; 0x24
 8002798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f022 0201 	bic.w	r2, r2, #1
 80027aa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80027ba:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	021b      	lsls	r3, r3, #8
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f042 0201 	orr.w	r2, r2, #1
 80027dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2220      	movs	r2, #32
 80027e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027ee:	2300      	movs	r3, #0
 80027f0:	e000      	b.n	80027f4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8002870:	2302      	movs	r3, #2
  }
}
 8002872:	4618      	mov	r0, r3
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <HAL_PCD_Init>:
=======
 80027f2:	2302      	movs	r3, #2
  }
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3714      	adds	r7, #20
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <HAL_PCD_Init>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
<<<<<<< HEAD
 800287e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002880:	b08f      	sub	sp, #60	; 0x3c
 8002882:	af0a      	add	r7, sp, #40	; 0x28
 8002884:	6078      	str	r0, [r7, #4]
=======
 8002800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002802:	b08f      	sub	sp, #60	; 0x3c
 8002804:	af0a      	add	r7, sp, #40	; 0x28
 8002806:	6078      	str	r0, [r7, #4]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
<<<<<<< HEAD
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d101      	bne.n	8002890 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e116      	b.n	8002abe <HAL_PCD_Init+0x240>
=======
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e116      	b.n	8002a40 <HAL_PCD_Init+0x240>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
<<<<<<< HEAD
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d106      	bne.n	80028b0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
=======
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b00      	cmp	r3, #0
 8002822:	d106      	bne.n	8002832 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
<<<<<<< HEAD
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f7fe f996 	bl	8000bdc <HAL_PCD_MspInit>
=======
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f7fe f9bf 	bl	8000bb0 <HAL_PCD_MspInit>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
<<<<<<< HEAD
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2203      	movs	r2, #3
 80028b4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
=======
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2203      	movs	r2, #3
 8002836:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
<<<<<<< HEAD
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d102      	bne.n	80028ca <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	611a      	str	r2, [r3, #16]
=======
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800283e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002842:	2b00      	cmp	r3, #0
 8002844:	d102      	bne.n	800284c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	611a      	str	r2, [r3, #16]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
<<<<<<< HEAD
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f002 f866 	bl	80049a0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	603b      	str	r3, [r7, #0]
 80028da:	687e      	ldr	r6, [r7, #4]
 80028dc:	466d      	mov	r5, sp
 80028de:	f106 0410 	add.w	r4, r6, #16
 80028e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80028f2:	1d33      	adds	r3, r6, #4
 80028f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028f6:	6838      	ldr	r0, [r7, #0]
 80028f8:	f002 f826 	bl	8004948 <USB_CoreInit>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d005      	beq.n	800290e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2202      	movs	r2, #2
 8002906:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e0d7      	b.n	8002abe <HAL_PCD_Init+0x240>
=======
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4618      	mov	r0, r3
 8002852:	f002 f865 	bl	8004920 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	603b      	str	r3, [r7, #0]
 800285c:	687e      	ldr	r6, [r7, #4]
 800285e:	466d      	mov	r5, sp
 8002860:	f106 0410 	add.w	r4, r6, #16
 8002864:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002866:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002868:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800286a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800286c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002870:	e885 0003 	stmia.w	r5, {r0, r1}
 8002874:	1d33      	adds	r3, r6, #4
 8002876:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002878:	6838      	ldr	r0, [r7, #0]
 800287a:	f002 f825 	bl	80048c8 <USB_CoreInit>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d005      	beq.n	8002890 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2202      	movs	r2, #2
 8002888:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e0d7      	b.n	8002a40 <HAL_PCD_Init+0x240>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
<<<<<<< HEAD
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2100      	movs	r1, #0
 8002914:	4618      	mov	r0, r3
 8002916:	f002 f854 	bl	80049c2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800291a:	2300      	movs	r3, #0
 800291c:	73fb      	strb	r3, [r7, #15]
 800291e:	e04a      	b.n	80029b6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002920:	7bfa      	ldrb	r2, [r7, #15]
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	4613      	mov	r3, r2
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	4413      	add	r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	440b      	add	r3, r1
 800292e:	333d      	adds	r3, #61	; 0x3d
 8002930:	2201      	movs	r2, #1
 8002932:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002934:	7bfa      	ldrb	r2, [r7, #15]
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	4613      	mov	r3, r2
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	4413      	add	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	440b      	add	r3, r1
 8002942:	333c      	adds	r3, #60	; 0x3c
 8002944:	7bfa      	ldrb	r2, [r7, #15]
 8002946:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002948:	7bfa      	ldrb	r2, [r7, #15]
 800294a:	7bfb      	ldrb	r3, [r7, #15]
 800294c:	b298      	uxth	r0, r3
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	4613      	mov	r3, r2
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	4413      	add	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	440b      	add	r3, r1
 800295a:	3344      	adds	r3, #68	; 0x44
 800295c:	4602      	mov	r2, r0
 800295e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002960:	7bfa      	ldrb	r2, [r7, #15]
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	4613      	mov	r3, r2
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	4413      	add	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	440b      	add	r3, r1
 800296e:	3340      	adds	r3, #64	; 0x40
 8002970:	2200      	movs	r2, #0
 8002972:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
=======
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2100      	movs	r1, #0
 8002896:	4618      	mov	r0, r3
 8002898:	f002 f853 	bl	8004942 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800289c:	2300      	movs	r3, #0
 800289e:	73fb      	strb	r3, [r7, #15]
 80028a0:	e04a      	b.n	8002938 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028a2:	7bfa      	ldrb	r2, [r7, #15]
 80028a4:	6879      	ldr	r1, [r7, #4]
 80028a6:	4613      	mov	r3, r2
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	4413      	add	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	440b      	add	r3, r1
 80028b0:	333d      	adds	r3, #61	; 0x3d
 80028b2:	2201      	movs	r2, #1
 80028b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028b6:	7bfa      	ldrb	r2, [r7, #15]
 80028b8:	6879      	ldr	r1, [r7, #4]
 80028ba:	4613      	mov	r3, r2
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	4413      	add	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	440b      	add	r3, r1
 80028c4:	333c      	adds	r3, #60	; 0x3c
 80028c6:	7bfa      	ldrb	r2, [r7, #15]
 80028c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80028ca:	7bfa      	ldrb	r2, [r7, #15]
 80028cc:	7bfb      	ldrb	r3, [r7, #15]
 80028ce:	b298      	uxth	r0, r3
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	4613      	mov	r3, r2
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	4413      	add	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	440b      	add	r3, r1
 80028dc:	3344      	adds	r3, #68	; 0x44
 80028de:	4602      	mov	r2, r0
 80028e0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028e2:	7bfa      	ldrb	r2, [r7, #15]
 80028e4:	6879      	ldr	r1, [r7, #4]
 80028e6:	4613      	mov	r3, r2
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	4413      	add	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	440b      	add	r3, r1
 80028f0:	3340      	adds	r3, #64	; 0x40
 80028f2:	2200      	movs	r2, #0
 80028f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028f6:	7bfa      	ldrb	r2, [r7, #15]
 80028f8:	6879      	ldr	r1, [r7, #4]
 80028fa:	4613      	mov	r3, r2
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	4413      	add	r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	440b      	add	r3, r1
 8002904:	3348      	adds	r3, #72	; 0x48
 8002906:	2200      	movs	r2, #0
 8002908:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800290a:	7bfa      	ldrb	r2, [r7, #15]
 800290c:	6879      	ldr	r1, [r7, #4]
 800290e:	4613      	mov	r3, r2
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	4413      	add	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	440b      	add	r3, r1
 8002918:	334c      	adds	r3, #76	; 0x4c
 800291a:	2200      	movs	r2, #0
 800291c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800291e:	7bfa      	ldrb	r2, [r7, #15]
 8002920:	6879      	ldr	r1, [r7, #4]
 8002922:	4613      	mov	r3, r2
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	4413      	add	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	440b      	add	r3, r1
 800292c:	3354      	adds	r3, #84	; 0x54
 800292e:	2200      	movs	r2, #0
 8002930:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002932:	7bfb      	ldrb	r3, [r7, #15]
 8002934:	3301      	adds	r3, #1
 8002936:	73fb      	strb	r3, [r7, #15]
 8002938:	7bfa      	ldrb	r2, [r7, #15]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	429a      	cmp	r2, r3
 8002940:	d3af      	bcc.n	80028a2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002942:	2300      	movs	r3, #0
 8002944:	73fb      	strb	r3, [r7, #15]
 8002946:	e044      	b.n	80029d2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002948:	7bfa      	ldrb	r2, [r7, #15]
 800294a:	6879      	ldr	r1, [r7, #4]
 800294c:	4613      	mov	r3, r2
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	4413      	add	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	440b      	add	r3, r1
 8002956:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800295a:	2200      	movs	r2, #0
 800295c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800295e:	7bfa      	ldrb	r2, [r7, #15]
 8002960:	6879      	ldr	r1, [r7, #4]
 8002962:	4613      	mov	r3, r2
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	4413      	add	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	440b      	add	r3, r1
 800296c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002970:	7bfa      	ldrb	r2, [r7, #15]
 8002972:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
 8002974:	7bfa      	ldrb	r2, [r7, #15]
 8002976:	6879      	ldr	r1, [r7, #4]
 8002978:	4613      	mov	r3, r2
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	4413      	add	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	440b      	add	r3, r1
<<<<<<< HEAD
 8002982:	3348      	adds	r3, #72	; 0x48
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002988:	7bfa      	ldrb	r2, [r7, #15]
 800298a:	6879      	ldr	r1, [r7, #4]
 800298c:	4613      	mov	r3, r2
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	4413      	add	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	440b      	add	r3, r1
 8002996:	334c      	adds	r3, #76	; 0x4c
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800299c:	7bfa      	ldrb	r2, [r7, #15]
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	4613      	mov	r3, r2
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	4413      	add	r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	440b      	add	r3, r1
 80029aa:	3354      	adds	r3, #84	; 0x54
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029b0:	7bfb      	ldrb	r3, [r7, #15]
 80029b2:	3301      	adds	r3, #1
 80029b4:	73fb      	strb	r3, [r7, #15]
 80029b6:	7bfa      	ldrb	r2, [r7, #15]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d3af      	bcc.n	8002920 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029c0:	2300      	movs	r3, #0
 80029c2:	73fb      	strb	r3, [r7, #15]
 80029c4:	e044      	b.n	8002a50 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80029c6:	7bfa      	ldrb	r2, [r7, #15]
 80029c8:	6879      	ldr	r1, [r7, #4]
 80029ca:	4613      	mov	r3, r2
 80029cc:	00db      	lsls	r3, r3, #3
 80029ce:	4413      	add	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	440b      	add	r3, r1
 80029d4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80029d8:	2200      	movs	r2, #0
 80029da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80029dc:	7bfa      	ldrb	r2, [r7, #15]
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	4613      	mov	r3, r2
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	4413      	add	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	440b      	add	r3, r1
 80029ea:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80029ee:	7bfa      	ldrb	r2, [r7, #15]
 80029f0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029f2:	7bfa      	ldrb	r2, [r7, #15]
 80029f4:	6879      	ldr	r1, [r7, #4]
 80029f6:	4613      	mov	r3, r2
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	4413      	add	r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	440b      	add	r3, r1
 8002a00:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002a04:	2200      	movs	r2, #0
 8002a06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a08:	7bfa      	ldrb	r2, [r7, #15]
 8002a0a:	6879      	ldr	r1, [r7, #4]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	4413      	add	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	440b      	add	r3, r1
 8002a16:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a1e:	7bfa      	ldrb	r2, [r7, #15]
 8002a20:	6879      	ldr	r1, [r7, #4]
 8002a22:	4613      	mov	r3, r2
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	4413      	add	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	440b      	add	r3, r1
 8002a2c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a34:	7bfa      	ldrb	r2, [r7, #15]
 8002a36:	6879      	ldr	r1, [r7, #4]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	4413      	add	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	440b      	add	r3, r1
 8002a42:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002a46:	2200      	movs	r2, #0
 8002a48:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a4a:	7bfb      	ldrb	r3, [r7, #15]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	73fb      	strb	r3, [r7, #15]
 8002a50:	7bfa      	ldrb	r2, [r7, #15]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d3b5      	bcc.n	80029c6 <HAL_PCD_Init+0x148>
=======
 8002982:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002986:	2200      	movs	r2, #0
 8002988:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800298a:	7bfa      	ldrb	r2, [r7, #15]
 800298c:	6879      	ldr	r1, [r7, #4]
 800298e:	4613      	mov	r3, r2
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	4413      	add	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	440b      	add	r3, r1
 8002998:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029a0:	7bfa      	ldrb	r2, [r7, #15]
 80029a2:	6879      	ldr	r1, [r7, #4]
 80029a4:	4613      	mov	r3, r2
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	4413      	add	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	440b      	add	r3, r1
 80029ae:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80029b2:	2200      	movs	r2, #0
 80029b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029b6:	7bfa      	ldrb	r2, [r7, #15]
 80029b8:	6879      	ldr	r1, [r7, #4]
 80029ba:	4613      	mov	r3, r2
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	4413      	add	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	440b      	add	r3, r1
 80029c4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029cc:	7bfb      	ldrb	r3, [r7, #15]
 80029ce:	3301      	adds	r3, #1
 80029d0:	73fb      	strb	r3, [r7, #15]
 80029d2:	7bfa      	ldrb	r2, [r7, #15]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d3b5      	bcc.n	8002948 <HAL_PCD_Init+0x148>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
<<<<<<< HEAD
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	603b      	str	r3, [r7, #0]
 8002a60:	687e      	ldr	r6, [r7, #4]
 8002a62:	466d      	mov	r5, sp
 8002a64:	f106 0410 	add.w	r4, r6, #16
 8002a68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a70:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a74:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a78:	1d33      	adds	r3, r6, #4
 8002a7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a7c:	6838      	ldr	r0, [r7, #0]
 8002a7e:	f001 ffed 	bl	8004a5c <USB_DevInit>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d005      	beq.n	8002a94 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e014      	b.n	8002abe <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d102      	bne.n	8002ab2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f000 f80a 	bl	8002ac6 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f002 f999 	bl	8004dee <USB_DevDisconnect>

  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3714      	adds	r7, #20
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ac6 <HAL_PCDEx_ActivateLPM>:
=======
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	603b      	str	r3, [r7, #0]
 80029e2:	687e      	ldr	r6, [r7, #4]
 80029e4:	466d      	mov	r5, sp
 80029e6:	f106 0410 	add.w	r4, r6, #16
 80029ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80029fa:	1d33      	adds	r3, r6, #4
 80029fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029fe:	6838      	ldr	r0, [r7, #0]
 8002a00:	f001 ffec 	bl	80049dc <USB_DevInit>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d005      	beq.n	8002a16 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2202      	movs	r2, #2
 8002a0e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e014      	b.n	8002a40 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d102      	bne.n	8002a34 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 f80a 	bl	8002a48 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f002 f998 	bl	8004d6e <USB_DevDisconnect>

  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3714      	adds	r7, #20
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a48 <HAL_PCDEx_ActivateLPM>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
<<<<<<< HEAD
 8002ac6:	b480      	push	{r7}
 8002ac8:	b085      	sub	sp, #20
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002af8:	f043 0303 	orr.w	r3, r3, #3
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3714      	adds	r7, #20
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
	...

08002b10 <HAL_PWREx_GetVoltageRange>:
=======
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	f043 0303 	orr.w	r3, r3, #3
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3714      	adds	r7, #20
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <HAL_PWREx_GetVoltageRange>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
<<<<<<< HEAD
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
=======
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
<<<<<<< HEAD
 8002b14:	4b04      	ldr	r3, [pc, #16]	; (8002b28 <HAL_PWREx_GetVoltageRange+0x18>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	40007000 	.word	0x40007000

08002b2c <HAL_PWREx_ControlVoltageScaling>:
=======
 8002a94:	4b04      	ldr	r3, [pc, #16]	; (8002aa8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	40007000 	.word	0x40007000

08002aac <HAL_PWREx_ControlVoltageScaling>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
<<<<<<< HEAD
 8002b2c:	b480      	push	{r7}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
=======
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
<<<<<<< HEAD
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b3a:	d130      	bne.n	8002b9e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b3c:	4b23      	ldr	r3, [pc, #140]	; (8002bcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b48:	d038      	beq.n	8002bbc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b4a:	4b20      	ldr	r3, [pc, #128]	; (8002bcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b52:	4a1e      	ldr	r2, [pc, #120]	; (8002bcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b58:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b5a:	4b1d      	ldr	r3, [pc, #116]	; (8002bd0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2232      	movs	r2, #50	; 0x32
 8002b60:	fb02 f303 	mul.w	r3, r2, r3
 8002b64:	4a1b      	ldr	r2, [pc, #108]	; (8002bd4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b66:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6a:	0c9b      	lsrs	r3, r3, #18
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b70:	e002      	b.n	8002b78 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	3b01      	subs	r3, #1
 8002b76:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b78:	4b14      	ldr	r3, [pc, #80]	; (8002bcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b7a:	695b      	ldr	r3, [r3, #20]
 8002b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b84:	d102      	bne.n	8002b8c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d1f2      	bne.n	8002b72 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b8c:	4b0f      	ldr	r3, [pc, #60]	; (8002bcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b8e:	695b      	ldr	r3, [r3, #20]
 8002b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b98:	d110      	bne.n	8002bbc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e00f      	b.n	8002bbe <HAL_PWREx_ControlVoltageScaling+0x92>
=======
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002aba:	d130      	bne.n	8002b1e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002abc:	4b23      	ldr	r3, [pc, #140]	; (8002b4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ac4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ac8:	d038      	beq.n	8002b3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002aca:	4b20      	ldr	r3, [pc, #128]	; (8002b4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ad2:	4a1e      	ldr	r2, [pc, #120]	; (8002b4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ad4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ad8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ada:	4b1d      	ldr	r3, [pc, #116]	; (8002b50 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2232      	movs	r2, #50	; 0x32
 8002ae0:	fb02 f303 	mul.w	r3, r2, r3
 8002ae4:	4a1b      	ldr	r2, [pc, #108]	; (8002b54 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aea:	0c9b      	lsrs	r3, r3, #18
 8002aec:	3301      	adds	r3, #1
 8002aee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002af0:	e002      	b.n	8002af8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	3b01      	subs	r3, #1
 8002af6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002af8:	4b14      	ldr	r3, [pc, #80]	; (8002b4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b04:	d102      	bne.n	8002b0c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d1f2      	bne.n	8002af2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b0c:	4b0f      	ldr	r3, [pc, #60]	; (8002b4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b0e:	695b      	ldr	r3, [r3, #20]
 8002b10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b18:	d110      	bne.n	8002b3c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e00f      	b.n	8002b3e <HAL_PWREx_ControlVoltageScaling+0x92>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
<<<<<<< HEAD
 8002b9e:	4b0b      	ldr	r3, [pc, #44]	; (8002bcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ba6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002baa:	d007      	beq.n	8002bbc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002bac:	4b07      	ldr	r3, [pc, #28]	; (8002bcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002bb4:	4a05      	ldr	r2, [pc, #20]	; (8002bcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bba:	6013      	str	r3, [r2, #0]
=======
 8002b1e:	4b0b      	ldr	r3, [pc, #44]	; (8002b4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b2a:	d007      	beq.n	8002b3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b2c:	4b07      	ldr	r3, [pc, #28]	; (8002b4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b34:	4a05      	ldr	r2, [pc, #20]	; (8002b4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b3a:	6013      	str	r3, [r2, #0]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
<<<<<<< HEAD
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3714      	adds	r7, #20
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	40007000 	.word	0x40007000
 8002bd0:	20000000 	.word	0x20000000
 8002bd4:	431bde83 	.word	0x431bde83

08002bd8 <HAL_PWREx_EnableVddUSB>:
=======
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3714      	adds	r7, #20
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	40007000 	.word	0x40007000
 8002b50:	20000000 	.word	0x20000000
 8002b54:	431bde83 	.word	0x431bde83

08002b58 <HAL_PWREx_EnableVddUSB>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
<<<<<<< HEAD
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002bdc:	4b05      	ldr	r3, [pc, #20]	; (8002bf4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	4a04      	ldr	r2, [pc, #16]	; (8002bf4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002be2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002be6:	6053      	str	r3, [r2, #4]
}
 8002be8:	bf00      	nop
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	40007000 	.word	0x40007000

08002bf8 <HAL_RCC_OscConfig>:
=======
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002b5c:	4b05      	ldr	r3, [pc, #20]	; (8002b74 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	4a04      	ldr	r2, [pc, #16]	; (8002b74 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002b62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b66:	6053      	str	r3, [r2, #4]
}
 8002b68:	bf00      	nop
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	40007000 	.word	0x40007000

08002b78 <HAL_RCC_OscConfig>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b088      	sub	sp, #32
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
=======
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b088      	sub	sp, #32
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
<<<<<<< HEAD
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d102      	bne.n	8002c0c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	f000 bc08 	b.w	800341c <HAL_RCC_OscConfig+0x824>
=======
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d102      	bne.n	8002b8c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	f000 bc08 	b.w	800339c <HAL_RCC_OscConfig+0x824>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
<<<<<<< HEAD
 8002c0c:	4b96      	ldr	r3, [pc, #600]	; (8002e68 <HAL_RCC_OscConfig+0x270>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f003 030c 	and.w	r3, r3, #12
 8002c14:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c16:	4b94      	ldr	r3, [pc, #592]	; (8002e68 <HAL_RCC_OscConfig+0x270>)
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	f003 0303 	and.w	r3, r3, #3
 8002c1e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0310 	and.w	r3, r3, #16
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 80e4 	beq.w	8002df6 <HAL_RCC_OscConfig+0x1fe>
=======
 8002b8c:	4b96      	ldr	r3, [pc, #600]	; (8002de8 <HAL_RCC_OscConfig+0x270>)
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f003 030c 	and.w	r3, r3, #12
 8002b94:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b96:	4b94      	ldr	r3, [pc, #592]	; (8002de8 <HAL_RCC_OscConfig+0x270>)
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	f003 0303 	and.w	r3, r3, #3
 8002b9e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0310 	and.w	r3, r3, #16
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f000 80e4 	beq.w	8002d76 <HAL_RCC_OscConfig+0x1fe>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
<<<<<<< HEAD
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d007      	beq.n	8002c44 <HAL_RCC_OscConfig+0x4c>
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	2b0c      	cmp	r3, #12
 8002c38:	f040 808b 	bne.w	8002d52 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	f040 8087 	bne.w	8002d52 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c44:	4b88      	ldr	r3, [pc, #544]	; (8002e68 <HAL_RCC_OscConfig+0x270>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d005      	beq.n	8002c5c <HAL_RCC_OscConfig+0x64>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d101      	bne.n	8002c5c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e3df      	b.n	800341c <HAL_RCC_OscConfig+0x824>
=======
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d007      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x4c>
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	2b0c      	cmp	r3, #12
 8002bb8:	f040 808b 	bne.w	8002cd2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	f040 8087 	bne.w	8002cd2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bc4:	4b88      	ldr	r3, [pc, #544]	; (8002de8 <HAL_RCC_OscConfig+0x270>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d005      	beq.n	8002bdc <HAL_RCC_OscConfig+0x64>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d101      	bne.n	8002bdc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e3df      	b.n	800339c <HAL_RCC_OscConfig+0x824>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
<<<<<<< HEAD
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a1a      	ldr	r2, [r3, #32]
 8002c60:	4b81      	ldr	r3, [pc, #516]	; (8002e68 <HAL_RCC_OscConfig+0x270>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0308 	and.w	r3, r3, #8
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d004      	beq.n	8002c76 <HAL_RCC_OscConfig+0x7e>
 8002c6c:	4b7e      	ldr	r3, [pc, #504]	; (8002e68 <HAL_RCC_OscConfig+0x270>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c74:	e005      	b.n	8002c82 <HAL_RCC_OscConfig+0x8a>
 8002c76:	4b7c      	ldr	r3, [pc, #496]	; (8002e68 <HAL_RCC_OscConfig+0x270>)
 8002c78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c7c:	091b      	lsrs	r3, r3, #4
 8002c7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d223      	bcs.n	8002cce <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f000 fdae 	bl	80037ec <RCC_SetFlashLatencyFromMSIRange>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e3c0      	b.n	800341c <HAL_RCC_OscConfig+0x824>
=======
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a1a      	ldr	r2, [r3, #32]
 8002be0:	4b81      	ldr	r3, [pc, #516]	; (8002de8 <HAL_RCC_OscConfig+0x270>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0308 	and.w	r3, r3, #8
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d004      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x7e>
 8002bec:	4b7e      	ldr	r3, [pc, #504]	; (8002de8 <HAL_RCC_OscConfig+0x270>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bf4:	e005      	b.n	8002c02 <HAL_RCC_OscConfig+0x8a>
 8002bf6:	4b7c      	ldr	r3, [pc, #496]	; (8002de8 <HAL_RCC_OscConfig+0x270>)
 8002bf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bfc:	091b      	lsrs	r3, r3, #4
 8002bfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d223      	bcs.n	8002c4e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 fdae 	bl	800376c <RCC_SetFlashLatencyFromMSIRange>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e3c0      	b.n	800339c <HAL_RCC_OscConfig+0x824>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
<<<<<<< HEAD
 8002c9a:	4b73      	ldr	r3, [pc, #460]	; (8002e68 <HAL_RCC_OscConfig+0x270>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a72      	ldr	r2, [pc, #456]	; (8002e68 <HAL_RCC_OscConfig+0x270>)
 8002ca0:	f043 0308 	orr.w	r3, r3, #8
 8002ca4:	6013      	str	r3, [r2, #0]
 8002ca6:	4b70      	ldr	r3, [pc, #448]	; (8002e68 <HAL_RCC_OscConfig+0x270>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	496d      	ldr	r1, [pc, #436]	; (8002e68 <HAL_RCC_OscConfig+0x270>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cb8:	4b6b      	ldr	r3, [pc, #428]	; (8002e68 <HAL_RCC_OscConfig+0x270>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	69db      	ldr	r3, [r3, #28]
 8002cc4:	021b      	lsls	r3, r3, #8
 8002cc6:	4968      	ldr	r1, [pc, #416]	; (8002e68 <HAL_RCC_OscConfig+0x270>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	604b      	str	r3, [r1, #4]
 8002ccc:	e025      	b.n	8002d1a <HAL_RCC_OscConfig+0x122>
=======
 8002c1a:	4b73      	ldr	r3, [pc, #460]	; (8002de8 <HAL_RCC_OscConfig+0x270>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a72      	ldr	r2, [pc, #456]	; (8002de8 <HAL_RCC_OscConfig+0x270>)
 8002c20:	f043 0308 	orr.w	r3, r3, #8
 8002c24:	6013      	str	r3, [r2, #0]
 8002c26:	4b70      	ldr	r3, [pc, #448]	; (8002de8 <HAL_RCC_OscConfig+0x270>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	496d      	ldr	r1, [pc, #436]	; (8002de8 <HAL_RCC_OscConfig+0x270>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c38:	4b6b      	ldr	r3, [pc, #428]	; (8002de8 <HAL_RCC_OscConfig+0x270>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	69db      	ldr	r3, [r3, #28]
 8002c44:	021b      	lsls	r3, r3, #8
 8002c46:	4968      	ldr	r1, [pc, #416]	; (8002de8 <HAL_RCC_OscConfig+0x270>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	604b      	str	r3, [r1, #4]
 8002c4c:	e025      	b.n	8002c9a <HAL_RCC_OscConfig+0x122>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
<<<<<<< HEAD
 8002cce:	4b66      	ldr	r3, [pc, #408]	; (8002e68 <HAL_RCC_OscConfig+0x270>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a65      	ldr	r2, [pc, #404]	; (8002e68 <HAL_RCC_OscConfig+0x270>)
 8002cd4:	f043 0308 	orr.w	r3, r3, #8
 8002cd8:	6013      	str	r3, [r2, #0]
 8002cda:	4b63      	ldr	r3, [pc, #396]	; (8002e68 <HAL_RCC_OscConfig+0x270>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	4960      	ldr	r1, [pc, #384]	; (8002e68 <HAL_RCC_OscConfig+0x270>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cec:	4b5e      	ldr	r3, [pc, #376]	; (8002e68 <HAL_RCC_OscConfig+0x270>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	69db      	ldr	r3, [r3, #28]
 8002cf8:	021b      	lsls	r3, r3, #8
 8002cfa:	495b      	ldr	r1, [pc, #364]	; (8002e68 <HAL_RCC_OscConfig+0x270>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	604b      	str	r3, [r1, #4]
=======
 8002c4e:	4b66      	ldr	r3, [pc, #408]	; (8002de8 <HAL_RCC_OscConfig+0x270>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a65      	ldr	r2, [pc, #404]	; (8002de8 <HAL_RCC_OscConfig+0x270>)
 8002c54:	f043 0308 	orr.w	r3, r3, #8
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	4b63      	ldr	r3, [pc, #396]	; (8002de8 <HAL_RCC_OscConfig+0x270>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	4960      	ldr	r1, [pc, #384]	; (8002de8 <HAL_RCC_OscConfig+0x270>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c6c:	4b5e      	ldr	r3, [pc, #376]	; (8002de8 <HAL_RCC_OscConfig+0x270>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	69db      	ldr	r3, [r3, #28]
 8002c78:	021b      	lsls	r3, r3, #8
 8002c7a:	495b      	ldr	r1, [pc, #364]	; (8002de8 <HAL_RCC_OscConfig+0x270>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	604b      	str	r3, [r1, #4]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
<<<<<<< HEAD
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d109      	bne.n	8002d1a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 fd6e 	bl	80037ec <RCC_SetFlashLatencyFromMSIRange>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e380      	b.n	800341c <HAL_RCC_OscConfig+0x824>
=======
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d109      	bne.n	8002c9a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f000 fd6e 	bl	800376c <RCC_SetFlashLatencyFromMSIRange>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e380      	b.n	800339c <HAL_RCC_OscConfig+0x824>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
<<<<<<< HEAD
 8002d1a:	f000 fc87 	bl	800362c <HAL_RCC_GetSysClockFreq>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	4b51      	ldr	r3, [pc, #324]	; (8002e68 <HAL_RCC_OscConfig+0x270>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	091b      	lsrs	r3, r3, #4
 8002d26:	f003 030f 	and.w	r3, r3, #15
 8002d2a:	4950      	ldr	r1, [pc, #320]	; (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002d2c:	5ccb      	ldrb	r3, [r1, r3]
 8002d2e:	f003 031f 	and.w	r3, r3, #31
 8002d32:	fa22 f303 	lsr.w	r3, r2, r3
 8002d36:	4a4e      	ldr	r2, [pc, #312]	; (8002e70 <HAL_RCC_OscConfig+0x278>)
 8002d38:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002d3a:	4b4e      	ldr	r3, [pc, #312]	; (8002e74 <HAL_RCC_OscConfig+0x27c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7fd ffb8 	bl	8000cb4 <HAL_InitTick>
 8002d44:	4603      	mov	r3, r0
 8002d46:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002d48:	7bfb      	ldrb	r3, [r7, #15]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d052      	beq.n	8002df4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002d4e:	7bfb      	ldrb	r3, [r7, #15]
 8002d50:	e364      	b.n	800341c <HAL_RCC_OscConfig+0x824>
=======
 8002c9a:	f000 fc87 	bl	80035ac <HAL_RCC_GetSysClockFreq>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	4b51      	ldr	r3, [pc, #324]	; (8002de8 <HAL_RCC_OscConfig+0x270>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	091b      	lsrs	r3, r3, #4
 8002ca6:	f003 030f 	and.w	r3, r3, #15
 8002caa:	4950      	ldr	r1, [pc, #320]	; (8002dec <HAL_RCC_OscConfig+0x274>)
 8002cac:	5ccb      	ldrb	r3, [r1, r3]
 8002cae:	f003 031f 	and.w	r3, r3, #31
 8002cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8002cb6:	4a4e      	ldr	r2, [pc, #312]	; (8002df0 <HAL_RCC_OscConfig+0x278>)
 8002cb8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002cba:	4b4e      	ldr	r3, [pc, #312]	; (8002df4 <HAL_RCC_OscConfig+0x27c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7fd ffe2 	bl	8000c88 <HAL_InitTick>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002cc8:	7bfb      	ldrb	r3, [r7, #15]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d052      	beq.n	8002d74 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002cce:	7bfb      	ldrb	r3, [r7, #15]
 8002cd0:	e364      	b.n	800339c <HAL_RCC_OscConfig+0x824>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
<<<<<<< HEAD
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d032      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d5a:	4b43      	ldr	r3, [pc, #268]	; (8002e68 <HAL_RCC_OscConfig+0x270>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a42      	ldr	r2, [pc, #264]	; (8002e68 <HAL_RCC_OscConfig+0x270>)
 8002d60:	f043 0301 	orr.w	r3, r3, #1
 8002d64:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d66:	f7fe f8af 	bl	8000ec8 <HAL_GetTick>
 8002d6a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d6c:	e008      	b.n	8002d80 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d6e:	f7fe f8ab 	bl	8000ec8 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e34d      	b.n	800341c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d80:	4b39      	ldr	r3, [pc, #228]	; (8002e68 <HAL_RCC_OscConfig+0x270>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d0f0      	beq.n	8002d6e <HAL_RCC_OscConfig+0x176>
=======
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d032      	beq.n	8002d40 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002cda:	4b43      	ldr	r3, [pc, #268]	; (8002de8 <HAL_RCC_OscConfig+0x270>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a42      	ldr	r2, [pc, #264]	; (8002de8 <HAL_RCC_OscConfig+0x270>)
 8002ce0:	f043 0301 	orr.w	r3, r3, #1
 8002ce4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ce6:	f7fe f8d1 	bl	8000e8c <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cec:	e008      	b.n	8002d00 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cee:	f7fe f8cd 	bl	8000e8c <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e34d      	b.n	800339c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d00:	4b39      	ldr	r3, [pc, #228]	; (8002de8 <HAL_RCC_OscConfig+0x270>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d0f0      	beq.n	8002cee <HAL_RCC_OscConfig+0x176>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
<<<<<<< HEAD
 8002d8c:	4b36      	ldr	r3, [pc, #216]	; (8002e68 <HAL_RCC_OscConfig+0x270>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a35      	ldr	r2, [pc, #212]	; (8002e68 <HAL_RCC_OscConfig+0x270>)
 8002d92:	f043 0308 	orr.w	r3, r3, #8
 8002d96:	6013      	str	r3, [r2, #0]
 8002d98:	4b33      	ldr	r3, [pc, #204]	; (8002e68 <HAL_RCC_OscConfig+0x270>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	4930      	ldr	r1, [pc, #192]	; (8002e68 <HAL_RCC_OscConfig+0x270>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002daa:	4b2f      	ldr	r3, [pc, #188]	; (8002e68 <HAL_RCC_OscConfig+0x270>)
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	021b      	lsls	r3, r3, #8
 8002db8:	492b      	ldr	r1, [pc, #172]	; (8002e68 <HAL_RCC_OscConfig+0x270>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	604b      	str	r3, [r1, #4]
 8002dbe:	e01a      	b.n	8002df6 <HAL_RCC_OscConfig+0x1fe>
=======
 8002d0c:	4b36      	ldr	r3, [pc, #216]	; (8002de8 <HAL_RCC_OscConfig+0x270>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a35      	ldr	r2, [pc, #212]	; (8002de8 <HAL_RCC_OscConfig+0x270>)
 8002d12:	f043 0308 	orr.w	r3, r3, #8
 8002d16:	6013      	str	r3, [r2, #0]
 8002d18:	4b33      	ldr	r3, [pc, #204]	; (8002de8 <HAL_RCC_OscConfig+0x270>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	4930      	ldr	r1, [pc, #192]	; (8002de8 <HAL_RCC_OscConfig+0x270>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d2a:	4b2f      	ldr	r3, [pc, #188]	; (8002de8 <HAL_RCC_OscConfig+0x270>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	021b      	lsls	r3, r3, #8
 8002d38:	492b      	ldr	r1, [pc, #172]	; (8002de8 <HAL_RCC_OscConfig+0x270>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	604b      	str	r3, [r1, #4]
 8002d3e:	e01a      	b.n	8002d76 <HAL_RCC_OscConfig+0x1fe>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
<<<<<<< HEAD
 8002dc0:	4b29      	ldr	r3, [pc, #164]	; (8002e68 <HAL_RCC_OscConfig+0x270>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a28      	ldr	r2, [pc, #160]	; (8002e68 <HAL_RCC_OscConfig+0x270>)
 8002dc6:	f023 0301 	bic.w	r3, r3, #1
 8002dca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002dcc:	f7fe f87c 	bl	8000ec8 <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002dd4:	f7fe f878 	bl	8000ec8 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e31a      	b.n	800341c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002de6:	4b20      	ldr	r3, [pc, #128]	; (8002e68 <HAL_RCC_OscConfig+0x270>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1f0      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x1dc>
 8002df2:	e000      	b.n	8002df6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002df4:	bf00      	nop
=======
 8002d40:	4b29      	ldr	r3, [pc, #164]	; (8002de8 <HAL_RCC_OscConfig+0x270>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a28      	ldr	r2, [pc, #160]	; (8002de8 <HAL_RCC_OscConfig+0x270>)
 8002d46:	f023 0301 	bic.w	r3, r3, #1
 8002d4a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d4c:	f7fe f89e 	bl	8000e8c <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d52:	e008      	b.n	8002d66 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d54:	f7fe f89a 	bl	8000e8c <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e31a      	b.n	800339c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d66:	4b20      	ldr	r3, [pc, #128]	; (8002de8 <HAL_RCC_OscConfig+0x270>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1f0      	bne.n	8002d54 <HAL_RCC_OscConfig+0x1dc>
 8002d72:	e000      	b.n	8002d76 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d74:	bf00      	nop
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d073      	beq.n	8002eea <HAL_RCC_OscConfig+0x2f2>
=======
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d073      	beq.n	8002e6a <HAL_RCC_OscConfig+0x2f2>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
<<<<<<< HEAD
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	2b08      	cmp	r3, #8
 8002e06:	d005      	beq.n	8002e14 <HAL_RCC_OscConfig+0x21c>
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	2b0c      	cmp	r3, #12
 8002e0c:	d10e      	bne.n	8002e2c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	2b03      	cmp	r3, #3
 8002e12:	d10b      	bne.n	8002e2c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e14:	4b14      	ldr	r3, [pc, #80]	; (8002e68 <HAL_RCC_OscConfig+0x270>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d063      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x2f0>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d15f      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e2f7      	b.n	800341c <HAL_RCC_OscConfig+0x824>
=======
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	2b08      	cmp	r3, #8
 8002d86:	d005      	beq.n	8002d94 <HAL_RCC_OscConfig+0x21c>
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	2b0c      	cmp	r3, #12
 8002d8c:	d10e      	bne.n	8002dac <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	2b03      	cmp	r3, #3
 8002d92:	d10b      	bne.n	8002dac <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d94:	4b14      	ldr	r3, [pc, #80]	; (8002de8 <HAL_RCC_OscConfig+0x270>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d063      	beq.n	8002e68 <HAL_RCC_OscConfig+0x2f0>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d15f      	bne.n	8002e68 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e2f7      	b.n	800339c <HAL_RCC_OscConfig+0x824>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e34:	d106      	bne.n	8002e44 <HAL_RCC_OscConfig+0x24c>
 8002e36:	4b0c      	ldr	r3, [pc, #48]	; (8002e68 <HAL_RCC_OscConfig+0x270>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a0b      	ldr	r2, [pc, #44]	; (8002e68 <HAL_RCC_OscConfig+0x270>)
 8002e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e40:	6013      	str	r3, [r2, #0]
 8002e42:	e025      	b.n	8002e90 <HAL_RCC_OscConfig+0x298>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e4c:	d114      	bne.n	8002e78 <HAL_RCC_OscConfig+0x280>
 8002e4e:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <HAL_RCC_OscConfig+0x270>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a05      	ldr	r2, [pc, #20]	; (8002e68 <HAL_RCC_OscConfig+0x270>)
 8002e54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e58:	6013      	str	r3, [r2, #0]
 8002e5a:	4b03      	ldr	r3, [pc, #12]	; (8002e68 <HAL_RCC_OscConfig+0x270>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a02      	ldr	r2, [pc, #8]	; (8002e68 <HAL_RCC_OscConfig+0x270>)
 8002e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e64:	6013      	str	r3, [r2, #0]
 8002e66:	e013      	b.n	8002e90 <HAL_RCC_OscConfig+0x298>
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	08007d24 	.word	0x08007d24
 8002e70:	20000000 	.word	0x20000000
 8002e74:	20000004 	.word	0x20000004
 8002e78:	4ba0      	ldr	r3, [pc, #640]	; (80030fc <HAL_RCC_OscConfig+0x504>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a9f      	ldr	r2, [pc, #636]	; (80030fc <HAL_RCC_OscConfig+0x504>)
 8002e7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e82:	6013      	str	r3, [r2, #0]
 8002e84:	4b9d      	ldr	r3, [pc, #628]	; (80030fc <HAL_RCC_OscConfig+0x504>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a9c      	ldr	r2, [pc, #624]	; (80030fc <HAL_RCC_OscConfig+0x504>)
 8002e8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d013      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e98:	f7fe f816 	bl	8000ec8 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ea0:	f7fe f812 	bl	8000ec8 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b64      	cmp	r3, #100	; 0x64
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e2b4      	b.n	800341c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002eb2:	4b92      	ldr	r3, [pc, #584]	; (80030fc <HAL_RCC_OscConfig+0x504>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0f0      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x2a8>
 8002ebe:	e014      	b.n	8002eea <HAL_RCC_OscConfig+0x2f2>
=======
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002db4:	d106      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x24c>
 8002db6:	4b0c      	ldr	r3, [pc, #48]	; (8002de8 <HAL_RCC_OscConfig+0x270>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a0b      	ldr	r2, [pc, #44]	; (8002de8 <HAL_RCC_OscConfig+0x270>)
 8002dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dc0:	6013      	str	r3, [r2, #0]
 8002dc2:	e025      	b.n	8002e10 <HAL_RCC_OscConfig+0x298>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dcc:	d114      	bne.n	8002df8 <HAL_RCC_OscConfig+0x280>
 8002dce:	4b06      	ldr	r3, [pc, #24]	; (8002de8 <HAL_RCC_OscConfig+0x270>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a05      	ldr	r2, [pc, #20]	; (8002de8 <HAL_RCC_OscConfig+0x270>)
 8002dd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dd8:	6013      	str	r3, [r2, #0]
 8002dda:	4b03      	ldr	r3, [pc, #12]	; (8002de8 <HAL_RCC_OscConfig+0x270>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a02      	ldr	r2, [pc, #8]	; (8002de8 <HAL_RCC_OscConfig+0x270>)
 8002de0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de4:	6013      	str	r3, [r2, #0]
 8002de6:	e013      	b.n	8002e10 <HAL_RCC_OscConfig+0x298>
 8002de8:	40021000 	.word	0x40021000
 8002dec:	08007ccc 	.word	0x08007ccc
 8002df0:	20000000 	.word	0x20000000
 8002df4:	20000004 	.word	0x20000004
 8002df8:	4ba0      	ldr	r3, [pc, #640]	; (800307c <HAL_RCC_OscConfig+0x504>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a9f      	ldr	r2, [pc, #636]	; (800307c <HAL_RCC_OscConfig+0x504>)
 8002dfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e02:	6013      	str	r3, [r2, #0]
 8002e04:	4b9d      	ldr	r3, [pc, #628]	; (800307c <HAL_RCC_OscConfig+0x504>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a9c      	ldr	r2, [pc, #624]	; (800307c <HAL_RCC_OscConfig+0x504>)
 8002e0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d013      	beq.n	8002e40 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e18:	f7fe f838 	bl	8000e8c <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e20:	f7fe f834 	bl	8000e8c <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b64      	cmp	r3, #100	; 0x64
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e2b4      	b.n	800339c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e32:	4b92      	ldr	r3, [pc, #584]	; (800307c <HAL_RCC_OscConfig+0x504>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d0f0      	beq.n	8002e20 <HAL_RCC_OscConfig+0x2a8>
 8002e3e:	e014      	b.n	8002e6a <HAL_RCC_OscConfig+0x2f2>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 8002ec0:	f7fe f802 	bl	8000ec8 <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ec8:	f7fd fffe 	bl	8000ec8 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b64      	cmp	r3, #100	; 0x64
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e2a0      	b.n	800341c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002eda:	4b88      	ldr	r3, [pc, #544]	; (80030fc <HAL_RCC_OscConfig+0x504>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1f0      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x2d0>
 8002ee6:	e000      	b.n	8002eea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ee8:	bf00      	nop
=======
 8002e40:	f7fe f824 	bl	8000e8c <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e48:	f7fe f820 	bl	8000e8c <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b64      	cmp	r3, #100	; 0x64
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e2a0      	b.n	800339c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e5a:	4b88      	ldr	r3, [pc, #544]	; (800307c <HAL_RCC_OscConfig+0x504>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1f0      	bne.n	8002e48 <HAL_RCC_OscConfig+0x2d0>
 8002e66:	e000      	b.n	8002e6a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e68:	bf00      	nop
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d060      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x3c0>
=======
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d060      	beq.n	8002f38 <HAL_RCC_OscConfig+0x3c0>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
<<<<<<< HEAD
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	2b04      	cmp	r3, #4
 8002efa:	d005      	beq.n	8002f08 <HAL_RCC_OscConfig+0x310>
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	2b0c      	cmp	r3, #12
 8002f00:	d119      	bne.n	8002f36 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d116      	bne.n	8002f36 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f08:	4b7c      	ldr	r3, [pc, #496]	; (80030fc <HAL_RCC_OscConfig+0x504>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d005      	beq.n	8002f20 <HAL_RCC_OscConfig+0x328>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e27d      	b.n	800341c <HAL_RCC_OscConfig+0x824>
=======
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	2b04      	cmp	r3, #4
 8002e7a:	d005      	beq.n	8002e88 <HAL_RCC_OscConfig+0x310>
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	2b0c      	cmp	r3, #12
 8002e80:	d119      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d116      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e88:	4b7c      	ldr	r3, [pc, #496]	; (800307c <HAL_RCC_OscConfig+0x504>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d005      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x328>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d101      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e27d      	b.n	800339c <HAL_RCC_OscConfig+0x824>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8002f20:	4b76      	ldr	r3, [pc, #472]	; (80030fc <HAL_RCC_OscConfig+0x504>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	061b      	lsls	r3, r3, #24
 8002f2e:	4973      	ldr	r1, [pc, #460]	; (80030fc <HAL_RCC_OscConfig+0x504>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f34:	e040      	b.n	8002fb8 <HAL_RCC_OscConfig+0x3c0>
=======
 8002ea0:	4b76      	ldr	r3, [pc, #472]	; (800307c <HAL_RCC_OscConfig+0x504>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	061b      	lsls	r3, r3, #24
 8002eae:	4973      	ldr	r1, [pc, #460]	; (800307c <HAL_RCC_OscConfig+0x504>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002eb4:	e040      	b.n	8002f38 <HAL_RCC_OscConfig+0x3c0>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
<<<<<<< HEAD
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d023      	beq.n	8002f86 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f3e:	4b6f      	ldr	r3, [pc, #444]	; (80030fc <HAL_RCC_OscConfig+0x504>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a6e      	ldr	r2, [pc, #440]	; (80030fc <HAL_RCC_OscConfig+0x504>)
 8002f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f4a:	f7fd ffbd 	bl	8000ec8 <HAL_GetTick>
 8002f4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f50:	e008      	b.n	8002f64 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f52:	f7fd ffb9 	bl	8000ec8 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e25b      	b.n	800341c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f64:	4b65      	ldr	r3, [pc, #404]	; (80030fc <HAL_RCC_OscConfig+0x504>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d0f0      	beq.n	8002f52 <HAL_RCC_OscConfig+0x35a>
=======
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d023      	beq.n	8002f06 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ebe:	4b6f      	ldr	r3, [pc, #444]	; (800307c <HAL_RCC_OscConfig+0x504>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a6e      	ldr	r2, [pc, #440]	; (800307c <HAL_RCC_OscConfig+0x504>)
 8002ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ec8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eca:	f7fd ffdf 	bl	8000e8c <HAL_GetTick>
 8002ece:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ed0:	e008      	b.n	8002ee4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ed2:	f7fd ffdb 	bl	8000e8c <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d901      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e25b      	b.n	800339c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ee4:	4b65      	ldr	r3, [pc, #404]	; (800307c <HAL_RCC_OscConfig+0x504>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d0f0      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x35a>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8002f70:	4b62      	ldr	r3, [pc, #392]	; (80030fc <HAL_RCC_OscConfig+0x504>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	061b      	lsls	r3, r3, #24
 8002f7e:	495f      	ldr	r1, [pc, #380]	; (80030fc <HAL_RCC_OscConfig+0x504>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	604b      	str	r3, [r1, #4]
 8002f84:	e018      	b.n	8002fb8 <HAL_RCC_OscConfig+0x3c0>
=======
 8002ef0:	4b62      	ldr	r3, [pc, #392]	; (800307c <HAL_RCC_OscConfig+0x504>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	691b      	ldr	r3, [r3, #16]
 8002efc:	061b      	lsls	r3, r3, #24
 8002efe:	495f      	ldr	r1, [pc, #380]	; (800307c <HAL_RCC_OscConfig+0x504>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	604b      	str	r3, [r1, #4]
 8002f04:	e018      	b.n	8002f38 <HAL_RCC_OscConfig+0x3c0>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 8002f86:	4b5d      	ldr	r3, [pc, #372]	; (80030fc <HAL_RCC_OscConfig+0x504>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a5c      	ldr	r2, [pc, #368]	; (80030fc <HAL_RCC_OscConfig+0x504>)
 8002f8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f92:	f7fd ff99 	bl	8000ec8 <HAL_GetTick>
 8002f96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f98:	e008      	b.n	8002fac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f9a:	f7fd ff95 	bl	8000ec8 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e237      	b.n	800341c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fac:	4b53      	ldr	r3, [pc, #332]	; (80030fc <HAL_RCC_OscConfig+0x504>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1f0      	bne.n	8002f9a <HAL_RCC_OscConfig+0x3a2>
=======
 8002f06:	4b5d      	ldr	r3, [pc, #372]	; (800307c <HAL_RCC_OscConfig+0x504>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a5c      	ldr	r2, [pc, #368]	; (800307c <HAL_RCC_OscConfig+0x504>)
 8002f0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f12:	f7fd ffbb 	bl	8000e8c <HAL_GetTick>
 8002f16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f18:	e008      	b.n	8002f2c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f1a:	f7fd ffb7 	bl	8000e8c <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d901      	bls.n	8002f2c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e237      	b.n	800339c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f2c:	4b53      	ldr	r3, [pc, #332]	; (800307c <HAL_RCC_OscConfig+0x504>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1f0      	bne.n	8002f1a <HAL_RCC_OscConfig+0x3a2>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0308 	and.w	r3, r3, #8
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d03c      	beq.n	800303e <HAL_RCC_OscConfig+0x446>
=======
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0308 	and.w	r3, r3, #8
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d03c      	beq.n	8002fbe <HAL_RCC_OscConfig+0x446>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
<<<<<<< HEAD
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d01c      	beq.n	8003006 <HAL_RCC_OscConfig+0x40e>
=======
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	695b      	ldr	r3, [r3, #20]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d01c      	beq.n	8002f86 <HAL_RCC_OscConfig+0x40e>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
<<<<<<< HEAD
 8002fcc:	4b4b      	ldr	r3, [pc, #300]	; (80030fc <HAL_RCC_OscConfig+0x504>)
 8002fce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fd2:	4a4a      	ldr	r2, [pc, #296]	; (80030fc <HAL_RCC_OscConfig+0x504>)
 8002fd4:	f043 0301 	orr.w	r3, r3, #1
 8002fd8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fdc:	f7fd ff74 	bl	8000ec8 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fe4:	f7fd ff70 	bl	8000ec8 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e212      	b.n	800341c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ff6:	4b41      	ldr	r3, [pc, #260]	; (80030fc <HAL_RCC_OscConfig+0x504>)
 8002ff8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	2b00      	cmp	r3, #0
 8003002:	d0ef      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x3ec>
 8003004:	e01b      	b.n	800303e <HAL_RCC_OscConfig+0x446>
=======
 8002f4c:	4b4b      	ldr	r3, [pc, #300]	; (800307c <HAL_RCC_OscConfig+0x504>)
 8002f4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f52:	4a4a      	ldr	r2, [pc, #296]	; (800307c <HAL_RCC_OscConfig+0x504>)
 8002f54:	f043 0301 	orr.w	r3, r3, #1
 8002f58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f5c:	f7fd ff96 	bl	8000e8c <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f64:	f7fd ff92 	bl	8000e8c <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e212      	b.n	800339c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f76:	4b41      	ldr	r3, [pc, #260]	; (800307c <HAL_RCC_OscConfig+0x504>)
 8002f78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d0ef      	beq.n	8002f64 <HAL_RCC_OscConfig+0x3ec>
 8002f84:	e01b      	b.n	8002fbe <HAL_RCC_OscConfig+0x446>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
 8003006:	4b3d      	ldr	r3, [pc, #244]	; (80030fc <HAL_RCC_OscConfig+0x504>)
 8003008:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800300c:	4a3b      	ldr	r2, [pc, #236]	; (80030fc <HAL_RCC_OscConfig+0x504>)
 800300e:	f023 0301 	bic.w	r3, r3, #1
 8003012:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003016:	f7fd ff57 	bl	8000ec8 <HAL_GetTick>
 800301a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800301c:	e008      	b.n	8003030 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800301e:	f7fd ff53 	bl	8000ec8 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d901      	bls.n	8003030 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e1f5      	b.n	800341c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003030:	4b32      	ldr	r3, [pc, #200]	; (80030fc <HAL_RCC_OscConfig+0x504>)
 8003032:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1ef      	bne.n	800301e <HAL_RCC_OscConfig+0x426>
=======
 8002f86:	4b3d      	ldr	r3, [pc, #244]	; (800307c <HAL_RCC_OscConfig+0x504>)
 8002f88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f8c:	4a3b      	ldr	r2, [pc, #236]	; (800307c <HAL_RCC_OscConfig+0x504>)
 8002f8e:	f023 0301 	bic.w	r3, r3, #1
 8002f92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f96:	f7fd ff79 	bl	8000e8c <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f9c:	e008      	b.n	8002fb0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f9e:	f7fd ff75 	bl	8000e8c <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e1f5      	b.n	800339c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fb0:	4b32      	ldr	r3, [pc, #200]	; (800307c <HAL_RCC_OscConfig+0x504>)
 8002fb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1ef      	bne.n	8002f9e <HAL_RCC_OscConfig+0x426>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0304 	and.w	r3, r3, #4
 8003046:	2b00      	cmp	r3, #0
 8003048:	f000 80a6 	beq.w	8003198 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800304c:	2300      	movs	r3, #0
 800304e:	77fb      	strb	r3, [r7, #31]
=======
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0304 	and.w	r3, r3, #4
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f000 80a6 	beq.w	8003118 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	77fb      	strb	r3, [r7, #31]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
<<<<<<< HEAD
 8003050:	4b2a      	ldr	r3, [pc, #168]	; (80030fc <HAL_RCC_OscConfig+0x504>)
 8003052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d10d      	bne.n	8003078 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800305c:	4b27      	ldr	r3, [pc, #156]	; (80030fc <HAL_RCC_OscConfig+0x504>)
 800305e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003060:	4a26      	ldr	r2, [pc, #152]	; (80030fc <HAL_RCC_OscConfig+0x504>)
 8003062:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003066:	6593      	str	r3, [r2, #88]	; 0x58
 8003068:	4b24      	ldr	r3, [pc, #144]	; (80030fc <HAL_RCC_OscConfig+0x504>)
 800306a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800306c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003070:	60bb      	str	r3, [r7, #8]
 8003072:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003074:	2301      	movs	r3, #1
 8003076:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003078:	4b21      	ldr	r3, [pc, #132]	; (8003100 <HAL_RCC_OscConfig+0x508>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003080:	2b00      	cmp	r3, #0
 8003082:	d118      	bne.n	80030b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003084:	4b1e      	ldr	r3, [pc, #120]	; (8003100 <HAL_RCC_OscConfig+0x508>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a1d      	ldr	r2, [pc, #116]	; (8003100 <HAL_RCC_OscConfig+0x508>)
 800308a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800308e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003090:	f7fd ff1a 	bl	8000ec8 <HAL_GetTick>
 8003094:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003096:	e008      	b.n	80030aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003098:	f7fd ff16 	bl	8000ec8 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e1b8      	b.n	800341c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030aa:	4b15      	ldr	r3, [pc, #84]	; (8003100 <HAL_RCC_OscConfig+0x508>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d0f0      	beq.n	8003098 <HAL_RCC_OscConfig+0x4a0>
=======
 8002fd0:	4b2a      	ldr	r3, [pc, #168]	; (800307c <HAL_RCC_OscConfig+0x504>)
 8002fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10d      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fdc:	4b27      	ldr	r3, [pc, #156]	; (800307c <HAL_RCC_OscConfig+0x504>)
 8002fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe0:	4a26      	ldr	r2, [pc, #152]	; (800307c <HAL_RCC_OscConfig+0x504>)
 8002fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fe6:	6593      	str	r3, [r2, #88]	; 0x58
 8002fe8:	4b24      	ldr	r3, [pc, #144]	; (800307c <HAL_RCC_OscConfig+0x504>)
 8002fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff0:	60bb      	str	r3, [r7, #8]
 8002ff2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ff8:	4b21      	ldr	r3, [pc, #132]	; (8003080 <HAL_RCC_OscConfig+0x508>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003000:	2b00      	cmp	r3, #0
 8003002:	d118      	bne.n	8003036 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003004:	4b1e      	ldr	r3, [pc, #120]	; (8003080 <HAL_RCC_OscConfig+0x508>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a1d      	ldr	r2, [pc, #116]	; (8003080 <HAL_RCC_OscConfig+0x508>)
 800300a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800300e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003010:	f7fd ff3c 	bl	8000e8c <HAL_GetTick>
 8003014:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003016:	e008      	b.n	800302a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003018:	f7fd ff38 	bl	8000e8c <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b02      	cmp	r3, #2
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e1b8      	b.n	800339c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800302a:	4b15      	ldr	r3, [pc, #84]	; (8003080 <HAL_RCC_OscConfig+0x508>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003032:	2b00      	cmp	r3, #0
 8003034:	d0f0      	beq.n	8003018 <HAL_RCC_OscConfig+0x4a0>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d108      	bne.n	80030d0 <HAL_RCC_OscConfig+0x4d8>
 80030be:	4b0f      	ldr	r3, [pc, #60]	; (80030fc <HAL_RCC_OscConfig+0x504>)
 80030c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c4:	4a0d      	ldr	r2, [pc, #52]	; (80030fc <HAL_RCC_OscConfig+0x504>)
 80030c6:	f043 0301 	orr.w	r3, r3, #1
 80030ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030ce:	e029      	b.n	8003124 <HAL_RCC_OscConfig+0x52c>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	2b05      	cmp	r3, #5
 80030d6:	d115      	bne.n	8003104 <HAL_RCC_OscConfig+0x50c>
 80030d8:	4b08      	ldr	r3, [pc, #32]	; (80030fc <HAL_RCC_OscConfig+0x504>)
 80030da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030de:	4a07      	ldr	r2, [pc, #28]	; (80030fc <HAL_RCC_OscConfig+0x504>)
 80030e0:	f043 0304 	orr.w	r3, r3, #4
 80030e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030e8:	4b04      	ldr	r3, [pc, #16]	; (80030fc <HAL_RCC_OscConfig+0x504>)
 80030ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ee:	4a03      	ldr	r2, [pc, #12]	; (80030fc <HAL_RCC_OscConfig+0x504>)
 80030f0:	f043 0301 	orr.w	r3, r3, #1
 80030f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030f8:	e014      	b.n	8003124 <HAL_RCC_OscConfig+0x52c>
 80030fa:	bf00      	nop
 80030fc:	40021000 	.word	0x40021000
 8003100:	40007000 	.word	0x40007000
 8003104:	4b9d      	ldr	r3, [pc, #628]	; (800337c <HAL_RCC_OscConfig+0x784>)
 8003106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800310a:	4a9c      	ldr	r2, [pc, #624]	; (800337c <HAL_RCC_OscConfig+0x784>)
 800310c:	f023 0301 	bic.w	r3, r3, #1
 8003110:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003114:	4b99      	ldr	r3, [pc, #612]	; (800337c <HAL_RCC_OscConfig+0x784>)
 8003116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311a:	4a98      	ldr	r2, [pc, #608]	; (800337c <HAL_RCC_OscConfig+0x784>)
 800311c:	f023 0304 	bic.w	r3, r3, #4
 8003120:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
=======
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d108      	bne.n	8003050 <HAL_RCC_OscConfig+0x4d8>
 800303e:	4b0f      	ldr	r3, [pc, #60]	; (800307c <HAL_RCC_OscConfig+0x504>)
 8003040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003044:	4a0d      	ldr	r2, [pc, #52]	; (800307c <HAL_RCC_OscConfig+0x504>)
 8003046:	f043 0301 	orr.w	r3, r3, #1
 800304a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800304e:	e029      	b.n	80030a4 <HAL_RCC_OscConfig+0x52c>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	2b05      	cmp	r3, #5
 8003056:	d115      	bne.n	8003084 <HAL_RCC_OscConfig+0x50c>
 8003058:	4b08      	ldr	r3, [pc, #32]	; (800307c <HAL_RCC_OscConfig+0x504>)
 800305a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305e:	4a07      	ldr	r2, [pc, #28]	; (800307c <HAL_RCC_OscConfig+0x504>)
 8003060:	f043 0304 	orr.w	r3, r3, #4
 8003064:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003068:	4b04      	ldr	r3, [pc, #16]	; (800307c <HAL_RCC_OscConfig+0x504>)
 800306a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800306e:	4a03      	ldr	r2, [pc, #12]	; (800307c <HAL_RCC_OscConfig+0x504>)
 8003070:	f043 0301 	orr.w	r3, r3, #1
 8003074:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003078:	e014      	b.n	80030a4 <HAL_RCC_OscConfig+0x52c>
 800307a:	bf00      	nop
 800307c:	40021000 	.word	0x40021000
 8003080:	40007000 	.word	0x40007000
 8003084:	4b9d      	ldr	r3, [pc, #628]	; (80032fc <HAL_RCC_OscConfig+0x784>)
 8003086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800308a:	4a9c      	ldr	r2, [pc, #624]	; (80032fc <HAL_RCC_OscConfig+0x784>)
 800308c:	f023 0301 	bic.w	r3, r3, #1
 8003090:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003094:	4b99      	ldr	r3, [pc, #612]	; (80032fc <HAL_RCC_OscConfig+0x784>)
 8003096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800309a:	4a98      	ldr	r2, [pc, #608]	; (80032fc <HAL_RCC_OscConfig+0x784>)
 800309c:	f023 0304 	bic.w	r3, r3, #4
 80030a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
<<<<<<< HEAD
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d016      	beq.n	800315a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800312c:	f7fd fecc 	bl	8000ec8 <HAL_GetTick>
 8003130:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003132:	e00a      	b.n	800314a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003134:	f7fd fec8 	bl	8000ec8 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003142:	4293      	cmp	r3, r2
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e168      	b.n	800341c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800314a:	4b8c      	ldr	r3, [pc, #560]	; (800337c <HAL_RCC_OscConfig+0x784>)
 800314c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d0ed      	beq.n	8003134 <HAL_RCC_OscConfig+0x53c>
 8003158:	e015      	b.n	8003186 <HAL_RCC_OscConfig+0x58e>
=======
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d016      	beq.n	80030da <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ac:	f7fd feee 	bl	8000e8c <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030b2:	e00a      	b.n	80030ca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030b4:	f7fd feea 	bl	8000e8c <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e168      	b.n	800339c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030ca:	4b8c      	ldr	r3, [pc, #560]	; (80032fc <HAL_RCC_OscConfig+0x784>)
 80030cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0ed      	beq.n	80030b4 <HAL_RCC_OscConfig+0x53c>
 80030d8:	e015      	b.n	8003106 <HAL_RCC_OscConfig+0x58e>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 800315a:	f7fd feb5 	bl	8000ec8 <HAL_GetTick>
 800315e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003160:	e00a      	b.n	8003178 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003162:	f7fd feb1 	bl	8000ec8 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003170:	4293      	cmp	r3, r2
 8003172:	d901      	bls.n	8003178 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e151      	b.n	800341c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003178:	4b80      	ldr	r3, [pc, #512]	; (800337c <HAL_RCC_OscConfig+0x784>)
 800317a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1ed      	bne.n	8003162 <HAL_RCC_OscConfig+0x56a>
=======
 80030da:	f7fd fed7 	bl	8000e8c <HAL_GetTick>
 80030de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030e0:	e00a      	b.n	80030f8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030e2:	f7fd fed3 	bl	8000e8c <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e151      	b.n	800339c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030f8:	4b80      	ldr	r3, [pc, #512]	; (80032fc <HAL_RCC_OscConfig+0x784>)
 80030fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1ed      	bne.n	80030e2 <HAL_RCC_OscConfig+0x56a>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
<<<<<<< HEAD
 8003186:	7ffb      	ldrb	r3, [r7, #31]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d105      	bne.n	8003198 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800318c:	4b7b      	ldr	r3, [pc, #492]	; (800337c <HAL_RCC_OscConfig+0x784>)
 800318e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003190:	4a7a      	ldr	r2, [pc, #488]	; (800337c <HAL_RCC_OscConfig+0x784>)
 8003192:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003196:	6593      	str	r3, [r2, #88]	; 0x58
=======
 8003106:	7ffb      	ldrb	r3, [r7, #31]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d105      	bne.n	8003118 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800310c:	4b7b      	ldr	r3, [pc, #492]	; (80032fc <HAL_RCC_OscConfig+0x784>)
 800310e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003110:	4a7a      	ldr	r2, [pc, #488]	; (80032fc <HAL_RCC_OscConfig+0x784>)
 8003112:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003116:	6593      	str	r3, [r2, #88]	; 0x58
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
<<<<<<< HEAD
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0320 	and.w	r3, r3, #32
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d03c      	beq.n	800321e <HAL_RCC_OscConfig+0x626>
=======
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0320 	and.w	r3, r3, #32
 8003120:	2b00      	cmp	r3, #0
 8003122:	d03c      	beq.n	800319e <HAL_RCC_OscConfig+0x626>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
<<<<<<< HEAD
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d01c      	beq.n	80031e6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80031ac:	4b73      	ldr	r3, [pc, #460]	; (800337c <HAL_RCC_OscConfig+0x784>)
 80031ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031b2:	4a72      	ldr	r2, [pc, #456]	; (800337c <HAL_RCC_OscConfig+0x784>)
 80031b4:	f043 0301 	orr.w	r3, r3, #1
 80031b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031bc:	f7fd fe84 	bl	8000ec8 <HAL_GetTick>
 80031c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031c2:	e008      	b.n	80031d6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031c4:	f7fd fe80 	bl	8000ec8 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e122      	b.n	800341c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031d6:	4b69      	ldr	r3, [pc, #420]	; (800337c <HAL_RCC_OscConfig+0x784>)
 80031d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d0ef      	beq.n	80031c4 <HAL_RCC_OscConfig+0x5cc>
 80031e4:	e01b      	b.n	800321e <HAL_RCC_OscConfig+0x626>
=======
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003128:	2b00      	cmp	r3, #0
 800312a:	d01c      	beq.n	8003166 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800312c:	4b73      	ldr	r3, [pc, #460]	; (80032fc <HAL_RCC_OscConfig+0x784>)
 800312e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003132:	4a72      	ldr	r2, [pc, #456]	; (80032fc <HAL_RCC_OscConfig+0x784>)
 8003134:	f043 0301 	orr.w	r3, r3, #1
 8003138:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800313c:	f7fd fea6 	bl	8000e8c <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003144:	f7fd fea2 	bl	8000e8c <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e122      	b.n	800339c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003156:	4b69      	ldr	r3, [pc, #420]	; (80032fc <HAL_RCC_OscConfig+0x784>)
 8003158:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0ef      	beq.n	8003144 <HAL_RCC_OscConfig+0x5cc>
 8003164:	e01b      	b.n	800319e <HAL_RCC_OscConfig+0x626>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
<<<<<<< HEAD
 80031e6:	4b65      	ldr	r3, [pc, #404]	; (800337c <HAL_RCC_OscConfig+0x784>)
 80031e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031ec:	4a63      	ldr	r2, [pc, #396]	; (800337c <HAL_RCC_OscConfig+0x784>)
 80031ee:	f023 0301 	bic.w	r3, r3, #1
 80031f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f6:	f7fd fe67 	bl	8000ec8 <HAL_GetTick>
 80031fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031fc:	e008      	b.n	8003210 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031fe:	f7fd fe63 	bl	8000ec8 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d901      	bls.n	8003210 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e105      	b.n	800341c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003210:	4b5a      	ldr	r3, [pc, #360]	; (800337c <HAL_RCC_OscConfig+0x784>)
 8003212:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1ef      	bne.n	80031fe <HAL_RCC_OscConfig+0x606>
=======
 8003166:	4b65      	ldr	r3, [pc, #404]	; (80032fc <HAL_RCC_OscConfig+0x784>)
 8003168:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800316c:	4a63      	ldr	r2, [pc, #396]	; (80032fc <HAL_RCC_OscConfig+0x784>)
 800316e:	f023 0301 	bic.w	r3, r3, #1
 8003172:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003176:	f7fd fe89 	bl	8000e8c <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800317c:	e008      	b.n	8003190 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800317e:	f7fd fe85 	bl	8000e8c <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e105      	b.n	800339c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003190:	4b5a      	ldr	r3, [pc, #360]	; (80032fc <HAL_RCC_OscConfig+0x784>)
 8003192:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1ef      	bne.n	800317e <HAL_RCC_OscConfig+0x606>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
<<<<<<< HEAD
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003222:	2b00      	cmp	r3, #0
 8003224:	f000 80f9 	beq.w	800341a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322c:	2b02      	cmp	r3, #2
 800322e:	f040 80cf 	bne.w	80033d0 <HAL_RCC_OscConfig+0x7d8>
=======
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f000 80f9 	beq.w	800339a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	f040 80cf 	bne.w	8003350 <HAL_RCC_OscConfig+0x7d8>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
<<<<<<< HEAD
 8003232:	4b52      	ldr	r3, [pc, #328]	; (800337c <HAL_RCC_OscConfig+0x784>)
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	f003 0203 	and.w	r2, r3, #3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003242:	429a      	cmp	r2, r3
 8003244:	d12c      	bne.n	80032a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003250:	3b01      	subs	r3, #1
 8003252:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003254:	429a      	cmp	r2, r3
 8003256:	d123      	bne.n	80032a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003262:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003264:	429a      	cmp	r2, r3
 8003266:	d11b      	bne.n	80032a0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003272:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003274:	429a      	cmp	r2, r3
 8003276:	d113      	bne.n	80032a0 <HAL_RCC_OscConfig+0x6a8>
=======
 80031b2:	4b52      	ldr	r3, [pc, #328]	; (80032fc <HAL_RCC_OscConfig+0x784>)
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	f003 0203 	and.w	r2, r3, #3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d12c      	bne.n	8003220 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d0:	3b01      	subs	r3, #1
 80031d2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d123      	bne.n	8003220 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031e2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d11b      	bne.n	8003220 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d113      	bne.n	8003220 <HAL_RCC_OscConfig+0x6a8>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
<<<<<<< HEAD
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003282:	085b      	lsrs	r3, r3, #1
 8003284:	3b01      	subs	r3, #1
 8003286:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003288:	429a      	cmp	r2, r3
 800328a:	d109      	bne.n	80032a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	085b      	lsrs	r3, r3, #1
 8003298:	3b01      	subs	r3, #1
 800329a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800329c:	429a      	cmp	r2, r3
 800329e:	d071      	beq.n	8003384 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	2b0c      	cmp	r3, #12
 80032a4:	d068      	beq.n	8003378 <HAL_RCC_OscConfig+0x780>
=======
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003202:	085b      	lsrs	r3, r3, #1
 8003204:	3b01      	subs	r3, #1
 8003206:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003208:	429a      	cmp	r2, r3
 800320a:	d109      	bne.n	8003220 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	085b      	lsrs	r3, r3, #1
 8003218:	3b01      	subs	r3, #1
 800321a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800321c:	429a      	cmp	r2, r3
 800321e:	d071      	beq.n	8003304 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	2b0c      	cmp	r3, #12
 8003224:	d068      	beq.n	80032f8 <HAL_RCC_OscConfig+0x780>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
<<<<<<< HEAD
 80032a6:	4b35      	ldr	r3, [pc, #212]	; (800337c <HAL_RCC_OscConfig+0x784>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d105      	bne.n	80032be <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80032b2:	4b32      	ldr	r3, [pc, #200]	; (800337c <HAL_RCC_OscConfig+0x784>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <HAL_RCC_OscConfig+0x6ca>
=======
 8003226:	4b35      	ldr	r3, [pc, #212]	; (80032fc <HAL_RCC_OscConfig+0x784>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d105      	bne.n	800323e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003232:	4b32      	ldr	r3, [pc, #200]	; (80032fc <HAL_RCC_OscConfig+0x784>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <HAL_RCC_OscConfig+0x6ca>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
#endif
            )
          {
            return HAL_ERROR;
<<<<<<< HEAD
 80032be:	2301      	movs	r3, #1
 80032c0:	e0ac      	b.n	800341c <HAL_RCC_OscConfig+0x824>
=======
 800323e:	2301      	movs	r3, #1
 8003240:	e0ac      	b.n	800339c <HAL_RCC_OscConfig+0x824>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 80032c2:	4b2e      	ldr	r3, [pc, #184]	; (800337c <HAL_RCC_OscConfig+0x784>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a2d      	ldr	r2, [pc, #180]	; (800337c <HAL_RCC_OscConfig+0x784>)
 80032c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032cc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032ce:	f7fd fdfb 	bl	8000ec8 <HAL_GetTick>
 80032d2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032d4:	e008      	b.n	80032e8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032d6:	f7fd fdf7 	bl	8000ec8 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e099      	b.n	800341c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032e8:	4b24      	ldr	r3, [pc, #144]	; (800337c <HAL_RCC_OscConfig+0x784>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1f0      	bne.n	80032d6 <HAL_RCC_OscConfig+0x6de>
=======
 8003242:	4b2e      	ldr	r3, [pc, #184]	; (80032fc <HAL_RCC_OscConfig+0x784>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a2d      	ldr	r2, [pc, #180]	; (80032fc <HAL_RCC_OscConfig+0x784>)
 8003248:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800324c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800324e:	f7fd fe1d 	bl	8000e8c <HAL_GetTick>
 8003252:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003254:	e008      	b.n	8003268 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003256:	f7fd fe19 	bl	8000e8c <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d901      	bls.n	8003268 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e099      	b.n	800339c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003268:	4b24      	ldr	r3, [pc, #144]	; (80032fc <HAL_RCC_OscConfig+0x784>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1f0      	bne.n	8003256 <HAL_RCC_OscConfig+0x6de>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
<<<<<<< HEAD
 80032f4:	4b21      	ldr	r3, [pc, #132]	; (800337c <HAL_RCC_OscConfig+0x784>)
 80032f6:	68da      	ldr	r2, [r3, #12]
 80032f8:	4b21      	ldr	r3, [pc, #132]	; (8003380 <HAL_RCC_OscConfig+0x788>)
 80032fa:	4013      	ands	r3, r2
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003304:	3a01      	subs	r2, #1
 8003306:	0112      	lsls	r2, r2, #4
 8003308:	4311      	orrs	r1, r2
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800330e:	0212      	lsls	r2, r2, #8
 8003310:	4311      	orrs	r1, r2
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003316:	0852      	lsrs	r2, r2, #1
 8003318:	3a01      	subs	r2, #1
 800331a:	0552      	lsls	r2, r2, #21
 800331c:	4311      	orrs	r1, r2
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003322:	0852      	lsrs	r2, r2, #1
 8003324:	3a01      	subs	r2, #1
 8003326:	0652      	lsls	r2, r2, #25
 8003328:	4311      	orrs	r1, r2
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800332e:	06d2      	lsls	r2, r2, #27
 8003330:	430a      	orrs	r2, r1
 8003332:	4912      	ldr	r1, [pc, #72]	; (800337c <HAL_RCC_OscConfig+0x784>)
 8003334:	4313      	orrs	r3, r2
 8003336:	60cb      	str	r3, [r1, #12]
=======
 8003274:	4b21      	ldr	r3, [pc, #132]	; (80032fc <HAL_RCC_OscConfig+0x784>)
 8003276:	68da      	ldr	r2, [r3, #12]
 8003278:	4b21      	ldr	r3, [pc, #132]	; (8003300 <HAL_RCC_OscConfig+0x788>)
 800327a:	4013      	ands	r3, r2
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003284:	3a01      	subs	r2, #1
 8003286:	0112      	lsls	r2, r2, #4
 8003288:	4311      	orrs	r1, r2
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800328e:	0212      	lsls	r2, r2, #8
 8003290:	4311      	orrs	r1, r2
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003296:	0852      	lsrs	r2, r2, #1
 8003298:	3a01      	subs	r2, #1
 800329a:	0552      	lsls	r2, r2, #21
 800329c:	4311      	orrs	r1, r2
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80032a2:	0852      	lsrs	r2, r2, #1
 80032a4:	3a01      	subs	r2, #1
 80032a6:	0652      	lsls	r2, r2, #25
 80032a8:	4311      	orrs	r1, r2
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032ae:	06d2      	lsls	r2, r2, #27
 80032b0:	430a      	orrs	r2, r1
 80032b2:	4912      	ldr	r1, [pc, #72]	; (80032fc <HAL_RCC_OscConfig+0x784>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	60cb      	str	r3, [r1, #12]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
<<<<<<< HEAD
 8003338:	4b10      	ldr	r3, [pc, #64]	; (800337c <HAL_RCC_OscConfig+0x784>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a0f      	ldr	r2, [pc, #60]	; (800337c <HAL_RCC_OscConfig+0x784>)
 800333e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003342:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003344:	4b0d      	ldr	r3, [pc, #52]	; (800337c <HAL_RCC_OscConfig+0x784>)
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	4a0c      	ldr	r2, [pc, #48]	; (800337c <HAL_RCC_OscConfig+0x784>)
 800334a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800334e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003350:	f7fd fdba 	bl	8000ec8 <HAL_GetTick>
 8003354:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003356:	e008      	b.n	800336a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003358:	f7fd fdb6 	bl	8000ec8 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e058      	b.n	800341c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800336a:	4b04      	ldr	r3, [pc, #16]	; (800337c <HAL_RCC_OscConfig+0x784>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d0f0      	beq.n	8003358 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003376:	e050      	b.n	800341a <HAL_RCC_OscConfig+0x822>
=======
 80032b8:	4b10      	ldr	r3, [pc, #64]	; (80032fc <HAL_RCC_OscConfig+0x784>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a0f      	ldr	r2, [pc, #60]	; (80032fc <HAL_RCC_OscConfig+0x784>)
 80032be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032c2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032c4:	4b0d      	ldr	r3, [pc, #52]	; (80032fc <HAL_RCC_OscConfig+0x784>)
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	4a0c      	ldr	r2, [pc, #48]	; (80032fc <HAL_RCC_OscConfig+0x784>)
 80032ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032ce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032d0:	f7fd fddc 	bl	8000e8c <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032d8:	f7fd fdd8 	bl	8000e8c <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e058      	b.n	800339c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032ea:	4b04      	ldr	r3, [pc, #16]	; (80032fc <HAL_RCC_OscConfig+0x784>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d0f0      	beq.n	80032d8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032f6:	e050      	b.n	800339a <HAL_RCC_OscConfig+0x822>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
<<<<<<< HEAD
 8003378:	2301      	movs	r3, #1
 800337a:	e04f      	b.n	800341c <HAL_RCC_OscConfig+0x824>
 800337c:	40021000 	.word	0x40021000
 8003380:	019d808c 	.word	0x019d808c
=======
 80032f8:	2301      	movs	r3, #1
 80032fa:	e04f      	b.n	800339c <HAL_RCC_OscConfig+0x824>
 80032fc:	40021000 	.word	0x40021000
 8003300:	019d808c 	.word	0x019d808c
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
<<<<<<< HEAD
 8003384:	4b27      	ldr	r3, [pc, #156]	; (8003424 <HAL_RCC_OscConfig+0x82c>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d144      	bne.n	800341a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003390:	4b24      	ldr	r3, [pc, #144]	; (8003424 <HAL_RCC_OscConfig+0x82c>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a23      	ldr	r2, [pc, #140]	; (8003424 <HAL_RCC_OscConfig+0x82c>)
 8003396:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800339a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800339c:	4b21      	ldr	r3, [pc, #132]	; (8003424 <HAL_RCC_OscConfig+0x82c>)
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	4a20      	ldr	r2, [pc, #128]	; (8003424 <HAL_RCC_OscConfig+0x82c>)
 80033a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80033a8:	f7fd fd8e 	bl	8000ec8 <HAL_GetTick>
 80033ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033ae:	e008      	b.n	80033c2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033b0:	f7fd fd8a 	bl	8000ec8 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e02c      	b.n	800341c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033c2:	4b18      	ldr	r3, [pc, #96]	; (8003424 <HAL_RCC_OscConfig+0x82c>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d0f0      	beq.n	80033b0 <HAL_RCC_OscConfig+0x7b8>
 80033ce:	e024      	b.n	800341a <HAL_RCC_OscConfig+0x822>
=======
 8003304:	4b27      	ldr	r3, [pc, #156]	; (80033a4 <HAL_RCC_OscConfig+0x82c>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d144      	bne.n	800339a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003310:	4b24      	ldr	r3, [pc, #144]	; (80033a4 <HAL_RCC_OscConfig+0x82c>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a23      	ldr	r2, [pc, #140]	; (80033a4 <HAL_RCC_OscConfig+0x82c>)
 8003316:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800331a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800331c:	4b21      	ldr	r3, [pc, #132]	; (80033a4 <HAL_RCC_OscConfig+0x82c>)
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	4a20      	ldr	r2, [pc, #128]	; (80033a4 <HAL_RCC_OscConfig+0x82c>)
 8003322:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003326:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003328:	f7fd fdb0 	bl	8000e8c <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800332e:	e008      	b.n	8003342 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003330:	f7fd fdac 	bl	8000e8c <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e02c      	b.n	800339c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003342:	4b18      	ldr	r3, [pc, #96]	; (80033a4 <HAL_RCC_OscConfig+0x82c>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d0f0      	beq.n	8003330 <HAL_RCC_OscConfig+0x7b8>
 800334e:	e024      	b.n	800339a <HAL_RCC_OscConfig+0x822>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
<<<<<<< HEAD
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	2b0c      	cmp	r3, #12
 80033d4:	d01f      	beq.n	8003416 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033d6:	4b13      	ldr	r3, [pc, #76]	; (8003424 <HAL_RCC_OscConfig+0x82c>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a12      	ldr	r2, [pc, #72]	; (8003424 <HAL_RCC_OscConfig+0x82c>)
 80033dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e2:	f7fd fd71 	bl	8000ec8 <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033e8:	e008      	b.n	80033fc <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ea:	f7fd fd6d 	bl	8000ec8 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e00f      	b.n	800341c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033fc:	4b09      	ldr	r3, [pc, #36]	; (8003424 <HAL_RCC_OscConfig+0x82c>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1f0      	bne.n	80033ea <HAL_RCC_OscConfig+0x7f2>
=======
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	2b0c      	cmp	r3, #12
 8003354:	d01f      	beq.n	8003396 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003356:	4b13      	ldr	r3, [pc, #76]	; (80033a4 <HAL_RCC_OscConfig+0x82c>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a12      	ldr	r2, [pc, #72]	; (80033a4 <HAL_RCC_OscConfig+0x82c>)
 800335c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003360:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003362:	f7fd fd93 	bl	8000e8c <HAL_GetTick>
 8003366:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003368:	e008      	b.n	800337c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800336a:	f7fd fd8f 	bl	8000e8c <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d901      	bls.n	800337c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e00f      	b.n	800339c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800337c:	4b09      	ldr	r3, [pc, #36]	; (80033a4 <HAL_RCC_OscConfig+0x82c>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1f0      	bne.n	800336a <HAL_RCC_OscConfig+0x7f2>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
<<<<<<< HEAD
 8003408:	4b06      	ldr	r3, [pc, #24]	; (8003424 <HAL_RCC_OscConfig+0x82c>)
 800340a:	68da      	ldr	r2, [r3, #12]
 800340c:	4905      	ldr	r1, [pc, #20]	; (8003424 <HAL_RCC_OscConfig+0x82c>)
 800340e:	4b06      	ldr	r3, [pc, #24]	; (8003428 <HAL_RCC_OscConfig+0x830>)
 8003410:	4013      	ands	r3, r2
 8003412:	60cb      	str	r3, [r1, #12]
 8003414:	e001      	b.n	800341a <HAL_RCC_OscConfig+0x822>
=======
 8003388:	4b06      	ldr	r3, [pc, #24]	; (80033a4 <HAL_RCC_OscConfig+0x82c>)
 800338a:	68da      	ldr	r2, [r3, #12]
 800338c:	4905      	ldr	r1, [pc, #20]	; (80033a4 <HAL_RCC_OscConfig+0x82c>)
 800338e:	4b06      	ldr	r3, [pc, #24]	; (80033a8 <HAL_RCC_OscConfig+0x830>)
 8003390:	4013      	ands	r3, r2
 8003392:	60cb      	str	r3, [r1, #12]
 8003394:	e001      	b.n	800339a <HAL_RCC_OscConfig+0x822>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
<<<<<<< HEAD
 8003416:	2301      	movs	r3, #1
 8003418:	e000      	b.n	800341c <HAL_RCC_OscConfig+0x824>
=======
 8003396:	2301      	movs	r3, #1
 8003398:	e000      	b.n	800339c <HAL_RCC_OscConfig+0x824>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3720      	adds	r7, #32
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	40021000 	.word	0x40021000
 8003428:	feeefffc 	.word	0xfeeefffc

0800342c <HAL_RCC_ClockConfig>:
=======
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3720      	adds	r7, #32
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	40021000 	.word	0x40021000
 80033a8:	feeefffc 	.word	0xfeeefffc

080033ac <HAL_RCC_ClockConfig>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
=======
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
<<<<<<< HEAD
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d101      	bne.n	8003440 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e0e7      	b.n	8003610 <HAL_RCC_ClockConfig+0x1e4>
=======
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d101      	bne.n	80033c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e0e7      	b.n	8003590 <HAL_RCC_ClockConfig+0x1e4>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8003440:	4b75      	ldr	r3, [pc, #468]	; (8003618 <HAL_RCC_ClockConfig+0x1ec>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0307 	and.w	r3, r3, #7
 8003448:	683a      	ldr	r2, [r7, #0]
 800344a:	429a      	cmp	r2, r3
 800344c:	d910      	bls.n	8003470 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800344e:	4b72      	ldr	r3, [pc, #456]	; (8003618 <HAL_RCC_ClockConfig+0x1ec>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f023 0207 	bic.w	r2, r3, #7
 8003456:	4970      	ldr	r1, [pc, #448]	; (8003618 <HAL_RCC_ClockConfig+0x1ec>)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	4313      	orrs	r3, r2
 800345c:	600b      	str	r3, [r1, #0]
=======
 80033c0:	4b75      	ldr	r3, [pc, #468]	; (8003598 <HAL_RCC_ClockConfig+0x1ec>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0307 	and.w	r3, r3, #7
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d910      	bls.n	80033f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ce:	4b72      	ldr	r3, [pc, #456]	; (8003598 <HAL_RCC_ClockConfig+0x1ec>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f023 0207 	bic.w	r2, r3, #7
 80033d6:	4970      	ldr	r1, [pc, #448]	; (8003598 <HAL_RCC_ClockConfig+0x1ec>)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	4313      	orrs	r3, r2
 80033dc:	600b      	str	r3, [r1, #0]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 800345e:	4b6e      	ldr	r3, [pc, #440]	; (8003618 <HAL_RCC_ClockConfig+0x1ec>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0307 	and.w	r3, r3, #7
 8003466:	683a      	ldr	r2, [r7, #0]
 8003468:	429a      	cmp	r2, r3
 800346a:	d001      	beq.n	8003470 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e0cf      	b.n	8003610 <HAL_RCC_ClockConfig+0x1e4>
=======
 80033de:	4b6e      	ldr	r3, [pc, #440]	; (8003598 <HAL_RCC_ClockConfig+0x1ec>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0307 	and.w	r3, r3, #7
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d001      	beq.n	80033f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e0cf      	b.n	8003590 <HAL_RCC_ClockConfig+0x1e4>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d010      	beq.n	800349e <HAL_RCC_ClockConfig+0x72>
=======
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d010      	beq.n	800341e <HAL_RCC_ClockConfig+0x72>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
<<<<<<< HEAD
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689a      	ldr	r2, [r3, #8]
 8003480:	4b66      	ldr	r3, [pc, #408]	; (800361c <HAL_RCC_ClockConfig+0x1f0>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003488:	429a      	cmp	r2, r3
 800348a:	d908      	bls.n	800349e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800348c:	4b63      	ldr	r3, [pc, #396]	; (800361c <HAL_RCC_ClockConfig+0x1f0>)
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	4960      	ldr	r1, [pc, #384]	; (800361c <HAL_RCC_ClockConfig+0x1f0>)
 800349a:	4313      	orrs	r3, r2
 800349c:	608b      	str	r3, [r1, #8]
=======
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	4b66      	ldr	r3, [pc, #408]	; (800359c <HAL_RCC_ClockConfig+0x1f0>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003408:	429a      	cmp	r2, r3
 800340a:	d908      	bls.n	800341e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800340c:	4b63      	ldr	r3, [pc, #396]	; (800359c <HAL_RCC_ClockConfig+0x1f0>)
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	4960      	ldr	r1, [pc, #384]	; (800359c <HAL_RCC_ClockConfig+0x1f0>)
 800341a:	4313      	orrs	r3, r2
 800341c:	608b      	str	r3, [r1, #8]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d04c      	beq.n	8003544 <HAL_RCC_ClockConfig+0x118>
=======
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b00      	cmp	r3, #0
 8003428:	d04c      	beq.n	80034c4 <HAL_RCC_ClockConfig+0x118>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
<<<<<<< HEAD
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	2b03      	cmp	r3, #3
 80034b0:	d107      	bne.n	80034c2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034b2:	4b5a      	ldr	r3, [pc, #360]	; (800361c <HAL_RCC_ClockConfig+0x1f0>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d121      	bne.n	8003502 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e0a6      	b.n	8003610 <HAL_RCC_ClockConfig+0x1e4>
=======
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	2b03      	cmp	r3, #3
 8003430:	d107      	bne.n	8003442 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003432:	4b5a      	ldr	r3, [pc, #360]	; (800359c <HAL_RCC_ClockConfig+0x1f0>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d121      	bne.n	8003482 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e0a6      	b.n	8003590 <HAL_RCC_ClockConfig+0x1e4>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d107      	bne.n	80034da <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034ca:	4b54      	ldr	r3, [pc, #336]	; (800361c <HAL_RCC_ClockConfig+0x1f0>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d115      	bne.n	8003502 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e09a      	b.n	8003610 <HAL_RCC_ClockConfig+0x1e4>
=======
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	2b02      	cmp	r3, #2
 8003448:	d107      	bne.n	800345a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800344a:	4b54      	ldr	r3, [pc, #336]	; (800359c <HAL_RCC_ClockConfig+0x1f0>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d115      	bne.n	8003482 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e09a      	b.n	8003590 <HAL_RCC_ClockConfig+0x1e4>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
<<<<<<< HEAD
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d107      	bne.n	80034f2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034e2:	4b4e      	ldr	r3, [pc, #312]	; (800361c <HAL_RCC_ClockConfig+0x1f0>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d109      	bne.n	8003502 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e08e      	b.n	8003610 <HAL_RCC_ClockConfig+0x1e4>
=======
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d107      	bne.n	8003472 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003462:	4b4e      	ldr	r3, [pc, #312]	; (800359c <HAL_RCC_ClockConfig+0x1f0>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d109      	bne.n	8003482 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e08e      	b.n	8003590 <HAL_RCC_ClockConfig+0x1e4>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
<<<<<<< HEAD
 80034f2:	4b4a      	ldr	r3, [pc, #296]	; (800361c <HAL_RCC_ClockConfig+0x1f0>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e086      	b.n	8003610 <HAL_RCC_ClockConfig+0x1e4>
=======
 8003472:	4b4a      	ldr	r3, [pc, #296]	; (800359c <HAL_RCC_ClockConfig+0x1f0>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e086      	b.n	8003590 <HAL_RCC_ClockConfig+0x1e4>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< HEAD
 8003502:	4b46      	ldr	r3, [pc, #280]	; (800361c <HAL_RCC_ClockConfig+0x1f0>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f023 0203 	bic.w	r2, r3, #3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	4943      	ldr	r1, [pc, #268]	; (800361c <HAL_RCC_ClockConfig+0x1f0>)
 8003510:	4313      	orrs	r3, r2
 8003512:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003514:	f7fd fcd8 	bl	8000ec8 <HAL_GetTick>
 8003518:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800351a:	e00a      	b.n	8003532 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800351c:	f7fd fcd4 	bl	8000ec8 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	f241 3288 	movw	r2, #5000	; 0x1388
 800352a:	4293      	cmp	r3, r2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e06e      	b.n	8003610 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003532:	4b3a      	ldr	r3, [pc, #232]	; (800361c <HAL_RCC_ClockConfig+0x1f0>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f003 020c 	and.w	r2, r3, #12
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	429a      	cmp	r2, r3
 8003542:	d1eb      	bne.n	800351c <HAL_RCC_ClockConfig+0xf0>
=======
 8003482:	4b46      	ldr	r3, [pc, #280]	; (800359c <HAL_RCC_ClockConfig+0x1f0>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f023 0203 	bic.w	r2, r3, #3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	4943      	ldr	r1, [pc, #268]	; (800359c <HAL_RCC_ClockConfig+0x1f0>)
 8003490:	4313      	orrs	r3, r2
 8003492:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003494:	f7fd fcfa 	bl	8000e8c <HAL_GetTick>
 8003498:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800349a:	e00a      	b.n	80034b2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800349c:	f7fd fcf6 	bl	8000e8c <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e06e      	b.n	8003590 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034b2:	4b3a      	ldr	r3, [pc, #232]	; (800359c <HAL_RCC_ClockConfig+0x1f0>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f003 020c 	and.w	r2, r3, #12
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d1eb      	bne.n	800349c <HAL_RCC_ClockConfig+0xf0>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0302 	and.w	r3, r3, #2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d010      	beq.n	8003572 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	4b31      	ldr	r3, [pc, #196]	; (800361c <HAL_RCC_ClockConfig+0x1f0>)
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800355c:	429a      	cmp	r2, r3
 800355e:	d208      	bcs.n	8003572 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003560:	4b2e      	ldr	r3, [pc, #184]	; (800361c <HAL_RCC_ClockConfig+0x1f0>)
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	492b      	ldr	r1, [pc, #172]	; (800361c <HAL_RCC_ClockConfig+0x1f0>)
 800356e:	4313      	orrs	r3, r2
 8003570:	608b      	str	r3, [r1, #8]
=======
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0302 	and.w	r3, r3, #2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d010      	beq.n	80034f2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689a      	ldr	r2, [r3, #8]
 80034d4:	4b31      	ldr	r3, [pc, #196]	; (800359c <HAL_RCC_ClockConfig+0x1f0>)
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034dc:	429a      	cmp	r2, r3
 80034de:	d208      	bcs.n	80034f2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034e0:	4b2e      	ldr	r3, [pc, #184]	; (800359c <HAL_RCC_ClockConfig+0x1f0>)
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	492b      	ldr	r1, [pc, #172]	; (800359c <HAL_RCC_ClockConfig+0x1f0>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	608b      	str	r3, [r1, #8]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8003572:	4b29      	ldr	r3, [pc, #164]	; (8003618 <HAL_RCC_ClockConfig+0x1ec>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0307 	and.w	r3, r3, #7
 800357a:	683a      	ldr	r2, [r7, #0]
 800357c:	429a      	cmp	r2, r3
 800357e:	d210      	bcs.n	80035a2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003580:	4b25      	ldr	r3, [pc, #148]	; (8003618 <HAL_RCC_ClockConfig+0x1ec>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f023 0207 	bic.w	r2, r3, #7
 8003588:	4923      	ldr	r1, [pc, #140]	; (8003618 <HAL_RCC_ClockConfig+0x1ec>)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	4313      	orrs	r3, r2
 800358e:	600b      	str	r3, [r1, #0]
=======
 80034f2:	4b29      	ldr	r3, [pc, #164]	; (8003598 <HAL_RCC_ClockConfig+0x1ec>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0307 	and.w	r3, r3, #7
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d210      	bcs.n	8003522 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003500:	4b25      	ldr	r3, [pc, #148]	; (8003598 <HAL_RCC_ClockConfig+0x1ec>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f023 0207 	bic.w	r2, r3, #7
 8003508:	4923      	ldr	r1, [pc, #140]	; (8003598 <HAL_RCC_ClockConfig+0x1ec>)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	4313      	orrs	r3, r2
 800350e:	600b      	str	r3, [r1, #0]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8003590:	4b21      	ldr	r3, [pc, #132]	; (8003618 <HAL_RCC_ClockConfig+0x1ec>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0307 	and.w	r3, r3, #7
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	429a      	cmp	r2, r3
 800359c:	d001      	beq.n	80035a2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e036      	b.n	8003610 <HAL_RCC_ClockConfig+0x1e4>
=======
 8003510:	4b21      	ldr	r3, [pc, #132]	; (8003598 <HAL_RCC_ClockConfig+0x1ec>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	429a      	cmp	r2, r3
 800351c:	d001      	beq.n	8003522 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e036      	b.n	8003590 <HAL_RCC_ClockConfig+0x1e4>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0304 	and.w	r3, r3, #4
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d008      	beq.n	80035c0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035ae:	4b1b      	ldr	r3, [pc, #108]	; (800361c <HAL_RCC_ClockConfig+0x1f0>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	4918      	ldr	r1, [pc, #96]	; (800361c <HAL_RCC_ClockConfig+0x1f0>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	608b      	str	r3, [r1, #8]
=======
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0304 	and.w	r3, r3, #4
 800352a:	2b00      	cmp	r3, #0
 800352c:	d008      	beq.n	8003540 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800352e:	4b1b      	ldr	r3, [pc, #108]	; (800359c <HAL_RCC_ClockConfig+0x1f0>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	4918      	ldr	r1, [pc, #96]	; (800359c <HAL_RCC_ClockConfig+0x1f0>)
 800353c:	4313      	orrs	r3, r2
 800353e:	608b      	str	r3, [r1, #8]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0308 	and.w	r3, r3, #8
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d009      	beq.n	80035e0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035cc:	4b13      	ldr	r3, [pc, #76]	; (800361c <HAL_RCC_ClockConfig+0x1f0>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	4910      	ldr	r1, [pc, #64]	; (800361c <HAL_RCC_ClockConfig+0x1f0>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	608b      	str	r3, [r1, #8]
=======
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0308 	and.w	r3, r3, #8
 8003548:	2b00      	cmp	r3, #0
 800354a:	d009      	beq.n	8003560 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800354c:	4b13      	ldr	r3, [pc, #76]	; (800359c <HAL_RCC_ClockConfig+0x1f0>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	00db      	lsls	r3, r3, #3
 800355a:	4910      	ldr	r1, [pc, #64]	; (800359c <HAL_RCC_ClockConfig+0x1f0>)
 800355c:	4313      	orrs	r3, r2
 800355e:	608b      	str	r3, [r1, #8]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
<<<<<<< HEAD
 80035e0:	f000 f824 	bl	800362c <HAL_RCC_GetSysClockFreq>
 80035e4:	4602      	mov	r2, r0
 80035e6:	4b0d      	ldr	r3, [pc, #52]	; (800361c <HAL_RCC_ClockConfig+0x1f0>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	091b      	lsrs	r3, r3, #4
 80035ec:	f003 030f 	and.w	r3, r3, #15
 80035f0:	490b      	ldr	r1, [pc, #44]	; (8003620 <HAL_RCC_ClockConfig+0x1f4>)
 80035f2:	5ccb      	ldrb	r3, [r1, r3]
 80035f4:	f003 031f 	and.w	r3, r3, #31
 80035f8:	fa22 f303 	lsr.w	r3, r2, r3
 80035fc:	4a09      	ldr	r2, [pc, #36]	; (8003624 <HAL_RCC_ClockConfig+0x1f8>)
 80035fe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003600:	4b09      	ldr	r3, [pc, #36]	; (8003628 <HAL_RCC_ClockConfig+0x1fc>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4618      	mov	r0, r3
 8003606:	f7fd fb55 	bl	8000cb4 <HAL_InitTick>
 800360a:	4603      	mov	r3, r0
 800360c:	72fb      	strb	r3, [r7, #11]

  return status;
 800360e:	7afb      	ldrb	r3, [r7, #11]
}
 8003610:	4618      	mov	r0, r3
 8003612:	3710      	adds	r7, #16
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40022000 	.word	0x40022000
 800361c:	40021000 	.word	0x40021000
 8003620:	08007d24 	.word	0x08007d24
 8003624:	20000000 	.word	0x20000000
 8003628:	20000004 	.word	0x20000004

0800362c <HAL_RCC_GetSysClockFreq>:
=======
 8003560:	f000 f824 	bl	80035ac <HAL_RCC_GetSysClockFreq>
 8003564:	4602      	mov	r2, r0
 8003566:	4b0d      	ldr	r3, [pc, #52]	; (800359c <HAL_RCC_ClockConfig+0x1f0>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	091b      	lsrs	r3, r3, #4
 800356c:	f003 030f 	and.w	r3, r3, #15
 8003570:	490b      	ldr	r1, [pc, #44]	; (80035a0 <HAL_RCC_ClockConfig+0x1f4>)
 8003572:	5ccb      	ldrb	r3, [r1, r3]
 8003574:	f003 031f 	and.w	r3, r3, #31
 8003578:	fa22 f303 	lsr.w	r3, r2, r3
 800357c:	4a09      	ldr	r2, [pc, #36]	; (80035a4 <HAL_RCC_ClockConfig+0x1f8>)
 800357e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003580:	4b09      	ldr	r3, [pc, #36]	; (80035a8 <HAL_RCC_ClockConfig+0x1fc>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4618      	mov	r0, r3
 8003586:	f7fd fb7f 	bl	8000c88 <HAL_InitTick>
 800358a:	4603      	mov	r3, r0
 800358c:	72fb      	strb	r3, [r7, #11]

  return status;
 800358e:	7afb      	ldrb	r3, [r7, #11]
}
 8003590:	4618      	mov	r0, r3
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	40022000 	.word	0x40022000
 800359c:	40021000 	.word	0x40021000
 80035a0:	08007ccc 	.word	0x08007ccc
 80035a4:	20000000 	.word	0x20000000
 80035a8:	20000004 	.word	0x20000004

080035ac <HAL_RCC_GetSysClockFreq>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 800362c:	b480      	push	{r7}
 800362e:	b089      	sub	sp, #36	; 0x24
 8003630:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003632:	2300      	movs	r3, #0
 8003634:	61fb      	str	r3, [r7, #28]
 8003636:	2300      	movs	r3, #0
 8003638:	61bb      	str	r3, [r7, #24]
=======
 80035ac:	b480      	push	{r7}
 80035ae:	b089      	sub	sp, #36	; 0x24
 80035b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80035b2:	2300      	movs	r3, #0
 80035b4:	61fb      	str	r3, [r7, #28]
 80035b6:	2300      	movs	r3, #0
 80035b8:	61bb      	str	r3, [r7, #24]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
<<<<<<< HEAD
 800363a:	4b3e      	ldr	r3, [pc, #248]	; (8003734 <HAL_RCC_GetSysClockFreq+0x108>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f003 030c 	and.w	r3, r3, #12
 8003642:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003644:	4b3b      	ldr	r3, [pc, #236]	; (8003734 <HAL_RCC_GetSysClockFreq+0x108>)
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	f003 0303 	and.w	r3, r3, #3
 800364c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d005      	beq.n	8003660 <HAL_RCC_GetSysClockFreq+0x34>
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	2b0c      	cmp	r3, #12
 8003658:	d121      	bne.n	800369e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d11e      	bne.n	800369e <HAL_RCC_GetSysClockFreq+0x72>
=======
 80035ba:	4b3e      	ldr	r3, [pc, #248]	; (80036b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f003 030c 	and.w	r3, r3, #12
 80035c2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035c4:	4b3b      	ldr	r3, [pc, #236]	; (80036b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	f003 0303 	and.w	r3, r3, #3
 80035cc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d005      	beq.n	80035e0 <HAL_RCC_GetSysClockFreq+0x34>
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	2b0c      	cmp	r3, #12
 80035d8:	d121      	bne.n	800361e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d11e      	bne.n	800361e <HAL_RCC_GetSysClockFreq+0x72>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
<<<<<<< HEAD
 8003660:	4b34      	ldr	r3, [pc, #208]	; (8003734 <HAL_RCC_GetSysClockFreq+0x108>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0308 	and.w	r3, r3, #8
 8003668:	2b00      	cmp	r3, #0
 800366a:	d107      	bne.n	800367c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800366c:	4b31      	ldr	r3, [pc, #196]	; (8003734 <HAL_RCC_GetSysClockFreq+0x108>)
 800366e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003672:	0a1b      	lsrs	r3, r3, #8
 8003674:	f003 030f 	and.w	r3, r3, #15
 8003678:	61fb      	str	r3, [r7, #28]
 800367a:	e005      	b.n	8003688 <HAL_RCC_GetSysClockFreq+0x5c>
=======
 80035e0:	4b34      	ldr	r3, [pc, #208]	; (80036b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0308 	and.w	r3, r3, #8
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d107      	bne.n	80035fc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80035ec:	4b31      	ldr	r3, [pc, #196]	; (80036b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80035ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035f2:	0a1b      	lsrs	r3, r3, #8
 80035f4:	f003 030f 	and.w	r3, r3, #15
 80035f8:	61fb      	str	r3, [r7, #28]
 80035fa:	e005      	b.n	8003608 <HAL_RCC_GetSysClockFreq+0x5c>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
<<<<<<< HEAD
 800367c:	4b2d      	ldr	r3, [pc, #180]	; (8003734 <HAL_RCC_GetSysClockFreq+0x108>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	091b      	lsrs	r3, r3, #4
 8003682:	f003 030f 	and.w	r3, r3, #15
 8003686:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003688:	4a2b      	ldr	r2, [pc, #172]	; (8003738 <HAL_RCC_GetSysClockFreq+0x10c>)
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003690:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d10d      	bne.n	80036b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800369c:	e00a      	b.n	80036b4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	2b04      	cmp	r3, #4
 80036a2:	d102      	bne.n	80036aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80036a4:	4b25      	ldr	r3, [pc, #148]	; (800373c <HAL_RCC_GetSysClockFreq+0x110>)
 80036a6:	61bb      	str	r3, [r7, #24]
 80036a8:	e004      	b.n	80036b4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	2b08      	cmp	r3, #8
 80036ae:	d101      	bne.n	80036b4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80036b0:	4b23      	ldr	r3, [pc, #140]	; (8003740 <HAL_RCC_GetSysClockFreq+0x114>)
 80036b2:	61bb      	str	r3, [r7, #24]
=======
 80035fc:	4b2d      	ldr	r3, [pc, #180]	; (80036b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	091b      	lsrs	r3, r3, #4
 8003602:	f003 030f 	and.w	r3, r3, #15
 8003606:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003608:	4a2b      	ldr	r2, [pc, #172]	; (80036b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003610:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d10d      	bne.n	8003634 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800361c:	e00a      	b.n	8003634 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	2b04      	cmp	r3, #4
 8003622:	d102      	bne.n	800362a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003624:	4b25      	ldr	r3, [pc, #148]	; (80036bc <HAL_RCC_GetSysClockFreq+0x110>)
 8003626:	61bb      	str	r3, [r7, #24]
 8003628:	e004      	b.n	8003634 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	2b08      	cmp	r3, #8
 800362e:	d101      	bne.n	8003634 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003630:	4b23      	ldr	r3, [pc, #140]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003632:	61bb      	str	r3, [r7, #24]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
<<<<<<< HEAD
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	2b0c      	cmp	r3, #12
 80036b8:	d134      	bne.n	8003724 <HAL_RCC_GetSysClockFreq+0xf8>
=======
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	2b0c      	cmp	r3, #12
 8003638:	d134      	bne.n	80036a4 <HAL_RCC_GetSysClockFreq+0xf8>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
<<<<<<< HEAD
 80036ba:	4b1e      	ldr	r3, [pc, #120]	; (8003734 <HAL_RCC_GetSysClockFreq+0x108>)
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	f003 0303 	and.w	r3, r3, #3
 80036c2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d003      	beq.n	80036d2 <HAL_RCC_GetSysClockFreq+0xa6>
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	2b03      	cmp	r3, #3
 80036ce:	d003      	beq.n	80036d8 <HAL_RCC_GetSysClockFreq+0xac>
 80036d0:	e005      	b.n	80036de <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80036d2:	4b1a      	ldr	r3, [pc, #104]	; (800373c <HAL_RCC_GetSysClockFreq+0x110>)
 80036d4:	617b      	str	r3, [r7, #20]
      break;
 80036d6:	e005      	b.n	80036e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80036d8:	4b19      	ldr	r3, [pc, #100]	; (8003740 <HAL_RCC_GetSysClockFreq+0x114>)
 80036da:	617b      	str	r3, [r7, #20]
      break;
 80036dc:	e002      	b.n	80036e4 <HAL_RCC_GetSysClockFreq+0xb8>
=======
 800363a:	4b1e      	ldr	r3, [pc, #120]	; (80036b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	f003 0303 	and.w	r3, r3, #3
 8003642:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	2b02      	cmp	r3, #2
 8003648:	d003      	beq.n	8003652 <HAL_RCC_GetSysClockFreq+0xa6>
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	2b03      	cmp	r3, #3
 800364e:	d003      	beq.n	8003658 <HAL_RCC_GetSysClockFreq+0xac>
 8003650:	e005      	b.n	800365e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003652:	4b1a      	ldr	r3, [pc, #104]	; (80036bc <HAL_RCC_GetSysClockFreq+0x110>)
 8003654:	617b      	str	r3, [r7, #20]
      break;
 8003656:	e005      	b.n	8003664 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003658:	4b19      	ldr	r3, [pc, #100]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x114>)
 800365a:	617b      	str	r3, [r7, #20]
      break;
 800365c:	e002      	b.n	8003664 <HAL_RCC_GetSysClockFreq+0xb8>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
<<<<<<< HEAD
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	617b      	str	r3, [r7, #20]
      break;
 80036e2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036e4:	4b13      	ldr	r3, [pc, #76]	; (8003734 <HAL_RCC_GetSysClockFreq+0x108>)
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	091b      	lsrs	r3, r3, #4
 80036ea:	f003 0307 	and.w	r3, r3, #7
 80036ee:	3301      	adds	r3, #1
 80036f0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80036f2:	4b10      	ldr	r3, [pc, #64]	; (8003734 <HAL_RCC_GetSysClockFreq+0x108>)
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	0a1b      	lsrs	r3, r3, #8
 80036f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	fb03 f202 	mul.w	r2, r3, r2
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	fbb2 f3f3 	udiv	r3, r2, r3
 8003708:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800370a:	4b0a      	ldr	r3, [pc, #40]	; (8003734 <HAL_RCC_GetSysClockFreq+0x108>)
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	0e5b      	lsrs	r3, r3, #25
 8003710:	f003 0303 	and.w	r3, r3, #3
 8003714:	3301      	adds	r3, #1
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003722:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003724:	69bb      	ldr	r3, [r7, #24]
}
 8003726:	4618      	mov	r0, r3
 8003728:	3724      	adds	r7, #36	; 0x24
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	40021000 	.word	0x40021000
 8003738:	08007d3c 	.word	0x08007d3c
 800373c:	00f42400 	.word	0x00f42400
 8003740:	007a1200 	.word	0x007a1200

08003744 <HAL_RCC_GetHCLKFreq>:
=======
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	617b      	str	r3, [r7, #20]
      break;
 8003662:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003664:	4b13      	ldr	r3, [pc, #76]	; (80036b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	091b      	lsrs	r3, r3, #4
 800366a:	f003 0307 	and.w	r3, r3, #7
 800366e:	3301      	adds	r3, #1
 8003670:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003672:	4b10      	ldr	r3, [pc, #64]	; (80036b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	0a1b      	lsrs	r3, r3, #8
 8003678:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	fb03 f202 	mul.w	r2, r3, r2
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	fbb2 f3f3 	udiv	r3, r2, r3
 8003688:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800368a:	4b0a      	ldr	r3, [pc, #40]	; (80036b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	0e5b      	lsrs	r3, r3, #25
 8003690:	f003 0303 	and.w	r3, r3, #3
 8003694:	3301      	adds	r3, #1
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80036a4:	69bb      	ldr	r3, [r7, #24]
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3724      	adds	r7, #36	; 0x24
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	40021000 	.word	0x40021000
 80036b8:	08007ce4 	.word	0x08007ce4
 80036bc:	00f42400 	.word	0x00f42400
 80036c0:	007a1200 	.word	0x007a1200

080036c4 <HAL_RCC_GetHCLKFreq>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< HEAD
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003748:	4b03      	ldr	r3, [pc, #12]	; (8003758 <HAL_RCC_GetHCLKFreq+0x14>)
 800374a:	681b      	ldr	r3, [r3, #0]
}
 800374c:	4618      	mov	r0, r3
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	20000000 	.word	0x20000000

0800375c <HAL_RCC_GetPCLK1Freq>:
=======
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036c8:	4b03      	ldr	r3, [pc, #12]	; (80036d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80036ca:	681b      	ldr	r3, [r3, #0]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	20000000 	.word	0x20000000

080036dc <HAL_RCC_GetPCLK1Freq>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< HEAD
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003760:	f7ff fff0 	bl	8003744 <HAL_RCC_GetHCLKFreq>
 8003764:	4602      	mov	r2, r0
 8003766:	4b06      	ldr	r3, [pc, #24]	; (8003780 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	0a1b      	lsrs	r3, r3, #8
 800376c:	f003 0307 	and.w	r3, r3, #7
 8003770:	4904      	ldr	r1, [pc, #16]	; (8003784 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003772:	5ccb      	ldrb	r3, [r1, r3]
 8003774:	f003 031f 	and.w	r3, r3, #31
 8003778:	fa22 f303 	lsr.w	r3, r2, r3
}
 800377c:	4618      	mov	r0, r3
 800377e:	bd80      	pop	{r7, pc}
 8003780:	40021000 	.word	0x40021000
 8003784:	08007d34 	.word	0x08007d34

08003788 <HAL_RCC_GetClockConfig>:
=======
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80036e0:	f7ff fff0 	bl	80036c4 <HAL_RCC_GetHCLKFreq>
 80036e4:	4602      	mov	r2, r0
 80036e6:	4b06      	ldr	r3, [pc, #24]	; (8003700 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	0a1b      	lsrs	r3, r3, #8
 80036ec:	f003 0307 	and.w	r3, r3, #7
 80036f0:	4904      	ldr	r1, [pc, #16]	; (8003704 <HAL_RCC_GetPCLK1Freq+0x28>)
 80036f2:	5ccb      	ldrb	r3, [r1, r3]
 80036f4:	f003 031f 	and.w	r3, r3, #31
 80036f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	40021000 	.word	0x40021000
 8003704:	08007cdc 	.word	0x08007cdc

08003708 <HAL_RCC_GetClockConfig>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
<<<<<<< HEAD
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
=======
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
<<<<<<< HEAD
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	220f      	movs	r2, #15
 8003796:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003798:	4b12      	ldr	r3, [pc, #72]	; (80037e4 <HAL_RCC_GetClockConfig+0x5c>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f003 0203 	and.w	r2, r3, #3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80037a4:	4b0f      	ldr	r3, [pc, #60]	; (80037e4 <HAL_RCC_GetClockConfig+0x5c>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80037b0:	4b0c      	ldr	r3, [pc, #48]	; (80037e4 <HAL_RCC_GetClockConfig+0x5c>)
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80037bc:	4b09      	ldr	r3, [pc, #36]	; (80037e4 <HAL_RCC_GetClockConfig+0x5c>)
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	08db      	lsrs	r3, r3, #3
 80037c2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80037ca:	4b07      	ldr	r3, [pc, #28]	; (80037e8 <HAL_RCC_GetClockConfig+0x60>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0207 	and.w	r2, r3, #7
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	601a      	str	r2, [r3, #0]
}
 80037d6:	bf00      	nop
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	40021000 	.word	0x40021000
 80037e8:	40022000 	.word	0x40022000

080037ec <RCC_SetFlashLatencyFromMSIRange>:
=======
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	220f      	movs	r2, #15
 8003716:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003718:	4b12      	ldr	r3, [pc, #72]	; (8003764 <HAL_RCC_GetClockConfig+0x5c>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f003 0203 	and.w	r2, r3, #3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003724:	4b0f      	ldr	r3, [pc, #60]	; (8003764 <HAL_RCC_GetClockConfig+0x5c>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003730:	4b0c      	ldr	r3, [pc, #48]	; (8003764 <HAL_RCC_GetClockConfig+0x5c>)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800373c:	4b09      	ldr	r3, [pc, #36]	; (8003764 <HAL_RCC_GetClockConfig+0x5c>)
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	08db      	lsrs	r3, r3, #3
 8003742:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800374a:	4b07      	ldr	r3, [pc, #28]	; (8003768 <HAL_RCC_GetClockConfig+0x60>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0207 	and.w	r2, r3, #7
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	601a      	str	r2, [r3, #0]
}
 8003756:	bf00      	nop
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	40021000 	.word	0x40021000
 8003768:	40022000 	.word	0x40022000

0800376c <RCC_SetFlashLatencyFromMSIRange>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
<<<<<<< HEAD
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b086      	sub	sp, #24
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80037f4:	2300      	movs	r3, #0
 80037f6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80037f8:	4b2a      	ldr	r3, [pc, #168]	; (80038a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d003      	beq.n	800380c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003804:	f7ff f984 	bl	8002b10 <HAL_PWREx_GetVoltageRange>
 8003808:	6178      	str	r0, [r7, #20]
 800380a:	e014      	b.n	8003836 <RCC_SetFlashLatencyFromMSIRange+0x4a>
=======
 800376c:	b580      	push	{r7, lr}
 800376e:	b086      	sub	sp, #24
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003774:	2300      	movs	r3, #0
 8003776:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003778:	4b2a      	ldr	r3, [pc, #168]	; (8003824 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800377a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800377c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d003      	beq.n	800378c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003784:	f7ff f984 	bl	8002a90 <HAL_PWREx_GetVoltageRange>
 8003788:	6178      	str	r0, [r7, #20]
 800378a:	e014      	b.n	80037b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< HEAD
 800380c:	4b25      	ldr	r3, [pc, #148]	; (80038a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800380e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003810:	4a24      	ldr	r2, [pc, #144]	; (80038a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003816:	6593      	str	r3, [r2, #88]	; 0x58
 8003818:	4b22      	ldr	r3, [pc, #136]	; (80038a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800381a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800381c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003820:	60fb      	str	r3, [r7, #12]
 8003822:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003824:	f7ff f974 	bl	8002b10 <HAL_PWREx_GetVoltageRange>
 8003828:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800382a:	4b1e      	ldr	r3, [pc, #120]	; (80038a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800382c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800382e:	4a1d      	ldr	r2, [pc, #116]	; (80038a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003830:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003834:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800383c:	d10b      	bne.n	8003856 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2b80      	cmp	r3, #128	; 0x80
 8003842:	d919      	bls.n	8003878 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2ba0      	cmp	r3, #160	; 0xa0
 8003848:	d902      	bls.n	8003850 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800384a:	2302      	movs	r3, #2
 800384c:	613b      	str	r3, [r7, #16]
 800384e:	e013      	b.n	8003878 <RCC_SetFlashLatencyFromMSIRange+0x8c>
=======
 800378c:	4b25      	ldr	r3, [pc, #148]	; (8003824 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800378e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003790:	4a24      	ldr	r2, [pc, #144]	; (8003824 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003796:	6593      	str	r3, [r2, #88]	; 0x58
 8003798:	4b22      	ldr	r3, [pc, #136]	; (8003824 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800379a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800379c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037a0:	60fb      	str	r3, [r7, #12]
 80037a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80037a4:	f7ff f974 	bl	8002a90 <HAL_PWREx_GetVoltageRange>
 80037a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80037aa:	4b1e      	ldr	r3, [pc, #120]	; (8003824 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ae:	4a1d      	ldr	r2, [pc, #116]	; (8003824 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037bc:	d10b      	bne.n	80037d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2b80      	cmp	r3, #128	; 0x80
 80037c2:	d919      	bls.n	80037f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2ba0      	cmp	r3, #160	; 0xa0
 80037c8:	d902      	bls.n	80037d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80037ca:	2302      	movs	r3, #2
 80037cc:	613b      	str	r3, [r7, #16]
 80037ce:	e013      	b.n	80037f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
<<<<<<< HEAD
 8003850:	2301      	movs	r3, #1
 8003852:	613b      	str	r3, [r7, #16]
 8003854:	e010      	b.n	8003878 <RCC_SetFlashLatencyFromMSIRange+0x8c>
=======
 80037d0:	2301      	movs	r3, #1
 80037d2:	613b      	str	r3, [r7, #16]
 80037d4:	e010      	b.n	80037f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
<<<<<<< HEAD
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2b80      	cmp	r3, #128	; 0x80
 800385a:	d902      	bls.n	8003862 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800385c:	2303      	movs	r3, #3
 800385e:	613b      	str	r3, [r7, #16]
 8003860:	e00a      	b.n	8003878 <RCC_SetFlashLatencyFromMSIRange+0x8c>
=======
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2b80      	cmp	r3, #128	; 0x80
 80037da:	d902      	bls.n	80037e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80037dc:	2303      	movs	r3, #3
 80037de:	613b      	str	r3, [r7, #16]
 80037e0:	e00a      	b.n	80037f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
<<<<<<< HEAD
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2b80      	cmp	r3, #128	; 0x80
 8003866:	d102      	bne.n	800386e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003868:	2302      	movs	r3, #2
 800386a:	613b      	str	r3, [r7, #16]
 800386c:	e004      	b.n	8003878 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2b70      	cmp	r3, #112	; 0x70
 8003872:	d101      	bne.n	8003878 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003874:	2301      	movs	r3, #1
 8003876:	613b      	str	r3, [r7, #16]
=======
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2b80      	cmp	r3, #128	; 0x80
 80037e6:	d102      	bne.n	80037ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80037e8:	2302      	movs	r3, #2
 80037ea:	613b      	str	r3, [r7, #16]
 80037ec:	e004      	b.n	80037f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2b70      	cmp	r3, #112	; 0x70
 80037f2:	d101      	bne.n	80037f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80037f4:	2301      	movs	r3, #1
 80037f6:	613b      	str	r3, [r7, #16]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
<<<<<<< HEAD
 8003878:	4b0b      	ldr	r3, [pc, #44]	; (80038a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f023 0207 	bic.w	r2, r3, #7
 8003880:	4909      	ldr	r1, [pc, #36]	; (80038a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	4313      	orrs	r3, r2
 8003886:	600b      	str	r3, [r1, #0]
=======
 80037f8:	4b0b      	ldr	r3, [pc, #44]	; (8003828 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f023 0207 	bic.w	r2, r3, #7
 8003800:	4909      	ldr	r1, [pc, #36]	; (8003828 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	4313      	orrs	r3, r2
 8003806:	600b      	str	r3, [r1, #0]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
<<<<<<< HEAD
 8003888:	4b07      	ldr	r3, [pc, #28]	; (80038a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0307 	and.w	r3, r3, #7
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	429a      	cmp	r2, r3
 8003894:	d001      	beq.n	800389a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e000      	b.n	800389c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	3718      	adds	r7, #24
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	40021000 	.word	0x40021000
 80038a8:	40022000 	.word	0x40022000

080038ac <HAL_RCCEx_PeriphCLKConfig>:
=======
 8003808:	4b07      	ldr	r3, [pc, #28]	; (8003828 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0307 	and.w	r3, r3, #7
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	429a      	cmp	r2, r3
 8003814:	d001      	beq.n	800381a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e000      	b.n	800381c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3718      	adds	r7, #24
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	40021000 	.word	0x40021000
 8003828:	40022000 	.word	0x40022000

0800382c <HAL_RCCEx_PeriphCLKConfig>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
<<<<<<< HEAD
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80038b4:	2300      	movs	r3, #0
 80038b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80038b8:	2300      	movs	r3, #0
 80038ba:	74bb      	strb	r3, [r7, #18]
=======
 800382c:	b580      	push	{r7, lr}
 800382e:	b086      	sub	sp, #24
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003834:	2300      	movs	r3, #0
 8003836:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003838:	2300      	movs	r3, #0
 800383a:	74bb      	strb	r3, [r7, #18]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
<<<<<<< HEAD
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d041      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0xa0>
=======
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003844:	2b00      	cmp	r3, #0
 8003846:	d041      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
<<<<<<< HEAD
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038cc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80038d0:	d02a      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80038d2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80038d6:	d824      	bhi.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80038d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038dc:	d008      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80038de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038e2:	d81e      	bhi.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00a      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x52>
 80038e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038ec:	d010      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80038ee:	e018      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x76>
=======
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800384c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003850:	d02a      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003852:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003856:	d824      	bhi.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003858:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800385c:	d008      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800385e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003862:	d81e      	bhi.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00a      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003868:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800386c:	d010      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800386e:	e018      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
<<<<<<< HEAD
 80038f0:	4b86      	ldr	r3, [pc, #536]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	4a85      	ldr	r2, [pc, #532]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038fa:	60d3      	str	r3, [r2, #12]
=======
 8003870:	4b86      	ldr	r3, [pc, #536]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	4a85      	ldr	r2, [pc, #532]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003876:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800387a:	60d3      	str	r3, [r2, #12]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
<<<<<<< HEAD
 80038fc:	e015      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x7e>
=======
 800387c:	e015      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
<<<<<<< HEAD
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	3304      	adds	r3, #4
 8003902:	2100      	movs	r1, #0
 8003904:	4618      	mov	r0, r3
 8003906:	f000 fadd 	bl	8003ec4 <RCCEx_PLLSAI1_Config>
 800390a:	4603      	mov	r3, r0
 800390c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800390e:	e00c      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x7e>
=======
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	3304      	adds	r3, #4
 8003882:	2100      	movs	r1, #0
 8003884:	4618      	mov	r0, r3
 8003886:	f000 fadd 	bl	8003e44 <RCCEx_PLLSAI1_Config>
 800388a:	4603      	mov	r3, r0
 800388c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800388e:	e00c      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
<<<<<<< HEAD
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	3320      	adds	r3, #32
 8003914:	2100      	movs	r1, #0
 8003916:	4618      	mov	r0, r3
 8003918:	f000 fbc6 	bl	80040a8 <RCCEx_PLLSAI2_Config>
 800391c:	4603      	mov	r3, r0
 800391e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003920:	e003      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x7e>
=======
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	3320      	adds	r3, #32
 8003894:	2100      	movs	r1, #0
 8003896:	4618      	mov	r0, r3
 8003898:	f000 fbc6 	bl	8004028 <RCCEx_PLLSAI2_Config>
 800389c:	4603      	mov	r3, r0
 800389e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038a0:	e003      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
<<<<<<< HEAD
 8003922:	2301      	movs	r3, #1
 8003924:	74fb      	strb	r3, [r7, #19]
      break;
 8003926:	e000      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003928:	bf00      	nop
    }

    if(ret == HAL_OK)
 800392a:	7cfb      	ldrb	r3, [r7, #19]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d10b      	bne.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003930:	4b76      	ldr	r3, [pc, #472]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003936:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800393e:	4973      	ldr	r1, [pc, #460]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003940:	4313      	orrs	r3, r2
 8003942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003946:	e001      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0xa0>
=======
 80038a2:	2301      	movs	r3, #1
 80038a4:	74fb      	strb	r3, [r7, #19]
      break;
 80038a6:	e000      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80038a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038aa:	7cfb      	ldrb	r3, [r7, #19]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d10b      	bne.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038b0:	4b76      	ldr	r3, [pc, #472]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038be:	4973      	ldr	r1, [pc, #460]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80038c6:	e001      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 8003948:	7cfb      	ldrb	r3, [r7, #19]
 800394a:	74bb      	strb	r3, [r7, #18]
=======
 80038c8:	7cfb      	ldrb	r3, [r7, #19]
 80038ca:	74bb      	strb	r3, [r7, #18]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
<<<<<<< HEAD
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d041      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x130>
=======
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d041      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x130>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
<<<<<<< HEAD
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800395c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003960:	d02a      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003962:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003966:	d824      	bhi.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003968:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800396c:	d008      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800396e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003972:	d81e      	bhi.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00a      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003978:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800397c:	d010      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800397e:	e018      	b.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
=======
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80038e0:	d02a      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80038e2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80038e6:	d824      	bhi.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80038e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038ec:	d008      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80038ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038f2:	d81e      	bhi.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00a      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80038f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038fc:	d010      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80038fe:	e018      	b.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x106>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
<<<<<<< HEAD
 8003980:	4b62      	ldr	r3, [pc, #392]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	4a61      	ldr	r2, [pc, #388]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003986:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800398a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800398c:	e015      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
=======
 8003900:	4b62      	ldr	r3, [pc, #392]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	4a61      	ldr	r2, [pc, #388]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800390a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800390c:	e015      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x10e>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
<<<<<<< HEAD
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	3304      	adds	r3, #4
 8003992:	2100      	movs	r1, #0
 8003994:	4618      	mov	r0, r3
 8003996:	f000 fa95 	bl	8003ec4 <RCCEx_PLLSAI1_Config>
 800399a:	4603      	mov	r3, r0
 800399c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800399e:	e00c      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
=======
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	3304      	adds	r3, #4
 8003912:	2100      	movs	r1, #0
 8003914:	4618      	mov	r0, r3
 8003916:	f000 fa95 	bl	8003e44 <RCCEx_PLLSAI1_Config>
 800391a:	4603      	mov	r3, r0
 800391c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800391e:	e00c      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x10e>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
<<<<<<< HEAD
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	3320      	adds	r3, #32
 80039a4:	2100      	movs	r1, #0
 80039a6:	4618      	mov	r0, r3
 80039a8:	f000 fb7e 	bl	80040a8 <RCCEx_PLLSAI2_Config>
 80039ac:	4603      	mov	r3, r0
 80039ae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039b0:	e003      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
=======
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	3320      	adds	r3, #32
 8003924:	2100      	movs	r1, #0
 8003926:	4618      	mov	r0, r3
 8003928:	f000 fb7e 	bl	8004028 <RCCEx_PLLSAI2_Config>
 800392c:	4603      	mov	r3, r0
 800392e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003930:	e003      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x10e>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
<<<<<<< HEAD
 80039b2:	2301      	movs	r3, #1
 80039b4:	74fb      	strb	r3, [r7, #19]
      break;
 80039b6:	e000      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80039b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039ba:	7cfb      	ldrb	r3, [r7, #19]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d10b      	bne.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80039c0:	4b52      	ldr	r3, [pc, #328]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039ce:	494f      	ldr	r1, [pc, #316]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80039d6:	e001      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x130>
=======
 8003932:	2301      	movs	r3, #1
 8003934:	74fb      	strb	r3, [r7, #19]
      break;
 8003936:	e000      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003938:	bf00      	nop
    }

    if(ret == HAL_OK)
 800393a:	7cfb      	ldrb	r3, [r7, #19]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d10b      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003940:	4b52      	ldr	r3, [pc, #328]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003946:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800394e:	494f      	ldr	r1, [pc, #316]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003950:	4313      	orrs	r3, r2
 8003952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003956:	e001      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x130>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 80039d8:	7cfb      	ldrb	r3, [r7, #19]
 80039da:	74bb      	strb	r3, [r7, #18]
=======
 8003958:	7cfb      	ldrb	r3, [r7, #19]
 800395a:	74bb      	strb	r3, [r7, #18]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
<<<<<<< HEAD
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f000 80a0 	beq.w	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039ea:	2300      	movs	r3, #0
 80039ec:	747b      	strb	r3, [r7, #17]
=======
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 80a0 	beq.w	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800396a:	2300      	movs	r3, #0
 800396c:	747b      	strb	r3, [r7, #17]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
<<<<<<< HEAD
 80039ee:	4b47      	ldr	r3, [pc, #284]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x152>
 80039fa:	2301      	movs	r3, #1
 80039fc:	e000      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80039fe:	2300      	movs	r3, #0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00d      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a04:	4b41      	ldr	r3, [pc, #260]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a08:	4a40      	ldr	r2, [pc, #256]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a0e:	6593      	str	r3, [r2, #88]	; 0x58
 8003a10:	4b3e      	ldr	r3, [pc, #248]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a18:	60bb      	str	r3, [r7, #8]
 8003a1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	747b      	strb	r3, [r7, #17]
=======
 800396e:	4b47      	ldr	r3, [pc, #284]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800397a:	2301      	movs	r3, #1
 800397c:	e000      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800397e:	2300      	movs	r3, #0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00d      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003984:	4b41      	ldr	r3, [pc, #260]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003988:	4a40      	ldr	r2, [pc, #256]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800398a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800398e:	6593      	str	r3, [r2, #88]	; 0x58
 8003990:	4b3e      	ldr	r3, [pc, #248]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003998:	60bb      	str	r3, [r7, #8]
 800399a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800399c:	2301      	movs	r3, #1
 800399e:	747b      	strb	r3, [r7, #17]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
<<<<<<< HEAD
 8003a20:	4b3b      	ldr	r3, [pc, #236]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a3a      	ldr	r2, [pc, #232]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a2a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a2c:	f7fd fa4c 	bl	8000ec8 <HAL_GetTick>
 8003a30:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a32:	e009      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a34:	f7fd fa48 	bl	8000ec8 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d902      	bls.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	74fb      	strb	r3, [r7, #19]
        break;
 8003a46:	e005      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a48:	4b31      	ldr	r3, [pc, #196]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d0ef      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x188>
=======
 80039a0:	4b3b      	ldr	r3, [pc, #236]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a3a      	ldr	r2, [pc, #232]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80039a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039ac:	f7fd fa6e 	bl	8000e8c <HAL_GetTick>
 80039b0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80039b2:	e009      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039b4:	f7fd fa6a 	bl	8000e8c <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d902      	bls.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	74fb      	strb	r3, [r7, #19]
        break;
 80039c6:	e005      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80039c8:	4b31      	ldr	r3, [pc, #196]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d0ef      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x188>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
      }
    }

    if(ret == HAL_OK)
<<<<<<< HEAD
 8003a54:	7cfb      	ldrb	r3, [r7, #19]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d15c      	bne.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a5a:	4b2c      	ldr	r3, [pc, #176]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a64:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d01f      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d019      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a78:	4b24      	ldr	r3, [pc, #144]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a82:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a84:	4b21      	ldr	r3, [pc, #132]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a8a:	4a20      	ldr	r2, [pc, #128]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a94:	4b1d      	ldr	r3, [pc, #116]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a9a:	4a1c      	ldr	r2, [pc, #112]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003aa4:	4a19      	ldr	r2, [pc, #100]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
=======
 80039d4:	7cfb      	ldrb	r3, [r7, #19]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d15c      	bne.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80039da:	4b2c      	ldr	r3, [pc, #176]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039e4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d01f      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d019      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80039f8:	4b24      	ldr	r3, [pc, #144]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a02:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a04:	4b21      	ldr	r3, [pc, #132]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a0a:	4a20      	ldr	r2, [pc, #128]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a14:	4b1d      	ldr	r3, [pc, #116]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a1a:	4a1c      	ldr	r2, [pc, #112]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a24:	4a19      	ldr	r2, [pc, #100]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
<<<<<<< HEAD
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d016      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab6:	f7fd fa07 	bl	8000ec8 <HAL_GetTick>
 8003aba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003abc:	e00b      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003abe:	f7fd fa03 	bl	8000ec8 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d902      	bls.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	74fb      	strb	r3, [r7, #19]
            break;
 8003ad4:	e006      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ad6:	4b0d      	ldr	r3, [pc, #52]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d0ec      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x212>
=======
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d016      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a36:	f7fd fa29 	bl	8000e8c <HAL_GetTick>
 8003a3a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a3c:	e00b      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a3e:	f7fd fa25 	bl	8000e8c <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d902      	bls.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	74fb      	strb	r3, [r7, #19]
            break;
 8003a54:	e006      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a56:	4b0d      	ldr	r3, [pc, #52]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d0ec      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x212>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
          }
        }
      }

      if(ret == HAL_OK)
<<<<<<< HEAD
 8003ae4:	7cfb      	ldrb	r3, [r7, #19]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10c      	bne.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003aea:	4b08      	ldr	r3, [pc, #32]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003afa:	4904      	ldr	r1, [pc, #16]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003b02:	e009      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x26c>
=======
 8003a64:	7cfb      	ldrb	r3, [r7, #19]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10c      	bne.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a6a:	4b08      	ldr	r3, [pc, #32]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a7a:	4904      	ldr	r1, [pc, #16]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003a82:	e009      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x26c>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
      }
      else
      {
        /* set overall return value */
        status = ret;
<<<<<<< HEAD
 8003b04:	7cfb      	ldrb	r3, [r7, #19]
 8003b06:	74bb      	strb	r3, [r7, #18]
 8003b08:	e006      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003b0a:	bf00      	nop
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	40007000 	.word	0x40007000
=======
 8003a84:	7cfb      	ldrb	r3, [r7, #19]
 8003a86:	74bb      	strb	r3, [r7, #18]
 8003a88:	e006      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003a8a:	bf00      	nop
 8003a8c:	40021000 	.word	0x40021000
 8003a90:	40007000 	.word	0x40007000
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 8003b14:	7cfb      	ldrb	r3, [r7, #19]
 8003b16:	74bb      	strb	r3, [r7, #18]
=======
 8003a94:	7cfb      	ldrb	r3, [r7, #19]
 8003a96:	74bb      	strb	r3, [r7, #18]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
<<<<<<< HEAD
 8003b18:	7c7b      	ldrb	r3, [r7, #17]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d105      	bne.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b1e:	4ba6      	ldr	r3, [pc, #664]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b22:	4aa5      	ldr	r2, [pc, #660]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b28:	6593      	str	r3, [r2, #88]	; 0x58
=======
 8003a98:	7c7b      	ldrb	r3, [r7, #17]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d105      	bne.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a9e:	4ba6      	ldr	r3, [pc, #664]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa2:	4aa5      	ldr	r2, [pc, #660]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003aa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aa8:	6593      	str	r3, [r2, #88]	; 0x58
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
<<<<<<< HEAD
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00a      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
=======
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00a      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
<<<<<<< HEAD
 8003b36:	4ba0      	ldr	r3, [pc, #640]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b3c:	f023 0203 	bic.w	r2, r3, #3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b44:	499c      	ldr	r1, [pc, #624]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
 8003ab6:	4ba0      	ldr	r3, [pc, #640]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003abc:	f023 0203 	bic.w	r2, r3, #3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac4:	499c      	ldr	r1, [pc, #624]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
<<<<<<< HEAD
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00a      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
=======
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00a      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
<<<<<<< HEAD
 8003b58:	4b97      	ldr	r3, [pc, #604]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b5e:	f023 020c 	bic.w	r2, r3, #12
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b66:	4994      	ldr	r1, [pc, #592]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
 8003ad8:	4b97      	ldr	r3, [pc, #604]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ade:	f023 020c 	bic.w	r2, r3, #12
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae6:	4994      	ldr	r1, [pc, #592]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
<<<<<<< HEAD
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0304 	and.w	r3, r3, #4
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00a      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
=======
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0304 	and.w	r3, r3, #4
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00a      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
<<<<<<< HEAD
 8003b7a:	4b8f      	ldr	r3, [pc, #572]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b80:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b88:	498b      	ldr	r1, [pc, #556]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
 8003afa:	4b8f      	ldr	r3, [pc, #572]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b00:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b08:	498b      	ldr	r1, [pc, #556]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
<<<<<<< HEAD
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0308 	and.w	r3, r3, #8
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d00a      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x306>
=======
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0308 	and.w	r3, r3, #8
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00a      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x306>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
<<<<<<< HEAD
 8003b9c:	4b86      	ldr	r3, [pc, #536]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003baa:	4983      	ldr	r1, [pc, #524]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
 8003b1c:	4b86      	ldr	r3, [pc, #536]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b22:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b2a:	4983      	ldr	r1, [pc, #524]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
<<<<<<< HEAD
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0310 	and.w	r3, r3, #16
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00a      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x328>
=======
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0310 	and.w	r3, r3, #16
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00a      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x328>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
<<<<<<< HEAD
 8003bbe:	4b7e      	ldr	r3, [pc, #504]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bcc:	497a      	ldr	r1, [pc, #488]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
 8003b3e:	4b7e      	ldr	r3, [pc, #504]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b4c:	497a      	ldr	r1, [pc, #488]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
<<<<<<< HEAD
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0320 	and.w	r3, r3, #32
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00a      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
=======
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0320 	and.w	r3, r3, #32
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00a      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x34a>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
<<<<<<< HEAD
 8003be0:	4b75      	ldr	r3, [pc, #468]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bee:	4972      	ldr	r1, [pc, #456]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
 8003b60:	4b75      	ldr	r3, [pc, #468]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b66:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b6e:	4972      	ldr	r1, [pc, #456]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
<<<<<<< HEAD
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00a      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c02:	4b6d      	ldr	r3, [pc, #436]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c08:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c10:	4969      	ldr	r1, [pc, #420]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00a      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b82:	4b6d      	ldr	r3, [pc, #436]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b88:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b90:	4969      	ldr	r1, [pc, #420]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
<<<<<<< HEAD
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00a      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c24:	4b64      	ldr	r3, [pc, #400]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c32:	4961      	ldr	r1, [pc, #388]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00a      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ba4:	4b64      	ldr	r3, [pc, #400]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003baa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bb2:	4961      	ldr	r1, [pc, #388]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
<<<<<<< HEAD
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00a      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
=======
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00a      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
<<<<<<< HEAD
 8003c46:	4b5c      	ldr	r3, [pc, #368]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c4c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c54:	4958      	ldr	r1, [pc, #352]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
 8003bc6:	4b5c      	ldr	r3, [pc, #368]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bcc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bd4:	4958      	ldr	r1, [pc, #352]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
<<<<<<< HEAD
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00a      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
=======
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00a      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
<<<<<<< HEAD
 8003c68:	4b53      	ldr	r3, [pc, #332]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c6e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c76:	4950      	ldr	r1, [pc, #320]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
 8003be8:	4b53      	ldr	r3, [pc, #332]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf6:	4950      	ldr	r1, [pc, #320]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
<<<<<<< HEAD
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00a      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
=======
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00a      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
<<<<<<< HEAD
 8003c8a:	4b4b      	ldr	r3, [pc, #300]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c98:	4947      	ldr	r1, [pc, #284]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
 8003c0a:	4b4b      	ldr	r3, [pc, #300]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c18:	4947      	ldr	r1, [pc, #284]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
<<<<<<< HEAD
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00a      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x416>
=======
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00a      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x416>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
<<<<<<< HEAD
 8003cac:	4b42      	ldr	r3, [pc, #264]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003cae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003cb2:	f023 0203 	bic.w	r2, r3, #3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cba:	493f      	ldr	r1, [pc, #252]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
=======
 8003c2c:	4b42      	ldr	r3, [pc, #264]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c32:	f023 0203 	bic.w	r2, r3, #3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c3a:	493f      	ldr	r1, [pc, #252]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
<<<<<<< HEAD
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d028      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cce:	4b3a      	ldr	r3, [pc, #232]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cdc:	4936      	ldr	r1, [pc, #216]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cec:	d106      	bne.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cee:	4b32      	ldr	r3, [pc, #200]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	4a31      	ldr	r2, [pc, #196]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003cf4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cf8:	60d3      	str	r3, [r2, #12]
 8003cfa:	e011      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x474>
=======
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d028      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c4e:	4b3a      	ldr	r3, [pc, #232]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c54:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c5c:	4936      	ldr	r1, [pc, #216]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c6c:	d106      	bne.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c6e:	4b32      	ldr	r3, [pc, #200]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	4a31      	ldr	r2, [pc, #196]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c78:	60d3      	str	r3, [r2, #12]
 8003c7a:	e011      	b.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x474>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
<<<<<<< HEAD
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d04:	d10c      	bne.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	3304      	adds	r3, #4
 8003d0a:	2101      	movs	r1, #1
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f000 f8d9 	bl	8003ec4 <RCCEx_PLLSAI1_Config>
 8003d12:	4603      	mov	r3, r0
 8003d14:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003d16:	7cfb      	ldrb	r3, [r7, #19]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d001      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8003d1c:	7cfb      	ldrb	r3, [r7, #19]
 8003d1e:	74bb      	strb	r3, [r7, #18]
=======
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c84:	d10c      	bne.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	3304      	adds	r3, #4
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f000 f8d9 	bl	8003e44 <RCCEx_PLLSAI1_Config>
 8003c92:	4603      	mov	r3, r0
 8003c94:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003c96:	7cfb      	ldrb	r3, [r7, #19]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8003c9c:	7cfb      	ldrb	r3, [r7, #19]
 8003c9e:	74bb      	strb	r3, [r7, #18]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
<<<<<<< HEAD
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d028      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d2c:	4b22      	ldr	r3, [pc, #136]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d32:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d3a:	491f      	ldr	r1, [pc, #124]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d4a:	d106      	bne.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d4c:	4b1a      	ldr	r3, [pc, #104]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	4a19      	ldr	r2, [pc, #100]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d56:	60d3      	str	r3, [r2, #12]
 8003d58:	e011      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
=======
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d028      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003cac:	4b22      	ldr	r3, [pc, #136]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cba:	491f      	ldr	r1, [pc, #124]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cca:	d106      	bne.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ccc:	4b1a      	ldr	r3, [pc, #104]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	4a19      	ldr	r2, [pc, #100]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003cd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cd6:	60d3      	str	r3, [r2, #12]
 8003cd8:	e011      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
<<<<<<< HEAD
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d62:	d10c      	bne.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	3304      	adds	r3, #4
 8003d68:	2101      	movs	r1, #1
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f000 f8aa 	bl	8003ec4 <RCCEx_PLLSAI1_Config>
 8003d70:	4603      	mov	r3, r0
 8003d72:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d74:	7cfb      	ldrb	r3, [r7, #19]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d001      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8003d7a:	7cfb      	ldrb	r3, [r7, #19]
 8003d7c:	74bb      	strb	r3, [r7, #18]
=======
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cde:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ce2:	d10c      	bne.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	3304      	adds	r3, #4
 8003ce8:	2101      	movs	r1, #1
 8003cea:	4618      	mov	r0, r3
 8003cec:	f000 f8aa 	bl	8003e44 <RCCEx_PLLSAI1_Config>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cf4:	7cfb      	ldrb	r3, [r7, #19]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d001      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8003cfa:	7cfb      	ldrb	r3, [r7, #19]
 8003cfc:	74bb      	strb	r3, [r7, #18]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
<<<<<<< HEAD
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d02a      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d8a:	4b0b      	ldr	r3, [pc, #44]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d90:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d98:	4907      	ldr	r1, [pc, #28]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003da4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003da8:	d108      	bne.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003daa:	4b03      	ldr	r3, [pc, #12]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	4a02      	ldr	r2, [pc, #8]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003db0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003db4:	60d3      	str	r3, [r2, #12]
 8003db6:	e013      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8003db8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dc0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003dc4:	d10c      	bne.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	3304      	adds	r3, #4
 8003dca:	2101      	movs	r1, #1
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f000 f879 	bl	8003ec4 <RCCEx_PLLSAI1_Config>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003dd6:	7cfb      	ldrb	r3, [r7, #19]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8003ddc:	7cfb      	ldrb	r3, [r7, #19]
 8003dde:	74bb      	strb	r3, [r7, #18]
=======
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d02a      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d0a:	4b0b      	ldr	r3, [pc, #44]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d10:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d18:	4907      	ldr	r1, [pc, #28]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d28:	d108      	bne.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d2a:	4b03      	ldr	r3, [pc, #12]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	4a02      	ldr	r2, [pc, #8]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d34:	60d3      	str	r3, [r2, #12]
 8003d36:	e013      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8003d38:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d44:	d10c      	bne.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	3304      	adds	r3, #4
 8003d4a:	2101      	movs	r1, #1
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f000 f879 	bl	8003e44 <RCCEx_PLLSAI1_Config>
 8003d52:	4603      	mov	r3, r0
 8003d54:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d56:	7cfb      	ldrb	r3, [r7, #19]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d001      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8003d5c:	7cfb      	ldrb	r3, [r7, #19]
 8003d5e:	74bb      	strb	r3, [r7, #18]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
<<<<<<< HEAD
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d02f      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
=======
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d02f      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
<<<<<<< HEAD
 8003dec:	4b2c      	ldr	r3, [pc, #176]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dfa:	4929      	ldr	r1, [pc, #164]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e0a:	d10d      	bne.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	3304      	adds	r3, #4
 8003e10:	2102      	movs	r1, #2
 8003e12:	4618      	mov	r0, r3
 8003e14:	f000 f856 	bl	8003ec4 <RCCEx_PLLSAI1_Config>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e1c:	7cfb      	ldrb	r3, [r7, #19]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d014      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003e22:	7cfb      	ldrb	r3, [r7, #19]
 8003e24:	74bb      	strb	r3, [r7, #18]
 8003e26:	e011      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
=======
 8003d6c:	4b2c      	ldr	r3, [pc, #176]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d72:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d7a:	4929      	ldr	r1, [pc, #164]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d8a:	d10d      	bne.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	3304      	adds	r3, #4
 8003d90:	2102      	movs	r1, #2
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 f856 	bl	8003e44 <RCCEx_PLLSAI1_Config>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d9c:	7cfb      	ldrb	r3, [r7, #19]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d014      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003da2:	7cfb      	ldrb	r3, [r7, #19]
 8003da4:	74bb      	strb	r3, [r7, #18]
 8003da6:	e011      	b.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
<<<<<<< HEAD
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e30:	d10c      	bne.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	3320      	adds	r3, #32
 8003e36:	2102      	movs	r1, #2
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f000 f935 	bl	80040a8 <RCCEx_PLLSAI2_Config>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e42:	7cfb      	ldrb	r3, [r7, #19]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d001      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003e48:	7cfb      	ldrb	r3, [r7, #19]
 8003e4a:	74bb      	strb	r3, [r7, #18]
=======
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003db0:	d10c      	bne.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	3320      	adds	r3, #32
 8003db6:	2102      	movs	r1, #2
 8003db8:	4618      	mov	r0, r3
 8003dba:	f000 f935 	bl	8004028 <RCCEx_PLLSAI2_Config>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003dc2:	7cfb      	ldrb	r3, [r7, #19]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003dc8:	7cfb      	ldrb	r3, [r7, #19]
 8003dca:	74bb      	strb	r3, [r7, #18]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
<<<<<<< HEAD
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00b      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
=======
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00b      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
<<<<<<< HEAD
 8003e58:	4b11      	ldr	r3, [pc, #68]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e5e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e68:	490d      	ldr	r1, [pc, #52]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
 8003dd8:	4b11      	ldr	r3, [pc, #68]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dde:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003de8:	490d      	ldr	r1, [pc, #52]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
<<<<<<< HEAD
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00b      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
=======
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00b      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
<<<<<<< HEAD
 8003e7c:	4b08      	ldr	r3, [pc, #32]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e82:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e8c:	4904      	ldr	r1, [pc, #16]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
 8003dfc:	4b08      	ldr	r3, [pc, #32]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e02:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e0c:	4904      	ldr	r1, [pc, #16]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
<<<<<<< HEAD
 8003e94:	7cbb      	ldrb	r3, [r7, #18]
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3718      	adds	r7, #24
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	40021000 	.word	0x40021000

08003ea4 <HAL_RCCEx_EnableMSIPLLMode>:
=======
 8003e14:	7cbb      	ldrb	r3, [r7, #18]
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3718      	adds	r7, #24
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	40021000 	.word	0x40021000

08003e24 <HAL_RCCEx_EnableMSIPLLMode>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
<<<<<<< HEAD
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003ea8:	4b05      	ldr	r3, [pc, #20]	; (8003ec0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a04      	ldr	r2, [pc, #16]	; (8003ec0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003eae:	f043 0304 	orr.w	r3, r3, #4
 8003eb2:	6013      	str	r3, [r2, #0]
}
 8003eb4:	bf00      	nop
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	40021000 	.word	0x40021000

08003ec4 <RCCEx_PLLSAI1_Config>:
=======
 8003e24:	b480      	push	{r7}
 8003e26:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003e28:	4b05      	ldr	r3, [pc, #20]	; (8003e40 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a04      	ldr	r2, [pc, #16]	; (8003e40 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003e2e:	f043 0304 	orr.w	r3, r3, #4
 8003e32:	6013      	str	r3, [r2, #0]
}
 8003e34:	bf00      	nop
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	40021000 	.word	0x40021000

08003e44 <RCCEx_PLLSAI1_Config>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
<<<<<<< HEAD
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	73fb      	strb	r3, [r7, #15]
=======
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	73fb      	strb	r3, [r7, #15]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
<<<<<<< HEAD
 8003ed2:	4b74      	ldr	r3, [pc, #464]	; (80040a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	f003 0303 	and.w	r3, r3, #3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d018      	beq.n	8003f10 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003ede:	4b71      	ldr	r3, [pc, #452]	; (80040a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	f003 0203 	and.w	r2, r3, #3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d10d      	bne.n	8003f0a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
       ||
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d009      	beq.n	8003f0a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003ef6:	4b6b      	ldr	r3, [pc, #428]	; (80040a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	091b      	lsrs	r3, r3, #4
 8003efc:	f003 0307 	and.w	r3, r3, #7
 8003f00:	1c5a      	adds	r2, r3, #1
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
       ||
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d047      	beq.n	8003f9a <RCCEx_PLLSAI1_Config+0xd6>
=======
 8003e52:	4b74      	ldr	r3, [pc, #464]	; (8004024 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	f003 0303 	and.w	r3, r3, #3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d018      	beq.n	8003e90 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003e5e:	4b71      	ldr	r3, [pc, #452]	; (8004024 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	f003 0203 	and.w	r2, r3, #3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d10d      	bne.n	8003e8a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
       ||
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d009      	beq.n	8003e8a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003e76:	4b6b      	ldr	r3, [pc, #428]	; (8004024 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	091b      	lsrs	r3, r3, #4
 8003e7c:	f003 0307 	and.w	r3, r3, #7
 8003e80:	1c5a      	adds	r2, r3, #1
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
       ||
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d047      	beq.n	8003f1a <RCCEx_PLLSAI1_Config+0xd6>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
#endif
      )
    {
      status = HAL_ERROR;
<<<<<<< HEAD
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	73fb      	strb	r3, [r7, #15]
 8003f0e:	e044      	b.n	8003f9a <RCCEx_PLLSAI1_Config+0xd6>
=======
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	73fb      	strb	r3, [r7, #15]
 8003e8e:	e044      	b.n	8003f1a <RCCEx_PLLSAI1_Config+0xd6>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
<<<<<<< HEAD
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2b03      	cmp	r3, #3
 8003f16:	d018      	beq.n	8003f4a <RCCEx_PLLSAI1_Config+0x86>
 8003f18:	2b03      	cmp	r3, #3
 8003f1a:	d825      	bhi.n	8003f68 <RCCEx_PLLSAI1_Config+0xa4>
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d002      	beq.n	8003f26 <RCCEx_PLLSAI1_Config+0x62>
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d009      	beq.n	8003f38 <RCCEx_PLLSAI1_Config+0x74>
 8003f24:	e020      	b.n	8003f68 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f26:	4b5f      	ldr	r3, [pc, #380]	; (80040a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d11d      	bne.n	8003f6e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f36:	e01a      	b.n	8003f6e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f38:	4b5a      	ldr	r3, [pc, #360]	; (80040a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d116      	bne.n	8003f72 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f48:	e013      	b.n	8003f72 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f4a:	4b56      	ldr	r3, [pc, #344]	; (80040a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10f      	bne.n	8003f76 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f56:	4b53      	ldr	r3, [pc, #332]	; (80040a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d109      	bne.n	8003f76 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f66:	e006      	b.n	8003f76 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f6c:	e004      	b.n	8003f78 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f6e:	bf00      	nop
 8003f70:	e002      	b.n	8003f78 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f72:	bf00      	nop
 8003f74:	e000      	b.n	8003f78 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f76:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f78:	7bfb      	ldrb	r3, [r7, #15]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10d      	bne.n	8003f9a <RCCEx_PLLSAI1_Config+0xd6>
=======
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2b03      	cmp	r3, #3
 8003e96:	d018      	beq.n	8003eca <RCCEx_PLLSAI1_Config+0x86>
 8003e98:	2b03      	cmp	r3, #3
 8003e9a:	d825      	bhi.n	8003ee8 <RCCEx_PLLSAI1_Config+0xa4>
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d002      	beq.n	8003ea6 <RCCEx_PLLSAI1_Config+0x62>
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d009      	beq.n	8003eb8 <RCCEx_PLLSAI1_Config+0x74>
 8003ea4:	e020      	b.n	8003ee8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ea6:	4b5f      	ldr	r3, [pc, #380]	; (8004024 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d11d      	bne.n	8003eee <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eb6:	e01a      	b.n	8003eee <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003eb8:	4b5a      	ldr	r3, [pc, #360]	; (8004024 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d116      	bne.n	8003ef2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ec8:	e013      	b.n	8003ef2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003eca:	4b56      	ldr	r3, [pc, #344]	; (8004024 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d10f      	bne.n	8003ef6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ed6:	4b53      	ldr	r3, [pc, #332]	; (8004024 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d109      	bne.n	8003ef6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ee6:	e006      	b.n	8003ef6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	73fb      	strb	r3, [r7, #15]
      break;
 8003eec:	e004      	b.n	8003ef8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003eee:	bf00      	nop
 8003ef0:	e002      	b.n	8003ef8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ef2:	bf00      	nop
 8003ef4:	e000      	b.n	8003ef8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ef6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ef8:	7bfb      	ldrb	r3, [r7, #15]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10d      	bne.n	8003f1a <RCCEx_PLLSAI1_Config+0xd6>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
<<<<<<< HEAD
 8003f7e:	4b49      	ldr	r3, [pc, #292]	; (80040a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6819      	ldr	r1, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	011b      	lsls	r3, r3, #4
 8003f92:	430b      	orrs	r3, r1
 8003f94:	4943      	ldr	r1, [pc, #268]	; (80040a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	60cb      	str	r3, [r1, #12]
=======
 8003efe:	4b49      	ldr	r3, [pc, #292]	; (8004024 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6819      	ldr	r1, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	011b      	lsls	r3, r3, #4
 8003f12:	430b      	orrs	r3, r1
 8003f14:	4943      	ldr	r1, [pc, #268]	; (8004024 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	60cb      	str	r3, [r1, #12]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
#endif
    }
  }

  if(status == HAL_OK)
<<<<<<< HEAD
 8003f9a:	7bfb      	ldrb	r3, [r7, #15]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d17c      	bne.n	800409a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003fa0:	4b40      	ldr	r3, [pc, #256]	; (80040a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a3f      	ldr	r2, [pc, #252]	; (80040a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fa6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003faa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fac:	f7fc ff8c 	bl	8000ec8 <HAL_GetTick>
 8003fb0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003fb2:	e009      	b.n	8003fc8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003fb4:	f7fc ff88 	bl	8000ec8 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d902      	bls.n	8003fc8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	73fb      	strb	r3, [r7, #15]
        break;
 8003fc6:	e005      	b.n	8003fd4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003fc8:	4b36      	ldr	r3, [pc, #216]	; (80040a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1ef      	bne.n	8003fb4 <RCCEx_PLLSAI1_Config+0xf0>
=======
 8003f1a:	7bfb      	ldrb	r3, [r7, #15]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d17c      	bne.n	800401a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003f20:	4b40      	ldr	r3, [pc, #256]	; (8004024 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a3f      	ldr	r2, [pc, #252]	; (8004024 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f26:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f2c:	f7fc ffae 	bl	8000e8c <HAL_GetTick>
 8003f30:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f32:	e009      	b.n	8003f48 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f34:	f7fc ffaa 	bl	8000e8c <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d902      	bls.n	8003f48 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	73fb      	strb	r3, [r7, #15]
        break;
 8003f46:	e005      	b.n	8003f54 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f48:	4b36      	ldr	r3, [pc, #216]	; (8004024 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1ef      	bne.n	8003f34 <RCCEx_PLLSAI1_Config+0xf0>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
      }
    }

    if(status == HAL_OK)
<<<<<<< HEAD
 8003fd4:	7bfb      	ldrb	r3, [r7, #15]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d15f      	bne.n	800409a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d110      	bne.n	8004002 <RCCEx_PLLSAI1_Config+0x13e>
=======
 8003f54:	7bfb      	ldrb	r3, [r7, #15]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d15f      	bne.n	800401a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d110      	bne.n	8003f82 <RCCEx_PLLSAI1_Config+0x13e>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
<<<<<<< HEAD
 8003fe0:	4b30      	ldr	r3, [pc, #192]	; (80040a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003fe8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	6892      	ldr	r2, [r2, #8]
 8003ff0:	0211      	lsls	r1, r2, #8
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	68d2      	ldr	r2, [r2, #12]
 8003ff6:	06d2      	lsls	r2, r2, #27
 8003ff8:	430a      	orrs	r2, r1
 8003ffa:	492a      	ldr	r1, [pc, #168]	; (80040a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	610b      	str	r3, [r1, #16]
 8004000:	e027      	b.n	8004052 <RCCEx_PLLSAI1_Config+0x18e>
=======
 8003f60:	4b30      	ldr	r3, [pc, #192]	; (8004024 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003f68:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	6892      	ldr	r2, [r2, #8]
 8003f70:	0211      	lsls	r1, r2, #8
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	68d2      	ldr	r2, [r2, #12]
 8003f76:	06d2      	lsls	r2, r2, #27
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	492a      	ldr	r1, [pc, #168]	; (8004024 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	610b      	str	r3, [r1, #16]
 8003f80:	e027      	b.n	8003fd2 <RCCEx_PLLSAI1_Config+0x18e>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
<<<<<<< HEAD
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	2b01      	cmp	r3, #1
 8004006:	d112      	bne.n	800402e <RCCEx_PLLSAI1_Config+0x16a>
=======
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d112      	bne.n	8003fae <RCCEx_PLLSAI1_Config+0x16a>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
<<<<<<< HEAD
 8004008:	4b26      	ldr	r3, [pc, #152]	; (80040a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004010:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	6892      	ldr	r2, [r2, #8]
 8004018:	0211      	lsls	r1, r2, #8
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	6912      	ldr	r2, [r2, #16]
 800401e:	0852      	lsrs	r2, r2, #1
 8004020:	3a01      	subs	r2, #1
 8004022:	0552      	lsls	r2, r2, #21
 8004024:	430a      	orrs	r2, r1
 8004026:	491f      	ldr	r1, [pc, #124]	; (80040a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004028:	4313      	orrs	r3, r2
 800402a:	610b      	str	r3, [r1, #16]
 800402c:	e011      	b.n	8004052 <RCCEx_PLLSAI1_Config+0x18e>
=======
 8003f88:	4b26      	ldr	r3, [pc, #152]	; (8004024 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003f90:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	6892      	ldr	r2, [r2, #8]
 8003f98:	0211      	lsls	r1, r2, #8
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	6912      	ldr	r2, [r2, #16]
 8003f9e:	0852      	lsrs	r2, r2, #1
 8003fa0:	3a01      	subs	r2, #1
 8003fa2:	0552      	lsls	r2, r2, #21
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	491f      	ldr	r1, [pc, #124]	; (8004024 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	610b      	str	r3, [r1, #16]
 8003fac:	e011      	b.n	8003fd2 <RCCEx_PLLSAI1_Config+0x18e>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
<<<<<<< HEAD
 800402e:	4b1d      	ldr	r3, [pc, #116]	; (80040a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004036:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	6892      	ldr	r2, [r2, #8]
 800403e:	0211      	lsls	r1, r2, #8
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	6952      	ldr	r2, [r2, #20]
 8004044:	0852      	lsrs	r2, r2, #1
 8004046:	3a01      	subs	r2, #1
 8004048:	0652      	lsls	r2, r2, #25
 800404a:	430a      	orrs	r2, r1
 800404c:	4915      	ldr	r1, [pc, #84]	; (80040a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800404e:	4313      	orrs	r3, r2
 8004050:	610b      	str	r3, [r1, #16]
=======
 8003fae:	4b1d      	ldr	r3, [pc, #116]	; (8004024 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003fb6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	6892      	ldr	r2, [r2, #8]
 8003fbe:	0211      	lsls	r1, r2, #8
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	6952      	ldr	r2, [r2, #20]
 8003fc4:	0852      	lsrs	r2, r2, #1
 8003fc6:	3a01      	subs	r2, #1
 8003fc8:	0652      	lsls	r2, r2, #25
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	4915      	ldr	r1, [pc, #84]	; (8004024 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	610b      	str	r3, [r1, #16]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
<<<<<<< HEAD
 8004052:	4b14      	ldr	r3, [pc, #80]	; (80040a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a13      	ldr	r2, [pc, #76]	; (80040a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004058:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800405c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800405e:	f7fc ff33 	bl	8000ec8 <HAL_GetTick>
 8004062:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004064:	e009      	b.n	800407a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004066:	f7fc ff2f 	bl	8000ec8 <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	2b02      	cmp	r3, #2
 8004072:	d902      	bls.n	800407a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	73fb      	strb	r3, [r7, #15]
          break;
 8004078:	e005      	b.n	8004086 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800407a:	4b0a      	ldr	r3, [pc, #40]	; (80040a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d0ef      	beq.n	8004066 <RCCEx_PLLSAI1_Config+0x1a2>
=======
 8003fd2:	4b14      	ldr	r3, [pc, #80]	; (8004024 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a13      	ldr	r2, [pc, #76]	; (8004024 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fd8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003fdc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fde:	f7fc ff55 	bl	8000e8c <HAL_GetTick>
 8003fe2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003fe4:	e009      	b.n	8003ffa <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003fe6:	f7fc ff51 	bl	8000e8c <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d902      	bls.n	8003ffa <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	73fb      	strb	r3, [r7, #15]
          break;
 8003ff8:	e005      	b.n	8004006 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ffa:	4b0a      	ldr	r3, [pc, #40]	; (8004024 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d0ef      	beq.n	8003fe6 <RCCEx_PLLSAI1_Config+0x1a2>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
        }
      }

      if(status == HAL_OK)
<<<<<<< HEAD
 8004086:	7bfb      	ldrb	r3, [r7, #15]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d106      	bne.n	800409a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800408c:	4b05      	ldr	r3, [pc, #20]	; (80040a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800408e:	691a      	ldr	r2, [r3, #16]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	699b      	ldr	r3, [r3, #24]
 8004094:	4903      	ldr	r1, [pc, #12]	; (80040a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004096:	4313      	orrs	r3, r2
 8004098:	610b      	str	r3, [r1, #16]
=======
 8004006:	7bfb      	ldrb	r3, [r7, #15]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d106      	bne.n	800401a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800400c:	4b05      	ldr	r3, [pc, #20]	; (8004024 <RCCEx_PLLSAI1_Config+0x1e0>)
 800400e:	691a      	ldr	r2, [r3, #16]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	4903      	ldr	r1, [pc, #12]	; (8004024 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004016:	4313      	orrs	r3, r2
 8004018:	610b      	str	r3, [r1, #16]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
      }
    }
  }

  return status;
<<<<<<< HEAD
 800409a:	7bfb      	ldrb	r3, [r7, #15]
}
 800409c:	4618      	mov	r0, r3
 800409e:	3710      	adds	r7, #16
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	40021000 	.word	0x40021000

080040a8 <RCCEx_PLLSAI2_Config>:
=======
 800401a:	7bfb      	ldrb	r3, [r7, #15]
}
 800401c:	4618      	mov	r0, r3
 800401e:	3710      	adds	r7, #16
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	40021000 	.word	0x40021000

08004028 <RCCEx_PLLSAI2_Config>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
<<<<<<< HEAD
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040b2:	2300      	movs	r3, #0
 80040b4:	73fb      	strb	r3, [r7, #15]
=======
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004032:	2300      	movs	r3, #0
 8004034:	73fb      	strb	r3, [r7, #15]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
<<<<<<< HEAD
 80040b6:	4b69      	ldr	r3, [pc, #420]	; (800425c <RCCEx_PLLSAI2_Config+0x1b4>)
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	f003 0303 	and.w	r3, r3, #3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d018      	beq.n	80040f4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80040c2:	4b66      	ldr	r3, [pc, #408]	; (800425c <RCCEx_PLLSAI2_Config+0x1b4>)
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	f003 0203 	and.w	r2, r3, #3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d10d      	bne.n	80040ee <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
       ||
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d009      	beq.n	80040ee <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80040da:	4b60      	ldr	r3, [pc, #384]	; (800425c <RCCEx_PLLSAI2_Config+0x1b4>)
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	091b      	lsrs	r3, r3, #4
 80040e0:	f003 0307 	and.w	r3, r3, #7
 80040e4:	1c5a      	adds	r2, r3, #1
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
       ||
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d047      	beq.n	800417e <RCCEx_PLLSAI2_Config+0xd6>
=======
 8004036:	4b69      	ldr	r3, [pc, #420]	; (80041dc <RCCEx_PLLSAI2_Config+0x1b4>)
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	f003 0303 	and.w	r3, r3, #3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d018      	beq.n	8004074 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004042:	4b66      	ldr	r3, [pc, #408]	; (80041dc <RCCEx_PLLSAI2_Config+0x1b4>)
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	f003 0203 	and.w	r2, r3, #3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	429a      	cmp	r2, r3
 8004050:	d10d      	bne.n	800406e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
       ||
 8004056:	2b00      	cmp	r3, #0
 8004058:	d009      	beq.n	800406e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800405a:	4b60      	ldr	r3, [pc, #384]	; (80041dc <RCCEx_PLLSAI2_Config+0x1b4>)
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	091b      	lsrs	r3, r3, #4
 8004060:	f003 0307 	and.w	r3, r3, #7
 8004064:	1c5a      	adds	r2, r3, #1
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
       ||
 800406a:	429a      	cmp	r2, r3
 800406c:	d047      	beq.n	80040fe <RCCEx_PLLSAI2_Config+0xd6>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
#endif
      )
    {
      status = HAL_ERROR;
<<<<<<< HEAD
 80040ee:	2301      	movs	r3, #1
 80040f0:	73fb      	strb	r3, [r7, #15]
 80040f2:	e044      	b.n	800417e <RCCEx_PLLSAI2_Config+0xd6>
=======
 800406e:	2301      	movs	r3, #1
 8004070:	73fb      	strb	r3, [r7, #15]
 8004072:	e044      	b.n	80040fe <RCCEx_PLLSAI2_Config+0xd6>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
<<<<<<< HEAD
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2b03      	cmp	r3, #3
 80040fa:	d018      	beq.n	800412e <RCCEx_PLLSAI2_Config+0x86>
 80040fc:	2b03      	cmp	r3, #3
 80040fe:	d825      	bhi.n	800414c <RCCEx_PLLSAI2_Config+0xa4>
 8004100:	2b01      	cmp	r3, #1
 8004102:	d002      	beq.n	800410a <RCCEx_PLLSAI2_Config+0x62>
 8004104:	2b02      	cmp	r3, #2
 8004106:	d009      	beq.n	800411c <RCCEx_PLLSAI2_Config+0x74>
 8004108:	e020      	b.n	800414c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800410a:	4b54      	ldr	r3, [pc, #336]	; (800425c <RCCEx_PLLSAI2_Config+0x1b4>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d11d      	bne.n	8004152 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800411a:	e01a      	b.n	8004152 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800411c:	4b4f      	ldr	r3, [pc, #316]	; (800425c <RCCEx_PLLSAI2_Config+0x1b4>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004124:	2b00      	cmp	r3, #0
 8004126:	d116      	bne.n	8004156 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800412c:	e013      	b.n	8004156 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800412e:	4b4b      	ldr	r3, [pc, #300]	; (800425c <RCCEx_PLLSAI2_Config+0x1b4>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d10f      	bne.n	800415a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800413a:	4b48      	ldr	r3, [pc, #288]	; (800425c <RCCEx_PLLSAI2_Config+0x1b4>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d109      	bne.n	800415a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800414a:	e006      	b.n	800415a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	73fb      	strb	r3, [r7, #15]
      break;
 8004150:	e004      	b.n	800415c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004152:	bf00      	nop
 8004154:	e002      	b.n	800415c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004156:	bf00      	nop
 8004158:	e000      	b.n	800415c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800415a:	bf00      	nop
    }

    if(status == HAL_OK)
 800415c:	7bfb      	ldrb	r3, [r7, #15]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d10d      	bne.n	800417e <RCCEx_PLLSAI2_Config+0xd6>
=======
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2b03      	cmp	r3, #3
 800407a:	d018      	beq.n	80040ae <RCCEx_PLLSAI2_Config+0x86>
 800407c:	2b03      	cmp	r3, #3
 800407e:	d825      	bhi.n	80040cc <RCCEx_PLLSAI2_Config+0xa4>
 8004080:	2b01      	cmp	r3, #1
 8004082:	d002      	beq.n	800408a <RCCEx_PLLSAI2_Config+0x62>
 8004084:	2b02      	cmp	r3, #2
 8004086:	d009      	beq.n	800409c <RCCEx_PLLSAI2_Config+0x74>
 8004088:	e020      	b.n	80040cc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800408a:	4b54      	ldr	r3, [pc, #336]	; (80041dc <RCCEx_PLLSAI2_Config+0x1b4>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d11d      	bne.n	80040d2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800409a:	e01a      	b.n	80040d2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800409c:	4b4f      	ldr	r3, [pc, #316]	; (80041dc <RCCEx_PLLSAI2_Config+0x1b4>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d116      	bne.n	80040d6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040ac:	e013      	b.n	80040d6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80040ae:	4b4b      	ldr	r3, [pc, #300]	; (80041dc <RCCEx_PLLSAI2_Config+0x1b4>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10f      	bne.n	80040da <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80040ba:	4b48      	ldr	r3, [pc, #288]	; (80041dc <RCCEx_PLLSAI2_Config+0x1b4>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d109      	bne.n	80040da <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80040ca:	e006      	b.n	80040da <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	73fb      	strb	r3, [r7, #15]
      break;
 80040d0:	e004      	b.n	80040dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80040d2:	bf00      	nop
 80040d4:	e002      	b.n	80040dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80040d6:	bf00      	nop
 80040d8:	e000      	b.n	80040dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80040da:	bf00      	nop
    }

    if(status == HAL_OK)
 80040dc:	7bfb      	ldrb	r3, [r7, #15]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10d      	bne.n	80040fe <RCCEx_PLLSAI2_Config+0xd6>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
<<<<<<< HEAD
 8004162:	4b3e      	ldr	r3, [pc, #248]	; (800425c <RCCEx_PLLSAI2_Config+0x1b4>)
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6819      	ldr	r1, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	3b01      	subs	r3, #1
 8004174:	011b      	lsls	r3, r3, #4
 8004176:	430b      	orrs	r3, r1
 8004178:	4938      	ldr	r1, [pc, #224]	; (800425c <RCCEx_PLLSAI2_Config+0x1b4>)
 800417a:	4313      	orrs	r3, r2
 800417c:	60cb      	str	r3, [r1, #12]
=======
 80040e2:	4b3e      	ldr	r3, [pc, #248]	; (80041dc <RCCEx_PLLSAI2_Config+0x1b4>)
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6819      	ldr	r1, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	3b01      	subs	r3, #1
 80040f4:	011b      	lsls	r3, r3, #4
 80040f6:	430b      	orrs	r3, r1
 80040f8:	4938      	ldr	r1, [pc, #224]	; (80041dc <RCCEx_PLLSAI2_Config+0x1b4>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	60cb      	str	r3, [r1, #12]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
#endif
    }
  }

  if(status == HAL_OK)
<<<<<<< HEAD
 800417e:	7bfb      	ldrb	r3, [r7, #15]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d166      	bne.n	8004252 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004184:	4b35      	ldr	r3, [pc, #212]	; (800425c <RCCEx_PLLSAI2_Config+0x1b4>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a34      	ldr	r2, [pc, #208]	; (800425c <RCCEx_PLLSAI2_Config+0x1b4>)
 800418a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800418e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004190:	f7fc fe9a 	bl	8000ec8 <HAL_GetTick>
 8004194:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004196:	e009      	b.n	80041ac <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004198:	f7fc fe96 	bl	8000ec8 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d902      	bls.n	80041ac <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	73fb      	strb	r3, [r7, #15]
        break;
 80041aa:	e005      	b.n	80041b8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80041ac:	4b2b      	ldr	r3, [pc, #172]	; (800425c <RCCEx_PLLSAI2_Config+0x1b4>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d1ef      	bne.n	8004198 <RCCEx_PLLSAI2_Config+0xf0>
=======
 80040fe:	7bfb      	ldrb	r3, [r7, #15]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d166      	bne.n	80041d2 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004104:	4b35      	ldr	r3, [pc, #212]	; (80041dc <RCCEx_PLLSAI2_Config+0x1b4>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a34      	ldr	r2, [pc, #208]	; (80041dc <RCCEx_PLLSAI2_Config+0x1b4>)
 800410a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800410e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004110:	f7fc febc 	bl	8000e8c <HAL_GetTick>
 8004114:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004116:	e009      	b.n	800412c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004118:	f7fc feb8 	bl	8000e8c <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b02      	cmp	r3, #2
 8004124:	d902      	bls.n	800412c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	73fb      	strb	r3, [r7, #15]
        break;
 800412a:	e005      	b.n	8004138 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800412c:	4b2b      	ldr	r3, [pc, #172]	; (80041dc <RCCEx_PLLSAI2_Config+0x1b4>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1ef      	bne.n	8004118 <RCCEx_PLLSAI2_Config+0xf0>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
      }
    }

    if(status == HAL_OK)
<<<<<<< HEAD
 80041b8:	7bfb      	ldrb	r3, [r7, #15]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d149      	bne.n	8004252 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d110      	bne.n	80041e6 <RCCEx_PLLSAI2_Config+0x13e>
=======
 8004138:	7bfb      	ldrb	r3, [r7, #15]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d149      	bne.n	80041d2 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d110      	bne.n	8004166 <RCCEx_PLLSAI2_Config+0x13e>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
<<<<<<< HEAD
 80041c4:	4b25      	ldr	r3, [pc, #148]	; (800425c <RCCEx_PLLSAI2_Config+0x1b4>)
 80041c6:	695b      	ldr	r3, [r3, #20]
 80041c8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80041cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	6892      	ldr	r2, [r2, #8]
 80041d4:	0211      	lsls	r1, r2, #8
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	68d2      	ldr	r2, [r2, #12]
 80041da:	06d2      	lsls	r2, r2, #27
 80041dc:	430a      	orrs	r2, r1
 80041de:	491f      	ldr	r1, [pc, #124]	; (800425c <RCCEx_PLLSAI2_Config+0x1b4>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	614b      	str	r3, [r1, #20]
 80041e4:	e011      	b.n	800420a <RCCEx_PLLSAI2_Config+0x162>
=======
 8004144:	4b25      	ldr	r3, [pc, #148]	; (80041dc <RCCEx_PLLSAI2_Config+0x1b4>)
 8004146:	695b      	ldr	r3, [r3, #20]
 8004148:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800414c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	6892      	ldr	r2, [r2, #8]
 8004154:	0211      	lsls	r1, r2, #8
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	68d2      	ldr	r2, [r2, #12]
 800415a:	06d2      	lsls	r2, r2, #27
 800415c:	430a      	orrs	r2, r1
 800415e:	491f      	ldr	r1, [pc, #124]	; (80041dc <RCCEx_PLLSAI2_Config+0x1b4>)
 8004160:	4313      	orrs	r3, r2
 8004162:	614b      	str	r3, [r1, #20]
 8004164:	e011      	b.n	800418a <RCCEx_PLLSAI2_Config+0x162>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
<<<<<<< HEAD
 80041e6:	4b1d      	ldr	r3, [pc, #116]	; (800425c <RCCEx_PLLSAI2_Config+0x1b4>)
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80041ee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	6892      	ldr	r2, [r2, #8]
 80041f6:	0211      	lsls	r1, r2, #8
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	6912      	ldr	r2, [r2, #16]
 80041fc:	0852      	lsrs	r2, r2, #1
 80041fe:	3a01      	subs	r2, #1
 8004200:	0652      	lsls	r2, r2, #25
 8004202:	430a      	orrs	r2, r1
 8004204:	4915      	ldr	r1, [pc, #84]	; (800425c <RCCEx_PLLSAI2_Config+0x1b4>)
 8004206:	4313      	orrs	r3, r2
 8004208:	614b      	str	r3, [r1, #20]
=======
 8004166:	4b1d      	ldr	r3, [pc, #116]	; (80041dc <RCCEx_PLLSAI2_Config+0x1b4>)
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800416e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	6892      	ldr	r2, [r2, #8]
 8004176:	0211      	lsls	r1, r2, #8
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	6912      	ldr	r2, [r2, #16]
 800417c:	0852      	lsrs	r2, r2, #1
 800417e:	3a01      	subs	r2, #1
 8004180:	0652      	lsls	r2, r2, #25
 8004182:	430a      	orrs	r2, r1
 8004184:	4915      	ldr	r1, [pc, #84]	; (80041dc <RCCEx_PLLSAI2_Config+0x1b4>)
 8004186:	4313      	orrs	r3, r2
 8004188:	614b      	str	r3, [r1, #20]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
<<<<<<< HEAD
 800420a:	4b14      	ldr	r3, [pc, #80]	; (800425c <RCCEx_PLLSAI2_Config+0x1b4>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a13      	ldr	r2, [pc, #76]	; (800425c <RCCEx_PLLSAI2_Config+0x1b4>)
 8004210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004214:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004216:	f7fc fe57 	bl	8000ec8 <HAL_GetTick>
 800421a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800421c:	e009      	b.n	8004232 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800421e:	f7fc fe53 	bl	8000ec8 <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	2b02      	cmp	r3, #2
 800422a:	d902      	bls.n	8004232 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	73fb      	strb	r3, [r7, #15]
          break;
 8004230:	e005      	b.n	800423e <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004232:	4b0a      	ldr	r3, [pc, #40]	; (800425c <RCCEx_PLLSAI2_Config+0x1b4>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d0ef      	beq.n	800421e <RCCEx_PLLSAI2_Config+0x176>
=======
 800418a:	4b14      	ldr	r3, [pc, #80]	; (80041dc <RCCEx_PLLSAI2_Config+0x1b4>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a13      	ldr	r2, [pc, #76]	; (80041dc <RCCEx_PLLSAI2_Config+0x1b4>)
 8004190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004194:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004196:	f7fc fe79 	bl	8000e8c <HAL_GetTick>
 800419a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800419c:	e009      	b.n	80041b2 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800419e:	f7fc fe75 	bl	8000e8c <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d902      	bls.n	80041b2 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	73fb      	strb	r3, [r7, #15]
          break;
 80041b0:	e005      	b.n	80041be <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80041b2:	4b0a      	ldr	r3, [pc, #40]	; (80041dc <RCCEx_PLLSAI2_Config+0x1b4>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d0ef      	beq.n	800419e <RCCEx_PLLSAI2_Config+0x176>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
        }
      }

      if(status == HAL_OK)
<<<<<<< HEAD
 800423e:	7bfb      	ldrb	r3, [r7, #15]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d106      	bne.n	8004252 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004244:	4b05      	ldr	r3, [pc, #20]	; (800425c <RCCEx_PLLSAI2_Config+0x1b4>)
 8004246:	695a      	ldr	r2, [r3, #20]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	4903      	ldr	r1, [pc, #12]	; (800425c <RCCEx_PLLSAI2_Config+0x1b4>)
 800424e:	4313      	orrs	r3, r2
 8004250:	614b      	str	r3, [r1, #20]
=======
 80041be:	7bfb      	ldrb	r3, [r7, #15]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d106      	bne.n	80041d2 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80041c4:	4b05      	ldr	r3, [pc, #20]	; (80041dc <RCCEx_PLLSAI2_Config+0x1b4>)
 80041c6:	695a      	ldr	r2, [r3, #20]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	695b      	ldr	r3, [r3, #20]
 80041cc:	4903      	ldr	r1, [pc, #12]	; (80041dc <RCCEx_PLLSAI2_Config+0x1b4>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	614b      	str	r3, [r1, #20]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
      }
    }
  }

  return status;
<<<<<<< HEAD
 8004252:	7bfb      	ldrb	r3, [r7, #15]
}
 8004254:	4618      	mov	r0, r3
 8004256:	3710      	adds	r7, #16
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	40021000 	.word	0x40021000

08004260 <HAL_SPI_Init>:
=======
 80041d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3710      	adds	r7, #16
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	40021000 	.word	0x40021000

080041e0 <HAL_SPI_Init>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
<<<<<<< HEAD
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
=======
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
<<<<<<< HEAD
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e095      	b.n	800439e <HAL_SPI_Init+0x13e>
=======
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e095      	b.n	800431e <HAL_SPI_Init+0x13e>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
<<<<<<< HEAD
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004276:	2b00      	cmp	r3, #0
 8004278:	d108      	bne.n	800428c <HAL_SPI_Init+0x2c>
=======
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d108      	bne.n	800420c <HAL_SPI_Init+0x2c>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
<<<<<<< HEAD
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004282:	d009      	beq.n	8004298 <HAL_SPI_Init+0x38>
=======
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004202:	d009      	beq.n	8004218 <HAL_SPI_Init+0x38>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
<<<<<<< HEAD
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	61da      	str	r2, [r3, #28]
 800428a:	e005      	b.n	8004298 <HAL_SPI_Init+0x38>
=======
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	61da      	str	r2, [r3, #28]
 800420a:	e005      	b.n	8004218 <HAL_SPI_Init+0x38>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
<<<<<<< HEAD
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	615a      	str	r2, [r3, #20]
=======
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	615a      	str	r2, [r3, #20]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
<<<<<<< HEAD
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d106      	bne.n	80042b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
=======
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d106      	bne.n	8004238 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
<<<<<<< HEAD
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f7fc fc50 	bl	8000b58 <HAL_SPI_MspInit>
=======
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f7fc fc7a 	bl	8000b2c <HAL_SPI_MspInit>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
<<<<<<< HEAD
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2202      	movs	r2, #2
 80042bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042ce:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042d8:	d902      	bls.n	80042e0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80042da:	2300      	movs	r3, #0
 80042dc:	60fb      	str	r3, [r7, #12]
 80042de:	e002      	b.n	80042e6 <HAL_SPI_Init+0x86>
=======
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2202      	movs	r2, #2
 800423c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800424e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004258:	d902      	bls.n	8004260 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800425a:	2300      	movs	r3, #0
 800425c:	60fb      	str	r3, [r7, #12]
 800425e:	e002      	b.n	8004266 <HAL_SPI_Init+0x86>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
<<<<<<< HEAD
 80042e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042e4:	60fb      	str	r3, [r7, #12]
=======
 8004260:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004264:	60fb      	str	r3, [r7, #12]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
<<<<<<< HEAD
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80042ee:	d007      	beq.n	8004300 <HAL_SPI_Init+0xa0>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042f8:	d002      	beq.n	8004300 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	629a      	str	r2, [r3, #40]	; 0x28
=======
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800426e:	d007      	beq.n	8004280 <HAL_SPI_Init+0xa0>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004278:	d002      	beq.n	8004280 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	629a      	str	r2, [r3, #40]	; 0x28
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
<<<<<<< HEAD
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004310:	431a      	orrs	r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	431a      	orrs	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	695b      	ldr	r3, [r3, #20]
 8004320:	f003 0301 	and.w	r3, r3, #1
 8004324:	431a      	orrs	r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800432e:	431a      	orrs	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	69db      	ldr	r3, [r3, #28]
 8004334:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004338:	431a      	orrs	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004342:	ea42 0103 	orr.w	r1, r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	430a      	orrs	r2, r1
 8004354:	601a      	str	r2, [r3, #0]
=======
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004290:	431a      	orrs	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	431a      	orrs	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	431a      	orrs	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042ae:	431a      	orrs	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	69db      	ldr	r3, [r3, #28]
 80042b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042b8:	431a      	orrs	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c2:	ea42 0103 	orr.w	r1, r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ca:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	430a      	orrs	r2, r1
 80042d4:	601a      	str	r2, [r3, #0]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
<<<<<<< HEAD
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	0c1b      	lsrs	r3, r3, #16
 800435c:	f003 0204 	and.w	r2, r3, #4
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004364:	f003 0310 	and.w	r3, r3, #16
 8004368:	431a      	orrs	r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800436e:	f003 0308 	and.w	r3, r3, #8
 8004372:	431a      	orrs	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800437c:	ea42 0103 	orr.w	r1, r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	430a      	orrs	r2, r1
 800438c:	605a      	str	r2, [r3, #4]
=======
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	0c1b      	lsrs	r3, r3, #16
 80042dc:	f003 0204 	and.w	r2, r3, #4
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e4:	f003 0310 	and.w	r3, r3, #16
 80042e8:	431a      	orrs	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ee:	f003 0308 	and.w	r3, r3, #8
 80042f2:	431a      	orrs	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80042fc:	ea42 0103 	orr.w	r1, r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	430a      	orrs	r2, r1
 800430c:	605a      	str	r2, [r3, #4]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
<<<<<<< HEAD
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <HAL_TIM_Base_Init>:
=======
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3710      	adds	r7, #16
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <HAL_TIM_Base_Init>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b082      	sub	sp, #8
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d101      	bne.n	80043b8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e049      	b.n	800444c <HAL_TIM_Base_Init+0xa6>
=======
 8004326:	b580      	push	{r7, lr}
 8004328:	b082      	sub	sp, #8
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d101      	bne.n	8004338 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e049      	b.n	80043cc <HAL_TIM_Base_Init+0xa6>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d106      	bne.n	80043d2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800433e:	b2db      	uxtb	r3, r3
 8004340:	2b00      	cmp	r3, #0
 8004342:	d106      	bne.n	8004352 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< HEAD
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 f841 	bl	8004454 <HAL_TIM_Base_MspInit>
=======
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 f841 	bl	80043d4 <HAL_TIM_Base_MspInit>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2202      	movs	r2, #2
 80043d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	3304      	adds	r3, #4
 80043e2:	4619      	mov	r1, r3
 80043e4:	4610      	mov	r0, r2
 80043e6:	f000 f9f7 	bl	80047d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2201      	movs	r2, #1
 800440e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2201      	movs	r2, #1
 800442e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2201      	movs	r2, #1
 800443e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	3708      	adds	r7, #8
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <HAL_TIM_Base_MspInit>:
=======
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2202      	movs	r2, #2
 8004356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	3304      	adds	r3, #4
 8004362:	4619      	mov	r1, r3
 8004364:	4610      	mov	r0, r2
 8004366:	f000 f9f7 	bl	8004758 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2201      	movs	r2, #1
 80043be:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2201      	movs	r2, #1
 80043c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3708      	adds	r7, #8
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <HAL_TIM_Base_MspInit>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
=======
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
<<<<<<< HEAD
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <HAL_TIM_Base_Start_IT>:
=======
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <HAL_TIM_Base_Start_IT>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
=======
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
<<<<<<< HEAD
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004476:	b2db      	uxtb	r3, r3
 8004478:	2b01      	cmp	r3, #1
 800447a:	d001      	beq.n	8004480 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e04f      	b.n	8004520 <HAL_TIM_Base_Start_IT+0xb8>
=======
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d001      	beq.n	8004400 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e04f      	b.n	80044a0 <HAL_TIM_Base_Start_IT+0xb8>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2202      	movs	r2, #2
 8004484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68da      	ldr	r2, [r3, #12]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f042 0201 	orr.w	r2, r2, #1
 8004496:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a23      	ldr	r2, [pc, #140]	; (800452c <HAL_TIM_Base_Start_IT+0xc4>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d01d      	beq.n	80044de <HAL_TIM_Base_Start_IT+0x76>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044aa:	d018      	beq.n	80044de <HAL_TIM_Base_Start_IT+0x76>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a1f      	ldr	r2, [pc, #124]	; (8004530 <HAL_TIM_Base_Start_IT+0xc8>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d013      	beq.n	80044de <HAL_TIM_Base_Start_IT+0x76>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a1e      	ldr	r2, [pc, #120]	; (8004534 <HAL_TIM_Base_Start_IT+0xcc>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d00e      	beq.n	80044de <HAL_TIM_Base_Start_IT+0x76>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a1c      	ldr	r2, [pc, #112]	; (8004538 <HAL_TIM_Base_Start_IT+0xd0>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d009      	beq.n	80044de <HAL_TIM_Base_Start_IT+0x76>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a1b      	ldr	r2, [pc, #108]	; (800453c <HAL_TIM_Base_Start_IT+0xd4>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d004      	beq.n	80044de <HAL_TIM_Base_Start_IT+0x76>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a19      	ldr	r2, [pc, #100]	; (8004540 <HAL_TIM_Base_Start_IT+0xd8>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d115      	bne.n	800450a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	689a      	ldr	r2, [r3, #8]
 80044e4:	4b17      	ldr	r3, [pc, #92]	; (8004544 <HAL_TIM_Base_Start_IT+0xdc>)
 80044e6:	4013      	ands	r3, r2
 80044e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2b06      	cmp	r3, #6
 80044ee:	d015      	beq.n	800451c <HAL_TIM_Base_Start_IT+0xb4>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044f6:	d011      	beq.n	800451c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f042 0201 	orr.w	r2, r2, #1
 8004506:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004508:	e008      	b.n	800451c <HAL_TIM_Base_Start_IT+0xb4>
=======
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2202      	movs	r2, #2
 8004404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68da      	ldr	r2, [r3, #12]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f042 0201 	orr.w	r2, r2, #1
 8004416:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a23      	ldr	r2, [pc, #140]	; (80044ac <HAL_TIM_Base_Start_IT+0xc4>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d01d      	beq.n	800445e <HAL_TIM_Base_Start_IT+0x76>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800442a:	d018      	beq.n	800445e <HAL_TIM_Base_Start_IT+0x76>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a1f      	ldr	r2, [pc, #124]	; (80044b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d013      	beq.n	800445e <HAL_TIM_Base_Start_IT+0x76>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a1e      	ldr	r2, [pc, #120]	; (80044b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d00e      	beq.n	800445e <HAL_TIM_Base_Start_IT+0x76>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a1c      	ldr	r2, [pc, #112]	; (80044b8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d009      	beq.n	800445e <HAL_TIM_Base_Start_IT+0x76>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a1b      	ldr	r2, [pc, #108]	; (80044bc <HAL_TIM_Base_Start_IT+0xd4>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d004      	beq.n	800445e <HAL_TIM_Base_Start_IT+0x76>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a19      	ldr	r2, [pc, #100]	; (80044c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d115      	bne.n	800448a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	689a      	ldr	r2, [r3, #8]
 8004464:	4b17      	ldr	r3, [pc, #92]	; (80044c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004466:	4013      	ands	r3, r2
 8004468:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2b06      	cmp	r3, #6
 800446e:	d015      	beq.n	800449c <HAL_TIM_Base_Start_IT+0xb4>
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004476:	d011      	beq.n	800449c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f042 0201 	orr.w	r2, r2, #1
 8004486:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004488:	e008      	b.n	800449c <HAL_TIM_Base_Start_IT+0xb4>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f042 0201 	orr.w	r2, r2, #1
 8004518:	601a      	str	r2, [r3, #0]
 800451a:	e000      	b.n	800451e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800451c:	bf00      	nop
=======
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f042 0201 	orr.w	r2, r2, #1
 8004498:	601a      	str	r2, [r3, #0]
 800449a:	e000      	b.n	800449e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800449c:	bf00      	nop
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3714      	adds	r7, #20
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr
 800452c:	40012c00 	.word	0x40012c00
 8004530:	40000400 	.word	0x40000400
 8004534:	40000800 	.word	0x40000800
 8004538:	40000c00 	.word	0x40000c00
 800453c:	40013400 	.word	0x40013400
 8004540:	40014000 	.word	0x40014000
 8004544:	00010007 	.word	0x00010007

08004548 <HAL_TIM_IRQHandler>:
=======
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3714      	adds	r7, #20
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr
 80044ac:	40012c00 	.word	0x40012c00
 80044b0:	40000400 	.word	0x40000400
 80044b4:	40000800 	.word	0x40000800
 80044b8:	40000c00 	.word	0x40000c00
 80044bc:	40013400 	.word	0x40013400
 80044c0:	40014000 	.word	0x40014000
 80044c4:	00010007 	.word	0x00010007

080044c8 <HAL_TIM_IRQHandler>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b02      	cmp	r3, #2
 800455c:	d122      	bne.n	80045a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b02      	cmp	r3, #2
 800456a:	d11b      	bne.n	80045a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f06f 0202 	mvn.w	r2, #2
 8004574:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2201      	movs	r2, #1
 800457a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	f003 0303 	and.w	r3, r3, #3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d003      	beq.n	8004592 <HAL_TIM_IRQHandler+0x4a>
=======
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d122      	bne.n	8004524 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d11b      	bne.n	8004524 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f06f 0202 	mvn.w	r2, #2
 80044f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2201      	movs	r2, #1
 80044fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	f003 0303 	and.w	r3, r3, #3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d003      	beq.n	8004512 <HAL_TIM_IRQHandler+0x4a>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 f905 	bl	800479a <HAL_TIM_IC_CaptureCallback>
 8004590:	e005      	b.n	800459e <HAL_TIM_IRQHandler+0x56>
=======
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 f905 	bl	800471a <HAL_TIM_IC_CaptureCallback>
 8004510:	e005      	b.n	800451e <HAL_TIM_IRQHandler+0x56>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f8f7 	bl	8004786 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 f908 	bl	80047ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	771a      	strb	r2, [r3, #28]
=======
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 f8f7 	bl	8004706 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 f908 	bl	800472e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	771a      	strb	r2, [r3, #28]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
<<<<<<< HEAD
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	f003 0304 	and.w	r3, r3, #4
 80045ae:	2b04      	cmp	r3, #4
 80045b0:	d122      	bne.n	80045f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	f003 0304 	and.w	r3, r3, #4
 80045bc:	2b04      	cmp	r3, #4
 80045be:	d11b      	bne.n	80045f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f06f 0204 	mvn.w	r2, #4
 80045c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2202      	movs	r2, #2
 80045ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d003      	beq.n	80045e6 <HAL_TIM_IRQHandler+0x9e>
=======
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	f003 0304 	and.w	r3, r3, #4
 800452e:	2b04      	cmp	r3, #4
 8004530:	d122      	bne.n	8004578 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	f003 0304 	and.w	r3, r3, #4
 800453c:	2b04      	cmp	r3, #4
 800453e:	d11b      	bne.n	8004578 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f06f 0204 	mvn.w	r2, #4
 8004548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2202      	movs	r2, #2
 800454e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800455a:	2b00      	cmp	r3, #0
 800455c:	d003      	beq.n	8004566 <HAL_TIM_IRQHandler+0x9e>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 f8db 	bl	800479a <HAL_TIM_IC_CaptureCallback>
 80045e4:	e005      	b.n	80045f2 <HAL_TIM_IRQHandler+0xaa>
=======
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 f8db 	bl	800471a <HAL_TIM_IC_CaptureCallback>
 8004564:	e005      	b.n	8004572 <HAL_TIM_IRQHandler+0xaa>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 f8cd 	bl	8004786 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 f8de 	bl	80047ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	771a      	strb	r2, [r3, #28]
=======
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 f8cd 	bl	8004706 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 f8de 	bl	800472e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	771a      	strb	r2, [r3, #28]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
<<<<<<< HEAD
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	f003 0308 	and.w	r3, r3, #8
 8004602:	2b08      	cmp	r3, #8
 8004604:	d122      	bne.n	800464c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	f003 0308 	and.w	r3, r3, #8
 8004610:	2b08      	cmp	r3, #8
 8004612:	d11b      	bne.n	800464c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f06f 0208 	mvn.w	r2, #8
 800461c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2204      	movs	r2, #4
 8004622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	69db      	ldr	r3, [r3, #28]
 800462a:	f003 0303 	and.w	r3, r3, #3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d003      	beq.n	800463a <HAL_TIM_IRQHandler+0xf2>
=======
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	f003 0308 	and.w	r3, r3, #8
 8004582:	2b08      	cmp	r3, #8
 8004584:	d122      	bne.n	80045cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	f003 0308 	and.w	r3, r3, #8
 8004590:	2b08      	cmp	r3, #8
 8004592:	d11b      	bne.n	80045cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f06f 0208 	mvn.w	r2, #8
 800459c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2204      	movs	r2, #4
 80045a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	f003 0303 	and.w	r3, r3, #3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d003      	beq.n	80045ba <HAL_TIM_IRQHandler+0xf2>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 f8b1 	bl	800479a <HAL_TIM_IC_CaptureCallback>
 8004638:	e005      	b.n	8004646 <HAL_TIM_IRQHandler+0xfe>
=======
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 f8b1 	bl	800471a <HAL_TIM_IC_CaptureCallback>
 80045b8:	e005      	b.n	80045c6 <HAL_TIM_IRQHandler+0xfe>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 f8a3 	bl	8004786 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 f8b4 	bl	80047ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	771a      	strb	r2, [r3, #28]
=======
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 f8a3 	bl	8004706 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f000 f8b4 	bl	800472e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	771a      	strb	r2, [r3, #28]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
<<<<<<< HEAD
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	f003 0310 	and.w	r3, r3, #16
 8004656:	2b10      	cmp	r3, #16
 8004658:	d122      	bne.n	80046a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	f003 0310 	and.w	r3, r3, #16
 8004664:	2b10      	cmp	r3, #16
 8004666:	d11b      	bne.n	80046a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f06f 0210 	mvn.w	r2, #16
 8004670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2208      	movs	r2, #8
 8004676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	69db      	ldr	r3, [r3, #28]
 800467e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004682:	2b00      	cmp	r3, #0
 8004684:	d003      	beq.n	800468e <HAL_TIM_IRQHandler+0x146>
=======
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	f003 0310 	and.w	r3, r3, #16
 80045d6:	2b10      	cmp	r3, #16
 80045d8:	d122      	bne.n	8004620 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	f003 0310 	and.w	r3, r3, #16
 80045e4:	2b10      	cmp	r3, #16
 80045e6:	d11b      	bne.n	8004620 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f06f 0210 	mvn.w	r2, #16
 80045f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2208      	movs	r2, #8
 80045f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	69db      	ldr	r3, [r3, #28]
 80045fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004602:	2b00      	cmp	r3, #0
 8004604:	d003      	beq.n	800460e <HAL_TIM_IRQHandler+0x146>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 f887 	bl	800479a <HAL_TIM_IC_CaptureCallback>
 800468c:	e005      	b.n	800469a <HAL_TIM_IRQHandler+0x152>
=======
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 f887 	bl	800471a <HAL_TIM_IC_CaptureCallback>
 800460c:	e005      	b.n	800461a <HAL_TIM_IRQHandler+0x152>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 f879 	bl	8004786 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 f88a 	bl	80047ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	771a      	strb	r2, [r3, #28]
=======
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 f879 	bl	8004706 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 f88a 	bl	800472e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	771a      	strb	r2, [r3, #28]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
<<<<<<< HEAD
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d10e      	bne.n	80046cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	f003 0301 	and.w	r3, r3, #1
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d107      	bne.n	80046cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f06f 0201 	mvn.w	r2, #1
 80046c4:	611a      	str	r2, [r3, #16]
=======
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	2b01      	cmp	r3, #1
 800462c:	d10e      	bne.n	800464c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b01      	cmp	r3, #1
 800463a:	d107      	bne.n	800464c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f06f 0201 	mvn.w	r2, #1
 8004644:	611a      	str	r2, [r3, #16]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< HEAD
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f7fc f8c4 	bl	8000854 <HAL_TIM_PeriodElapsedCallback>
=======
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f7fc f8ee 	bl	8000828 <HAL_TIM_PeriodElapsedCallback>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
<<<<<<< HEAD
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d6:	2b80      	cmp	r3, #128	; 0x80
 80046d8:	d10e      	bne.n	80046f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046e4:	2b80      	cmp	r3, #128	; 0x80
 80046e6:	d107      	bne.n	80046f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80046f0:	611a      	str	r2, [r3, #16]
=======
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004656:	2b80      	cmp	r3, #128	; 0x80
 8004658:	d10e      	bne.n	8004678 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004664:	2b80      	cmp	r3, #128	; 0x80
 8004666:	d107      	bne.n	8004678 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004670:	611a      	str	r2, [r3, #16]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< HEAD
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f914 	bl	8004920 <HAL_TIMEx_BreakCallback>
=======
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f914 	bl	80048a0 <HAL_TIMEx_BreakCallback>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
<<<<<<< HEAD
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004702:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004706:	d10e      	bne.n	8004726 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004712:	2b80      	cmp	r3, #128	; 0x80
 8004714:	d107      	bne.n	8004726 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800471e:	611a      	str	r2, [r3, #16]
=======
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004682:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004686:	d10e      	bne.n	80046a6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004692:	2b80      	cmp	r3, #128	; 0x80
 8004694:	d107      	bne.n	80046a6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800469e:	611a      	str	r2, [r3, #16]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
<<<<<<< HEAD
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 f907 	bl	8004934 <HAL_TIMEx_Break2Callback>
=======
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f000 f907 	bl	80048b4 <HAL_TIMEx_Break2Callback>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
<<<<<<< HEAD
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004730:	2b40      	cmp	r3, #64	; 0x40
 8004732:	d10e      	bne.n	8004752 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800473e:	2b40      	cmp	r3, #64	; 0x40
 8004740:	d107      	bne.n	8004752 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800474a:	611a      	str	r2, [r3, #16]
=======
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b0:	2b40      	cmp	r3, #64	; 0x40
 80046b2:	d10e      	bne.n	80046d2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046be:	2b40      	cmp	r3, #64	; 0x40
 80046c0:	d107      	bne.n	80046d2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046ca:	611a      	str	r2, [r3, #16]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< HEAD
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 f838 	bl	80047c2 <HAL_TIM_TriggerCallback>
=======
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 f838 	bl	8004742 <HAL_TIM_TriggerCallback>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
<<<<<<< HEAD
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	f003 0320 	and.w	r3, r3, #32
 800475c:	2b20      	cmp	r3, #32
 800475e:	d10e      	bne.n	800477e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	f003 0320 	and.w	r3, r3, #32
 800476a:	2b20      	cmp	r3, #32
 800476c:	d107      	bne.n	800477e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f06f 0220 	mvn.w	r2, #32
 8004776:	611a      	str	r2, [r3, #16]
=======
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	f003 0320 	and.w	r3, r3, #32
 80046dc:	2b20      	cmp	r3, #32
 80046de:	d10e      	bne.n	80046fe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	f003 0320 	and.w	r3, r3, #32
 80046ea:	2b20      	cmp	r3, #32
 80046ec:	d107      	bne.n	80046fe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f06f 0220 	mvn.w	r2, #32
 80046f6:	611a      	str	r2, [r3, #16]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< HEAD
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 f8c7 	bl	800490c <HAL_TIMEx_CommutCallback>
=======
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 f8c7 	bl	800488c <HAL_TIMEx_CommutCallback>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< HEAD
 800477e:	bf00      	nop
 8004780:	3708      	adds	r7, #8
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}

08004786 <HAL_TIM_OC_DelayElapsedCallback>:
=======
 80046fe:	bf00      	nop
 8004700:	3708      	adds	r7, #8
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8004786:	b480      	push	{r7}
 8004788:	b083      	sub	sp, #12
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
=======
 8004706:	b480      	push	{r7}
 8004708:	b083      	sub	sp, #12
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 800478e:	bf00      	nop
 8004790:	370c      	adds	r7, #12
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr

0800479a <HAL_TIM_IC_CaptureCallback>:
=======
 800470e:	bf00      	nop
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr

0800471a <HAL_TIM_IC_CaptureCallback>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800479a:	b480      	push	{r7}
 800479c:	b083      	sub	sp, #12
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
=======
 800471a:	b480      	push	{r7}
 800471c:	b083      	sub	sp, #12
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80047a2:	bf00      	nop
 80047a4:	370c      	adds	r7, #12
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <HAL_TIM_PWM_PulseFinishedCallback>:
=======
 8004722:	bf00      	nop
 8004724:	370c      	adds	r7, #12
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr

0800472e <HAL_TIM_PWM_PulseFinishedCallback>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80047ae:	b480      	push	{r7}
 80047b0:	b083      	sub	sp, #12
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
=======
 800472e:	b480      	push	{r7}
 8004730:	b083      	sub	sp, #12
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80047b6:	bf00      	nop
 80047b8:	370c      	adds	r7, #12
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr

080047c2 <HAL_TIM_TriggerCallback>:
=======
 8004736:	bf00      	nop
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr

08004742 <HAL_TIM_TriggerCallback>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80047c2:	b480      	push	{r7}
 80047c4:	b083      	sub	sp, #12
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
=======
 8004742:	b480      	push	{r7}
 8004744:	b083      	sub	sp, #12
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80047ca:	bf00      	nop
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
	...

080047d8 <TIM_Base_SetConfig>:
=======
 800474a:	bf00      	nop
 800474c:	370c      	adds	r7, #12
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
	...

08004758 <TIM_Base_SetConfig>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
<<<<<<< HEAD
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a40      	ldr	r2, [pc, #256]	; (80048ec <TIM_Base_SetConfig+0x114>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d013      	beq.n	8004818 <TIM_Base_SetConfig+0x40>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047f6:	d00f      	beq.n	8004818 <TIM_Base_SetConfig+0x40>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a3d      	ldr	r2, [pc, #244]	; (80048f0 <TIM_Base_SetConfig+0x118>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d00b      	beq.n	8004818 <TIM_Base_SetConfig+0x40>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a3c      	ldr	r2, [pc, #240]	; (80048f4 <TIM_Base_SetConfig+0x11c>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d007      	beq.n	8004818 <TIM_Base_SetConfig+0x40>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a3b      	ldr	r2, [pc, #236]	; (80048f8 <TIM_Base_SetConfig+0x120>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d003      	beq.n	8004818 <TIM_Base_SetConfig+0x40>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a3a      	ldr	r2, [pc, #232]	; (80048fc <TIM_Base_SetConfig+0x124>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d108      	bne.n	800482a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800481e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	4313      	orrs	r3, r2
 8004828:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a2f      	ldr	r2, [pc, #188]	; (80048ec <TIM_Base_SetConfig+0x114>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d01f      	beq.n	8004872 <TIM_Base_SetConfig+0x9a>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004838:	d01b      	beq.n	8004872 <TIM_Base_SetConfig+0x9a>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a2c      	ldr	r2, [pc, #176]	; (80048f0 <TIM_Base_SetConfig+0x118>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d017      	beq.n	8004872 <TIM_Base_SetConfig+0x9a>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a2b      	ldr	r2, [pc, #172]	; (80048f4 <TIM_Base_SetConfig+0x11c>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d013      	beq.n	8004872 <TIM_Base_SetConfig+0x9a>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a2a      	ldr	r2, [pc, #168]	; (80048f8 <TIM_Base_SetConfig+0x120>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d00f      	beq.n	8004872 <TIM_Base_SetConfig+0x9a>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a29      	ldr	r2, [pc, #164]	; (80048fc <TIM_Base_SetConfig+0x124>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d00b      	beq.n	8004872 <TIM_Base_SetConfig+0x9a>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a28      	ldr	r2, [pc, #160]	; (8004900 <TIM_Base_SetConfig+0x128>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d007      	beq.n	8004872 <TIM_Base_SetConfig+0x9a>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a27      	ldr	r2, [pc, #156]	; (8004904 <TIM_Base_SetConfig+0x12c>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d003      	beq.n	8004872 <TIM_Base_SetConfig+0x9a>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a26      	ldr	r2, [pc, #152]	; (8004908 <TIM_Base_SetConfig+0x130>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d108      	bne.n	8004884 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004878:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	4313      	orrs	r3, r2
 8004882:	60fb      	str	r3, [r7, #12]
=======
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a40      	ldr	r2, [pc, #256]	; (800486c <TIM_Base_SetConfig+0x114>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d013      	beq.n	8004798 <TIM_Base_SetConfig+0x40>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004776:	d00f      	beq.n	8004798 <TIM_Base_SetConfig+0x40>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a3d      	ldr	r2, [pc, #244]	; (8004870 <TIM_Base_SetConfig+0x118>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d00b      	beq.n	8004798 <TIM_Base_SetConfig+0x40>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4a3c      	ldr	r2, [pc, #240]	; (8004874 <TIM_Base_SetConfig+0x11c>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d007      	beq.n	8004798 <TIM_Base_SetConfig+0x40>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a3b      	ldr	r2, [pc, #236]	; (8004878 <TIM_Base_SetConfig+0x120>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d003      	beq.n	8004798 <TIM_Base_SetConfig+0x40>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a3a      	ldr	r2, [pc, #232]	; (800487c <TIM_Base_SetConfig+0x124>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d108      	bne.n	80047aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800479e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a2f      	ldr	r2, [pc, #188]	; (800486c <TIM_Base_SetConfig+0x114>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d01f      	beq.n	80047f2 <TIM_Base_SetConfig+0x9a>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047b8:	d01b      	beq.n	80047f2 <TIM_Base_SetConfig+0x9a>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a2c      	ldr	r2, [pc, #176]	; (8004870 <TIM_Base_SetConfig+0x118>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d017      	beq.n	80047f2 <TIM_Base_SetConfig+0x9a>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a2b      	ldr	r2, [pc, #172]	; (8004874 <TIM_Base_SetConfig+0x11c>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d013      	beq.n	80047f2 <TIM_Base_SetConfig+0x9a>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a2a      	ldr	r2, [pc, #168]	; (8004878 <TIM_Base_SetConfig+0x120>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d00f      	beq.n	80047f2 <TIM_Base_SetConfig+0x9a>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a29      	ldr	r2, [pc, #164]	; (800487c <TIM_Base_SetConfig+0x124>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d00b      	beq.n	80047f2 <TIM_Base_SetConfig+0x9a>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a28      	ldr	r2, [pc, #160]	; (8004880 <TIM_Base_SetConfig+0x128>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d007      	beq.n	80047f2 <TIM_Base_SetConfig+0x9a>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a27      	ldr	r2, [pc, #156]	; (8004884 <TIM_Base_SetConfig+0x12c>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d003      	beq.n	80047f2 <TIM_Base_SetConfig+0x9a>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a26      	ldr	r2, [pc, #152]	; (8004888 <TIM_Base_SetConfig+0x130>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d108      	bne.n	8004804 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	4313      	orrs	r3, r2
 8004802:	60fb      	str	r3, [r7, #12]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< HEAD
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	4313      	orrs	r3, r2
 8004890:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	689a      	ldr	r2, [r3, #8]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a10      	ldr	r2, [pc, #64]	; (80048ec <TIM_Base_SetConfig+0x114>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d00f      	beq.n	80048d0 <TIM_Base_SetConfig+0xf8>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a12      	ldr	r2, [pc, #72]	; (80048fc <TIM_Base_SetConfig+0x124>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d00b      	beq.n	80048d0 <TIM_Base_SetConfig+0xf8>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a11      	ldr	r2, [pc, #68]	; (8004900 <TIM_Base_SetConfig+0x128>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d007      	beq.n	80048d0 <TIM_Base_SetConfig+0xf8>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a10      	ldr	r2, [pc, #64]	; (8004904 <TIM_Base_SetConfig+0x12c>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d003      	beq.n	80048d0 <TIM_Base_SetConfig+0xf8>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a0f      	ldr	r2, [pc, #60]	; (8004908 <TIM_Base_SetConfig+0x130>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d103      	bne.n	80048d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	691a      	ldr	r2, [r3, #16]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	631a      	str	r2, [r3, #48]	; 0x30
=======
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	4313      	orrs	r3, r2
 8004810:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	689a      	ldr	r2, [r3, #8]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a10      	ldr	r2, [pc, #64]	; (800486c <TIM_Base_SetConfig+0x114>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d00f      	beq.n	8004850 <TIM_Base_SetConfig+0xf8>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a12      	ldr	r2, [pc, #72]	; (800487c <TIM_Base_SetConfig+0x124>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d00b      	beq.n	8004850 <TIM_Base_SetConfig+0xf8>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a11      	ldr	r2, [pc, #68]	; (8004880 <TIM_Base_SetConfig+0x128>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d007      	beq.n	8004850 <TIM_Base_SetConfig+0xf8>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a10      	ldr	r2, [pc, #64]	; (8004884 <TIM_Base_SetConfig+0x12c>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d003      	beq.n	8004850 <TIM_Base_SetConfig+0xf8>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a0f      	ldr	r2, [pc, #60]	; (8004888 <TIM_Base_SetConfig+0x130>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d103      	bne.n	8004858 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	691a      	ldr	r2, [r3, #16]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< HEAD
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	615a      	str	r2, [r3, #20]
}
 80048de:	bf00      	nop
 80048e0:	3714      	adds	r7, #20
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	40012c00 	.word	0x40012c00
 80048f0:	40000400 	.word	0x40000400
 80048f4:	40000800 	.word	0x40000800
 80048f8:	40000c00 	.word	0x40000c00
 80048fc:	40013400 	.word	0x40013400
 8004900:	40014000 	.word	0x40014000
 8004904:	40014400 	.word	0x40014400
 8004908:	40014800 	.word	0x40014800

0800490c <HAL_TIMEx_CommutCallback>:
=======
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	615a      	str	r2, [r3, #20]
}
 800485e:	bf00      	nop
 8004860:	3714      	adds	r7, #20
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	40012c00 	.word	0x40012c00
 8004870:	40000400 	.word	0x40000400
 8004874:	40000800 	.word	0x40000800
 8004878:	40000c00 	.word	0x40000c00
 800487c:	40013400 	.word	0x40013400
 8004880:	40014000 	.word	0x40014000
 8004884:	40014400 	.word	0x40014400
 8004888:	40014800 	.word	0x40014800

0800488c <HAL_TIMEx_CommutCallback>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
=======
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <HAL_TIMEx_BreakCallback>:
=======
 8004894:	bf00      	nop
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <HAL_TIMEx_BreakCallback>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
=======
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8004928:	bf00      	nop
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <HAL_TIMEx_Break2Callback>:
=======
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <HAL_TIMEx_Break2Callback>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
=======
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
<<<<<<< HEAD
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <USB_CoreInit>:
=======
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <USB_CoreInit>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
<<<<<<< HEAD
 8004948:	b084      	sub	sp, #16
 800494a:	b580      	push	{r7, lr}
 800494c:	b084      	sub	sp, #16
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
 8004952:	f107 001c 	add.w	r0, r7, #28
 8004956:	e880 000e 	stmia.w	r0, {r1, r2, r3}
=======
 80048c8:	b084      	sub	sp, #16
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b084      	sub	sp, #16
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
 80048d2:	f107 001c 	add.w	r0, r7, #28
 80048d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
<<<<<<< HEAD
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 fa70 	bl	8004e4c <USB_CoreReset>
 800496c:	4603      	mov	r3, r0
 800496e:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004970:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004972:	2b00      	cmp	r3, #0
 8004974:	d106      	bne.n	8004984 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	639a      	str	r2, [r3, #56]	; 0x38
 8004982:	e005      	b.n	8004990 <USB_CoreInit+0x48>
=======
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 fa70 	bl	8004dcc <USB_CoreReset>
 80048ec:	4603      	mov	r3, r0
 80048ee:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80048f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d106      	bne.n	8004904 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	639a      	str	r2, [r3, #56]	; 0x38
 8004902:	e005      	b.n	8004910 <USB_CoreInit+0x48>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
<<<<<<< HEAD
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004988:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8004990:	7bfb      	ldrb	r3, [r7, #15]
}
 8004992:	4618      	mov	r0, r3
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800499c:	b004      	add	sp, #16
 800499e:	4770      	bx	lr

080049a0 <USB_DisableGlobalInt>:
=======
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004908:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8004910:	7bfb      	ldrb	r3, [r7, #15]
}
 8004912:	4618      	mov	r0, r3
 8004914:	3710      	adds	r7, #16
 8004916:	46bd      	mov	sp, r7
 8004918:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800491c:	b004      	add	sp, #16
 800491e:	4770      	bx	lr

08004920 <USB_DisableGlobalInt>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
<<<<<<< HEAD
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	f023 0201 	bic.w	r2, r3, #1
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr

080049c2 <USB_SetCurrentMode>:
=======
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f023 0201 	bic.w	r2, r3, #1
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr

08004942 <USB_SetCurrentMode>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
<<<<<<< HEAD
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b084      	sub	sp, #16
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
 80049ca:	460b      	mov	r3, r1
 80049cc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80049ce:	2300      	movs	r3, #0
 80049d0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80049de:	78fb      	ldrb	r3, [r7, #3]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d115      	bne.n	8004a10 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	60da      	str	r2, [r3, #12]
=======
 8004942:	b580      	push	{r7, lr}
 8004944:	b084      	sub	sp, #16
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
 800494a:	460b      	mov	r3, r1
 800494c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800494e:	2300      	movs	r3, #0
 8004950:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800495e:	78fb      	ldrb	r3, [r7, #3]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d115      	bne.n	8004990 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	60da      	str	r2, [r3, #12]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

    do
    {
      HAL_Delay(1U);
<<<<<<< HEAD
 80049f0:	2001      	movs	r0, #1
 80049f2:	f7fc fa75 	bl	8000ee0 <HAL_Delay>
      ms++;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	3301      	adds	r3, #1
 80049fa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f000 fa17 	bl	8004e30 <USB_GetMode>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d01e      	beq.n	8004a46 <USB_SetCurrentMode+0x84>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2b31      	cmp	r3, #49	; 0x31
 8004a0c:	d9f0      	bls.n	80049f0 <USB_SetCurrentMode+0x2e>
 8004a0e:	e01a      	b.n	8004a46 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004a10:	78fb      	ldrb	r3, [r7, #3]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d115      	bne.n	8004a42 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	60da      	str	r2, [r3, #12]
=======
 8004970:	2001      	movs	r0, #1
 8004972:	f7fc fa97 	bl	8000ea4 <HAL_Delay>
      ms++;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	3301      	adds	r3, #1
 800497a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 fa17 	bl	8004db0 <USB_GetMode>
 8004982:	4603      	mov	r3, r0
 8004984:	2b01      	cmp	r3, #1
 8004986:	d01e      	beq.n	80049c6 <USB_SetCurrentMode+0x84>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2b31      	cmp	r3, #49	; 0x31
 800498c:	d9f0      	bls.n	8004970 <USB_SetCurrentMode+0x2e>
 800498e:	e01a      	b.n	80049c6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004990:	78fb      	ldrb	r3, [r7, #3]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d115      	bne.n	80049c2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	60da      	str	r2, [r3, #12]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

    do
    {
      HAL_Delay(1U);
<<<<<<< HEAD
 8004a22:	2001      	movs	r0, #1
 8004a24:	f7fc fa5c 	bl	8000ee0 <HAL_Delay>
      ms++;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f9fe 	bl	8004e30 <USB_GetMode>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d005      	beq.n	8004a46 <USB_SetCurrentMode+0x84>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2b31      	cmp	r3, #49	; 0x31
 8004a3e:	d9f0      	bls.n	8004a22 <USB_SetCurrentMode+0x60>
 8004a40:	e001      	b.n	8004a46 <USB_SetCurrentMode+0x84>
=======
 80049a2:	2001      	movs	r0, #1
 80049a4:	f7fc fa7e 	bl	8000ea4 <HAL_Delay>
      ms++;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	3301      	adds	r3, #1
 80049ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 f9fe 	bl	8004db0 <USB_GetMode>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d005      	beq.n	80049c6 <USB_SetCurrentMode+0x84>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2b31      	cmp	r3, #49	; 0x31
 80049be:	d9f0      	bls.n	80049a2 <USB_SetCurrentMode+0x60>
 80049c0:	e001      	b.n	80049c6 <USB_SetCurrentMode+0x84>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }
  else
  {
    return HAL_ERROR;
<<<<<<< HEAD
 8004a42:	2301      	movs	r3, #1
 8004a44:	e005      	b.n	8004a52 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2b32      	cmp	r3, #50	; 0x32
 8004a4a:	d101      	bne.n	8004a50 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e000      	b.n	8004a52 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3710      	adds	r7, #16
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
	...

08004a5c <USB_DevInit>:
=======
 80049c2:	2301      	movs	r3, #1
 80049c4:	e005      	b.n	80049d2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2b32      	cmp	r3, #50	; 0x32
 80049ca:	d101      	bne.n	80049d0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e000      	b.n	80049d2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
	...

080049dc <USB_DevInit>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
<<<<<<< HEAD
 8004a5c:	b084      	sub	sp, #16
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b086      	sub	sp, #24
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
 8004a66:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004a6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004a76:	2300      	movs	r3, #0
 8004a78:	613b      	str	r3, [r7, #16]
 8004a7a:	e009      	b.n	8004a90 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	3340      	adds	r3, #64	; 0x40
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	4413      	add	r3, r2
 8004a86:	2200      	movs	r2, #0
 8004a88:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	613b      	str	r3, [r7, #16]
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	2b0e      	cmp	r3, #14
 8004a94:	d9f2      	bls.n	8004a7c <USB_DevInit+0x20>
=======
 80049dc:	b084      	sub	sp, #16
 80049de:	b580      	push	{r7, lr}
 80049e0:	b086      	sub	sp, #24
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
 80049e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80049ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80049ee:	2300      	movs	r3, #0
 80049f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80049f6:	2300      	movs	r3, #0
 80049f8:	613b      	str	r3, [r7, #16]
 80049fa:	e009      	b.n	8004a10 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	3340      	adds	r3, #64	; 0x40
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	4413      	add	r3, r2
 8004a06:	2200      	movs	r2, #0
 8004a08:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	613b      	str	r3, [r7, #16]
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	2b0e      	cmp	r3, #14
 8004a14:	d9f2      	bls.n	80049fc <USB_DevInit+0x20>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
<<<<<<< HEAD
 8004a96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d11c      	bne.n	8004ad6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004aaa:	f043 0302 	orr.w	r3, r3, #2
 8004aae:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	601a      	str	r2, [r3, #0]
 8004ad4:	e005      	b.n	8004ae2 <USB_DevInit+0x86>
=======
 8004a16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d11c      	bne.n	8004a56 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a2a:	f043 0302 	orr.w	r3, r3, #2
 8004a2e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a34:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	601a      	str	r2, [r3, #0]
 8004a54:	e005      	b.n	8004a62 <USB_DevInit+0x86>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
<<<<<<< HEAD
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ada:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	639a      	str	r2, [r3, #56]	; 0x38
=======
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	639a      	str	r2, [r3, #56]	; 0x38
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
<<<<<<< HEAD
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004ae8:	461a      	mov	r2, r3
 8004aea:	2300      	movs	r3, #0
 8004aec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004af4:	4619      	mov	r1, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004afc:	461a      	mov	r2, r3
 8004afe:	680b      	ldr	r3, [r1, #0]
 8004b00:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004b02:	2103      	movs	r1, #3
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 f959 	bl	8004dbc <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004b0a:	2110      	movs	r1, #16
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 f8f1 	bl	8004cf4 <USB_FlushTxFifo>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d001      	beq.n	8004b1c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 f91d 	bl	8004d5c <USB_FlushRxFifo>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d001      	beq.n	8004b2c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	75fb      	strb	r3, [r7, #23]
=======
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a68:	461a      	mov	r2, r3
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a74:	4619      	mov	r1, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	680b      	ldr	r3, [r1, #0]
 8004a80:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004a82:	2103      	movs	r1, #3
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 f959 	bl	8004d3c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004a8a:	2110      	movs	r1, #16
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f000 f8f1 	bl	8004c74 <USB_FlushTxFifo>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d001      	beq.n	8004a9c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f000 f91d 	bl	8004cdc <USB_FlushRxFifo>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d001      	beq.n	8004aac <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	75fb      	strb	r3, [r7, #23]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
<<<<<<< HEAD
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b32:	461a      	mov	r2, r3
 8004b34:	2300      	movs	r3, #0
 8004b36:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b3e:	461a      	mov	r2, r3
 8004b40:	2300      	movs	r3, #0
 8004b42:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b50:	2300      	movs	r3, #0
 8004b52:	613b      	str	r3, [r7, #16]
 8004b54:	e043      	b.n	8004bde <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	015a      	lsls	r2, r3, #5
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b6c:	d118      	bne.n	8004ba0 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d10a      	bne.n	8004b8a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	015a      	lsls	r2, r3, #5
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b80:	461a      	mov	r2, r3
 8004b82:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b86:	6013      	str	r3, [r2, #0]
 8004b88:	e013      	b.n	8004bb2 <USB_DevInit+0x156>
=======
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004abe:	461a      	mov	r2, r3
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aca:	461a      	mov	r2, r3
 8004acc:	2300      	movs	r3, #0
 8004ace:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	613b      	str	r3, [r7, #16]
 8004ad4:	e043      	b.n	8004b5e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	015a      	lsls	r2, r3, #5
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	4413      	add	r3, r2
 8004ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ae8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004aec:	d118      	bne.n	8004b20 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d10a      	bne.n	8004b0a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	015a      	lsls	r2, r3, #5
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	4413      	add	r3, r2
 8004afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b00:	461a      	mov	r2, r3
 8004b02:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b06:	6013      	str	r3, [r2, #0]
 8004b08:	e013      	b.n	8004b32 <USB_DevInit+0x156>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
<<<<<<< HEAD
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	015a      	lsls	r2, r3, #5
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	4413      	add	r3, r2
 8004b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b96:	461a      	mov	r2, r3
 8004b98:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b9c:	6013      	str	r3, [r2, #0]
 8004b9e:	e008      	b.n	8004bb2 <USB_DevInit+0x156>
=======
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	015a      	lsls	r2, r3, #5
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	4413      	add	r3, r2
 8004b12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b16:	461a      	mov	r2, r3
 8004b18:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b1c:	6013      	str	r3, [r2, #0]
 8004b1e:	e008      	b.n	8004b32 <USB_DevInit+0x156>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
<<<<<<< HEAD
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	015a      	lsls	r2, r3, #5
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bac:	461a      	mov	r2, r3
 8004bae:	2300      	movs	r3, #0
 8004bb0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	015a      	lsls	r2, r3, #5
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	4413      	add	r3, r2
 8004bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	015a      	lsls	r2, r3, #5
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	4413      	add	r3, r2
 8004bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004bd6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	3301      	adds	r3, #1
 8004bdc:	613b      	str	r3, [r7, #16]
 8004bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be0:	693a      	ldr	r2, [r7, #16]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d3b7      	bcc.n	8004b56 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004be6:	2300      	movs	r3, #0
 8004be8:	613b      	str	r3, [r7, #16]
 8004bea:	e043      	b.n	8004c74 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	015a      	lsls	r2, r3, #5
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c02:	d118      	bne.n	8004c36 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d10a      	bne.n	8004c20 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	015a      	lsls	r2, r3, #5
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	4413      	add	r3, r2
 8004c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c16:	461a      	mov	r2, r3
 8004c18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c1c:	6013      	str	r3, [r2, #0]
 8004c1e:	e013      	b.n	8004c48 <USB_DevInit+0x1ec>
=======
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	015a      	lsls	r2, r3, #5
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	4413      	add	r3, r2
 8004b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	2300      	movs	r3, #0
 8004b30:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	015a      	lsls	r2, r3, #5
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	4413      	add	r3, r2
 8004b3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b3e:	461a      	mov	r2, r3
 8004b40:	2300      	movs	r3, #0
 8004b42:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	015a      	lsls	r2, r3, #5
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	4413      	add	r3, r2
 8004b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b50:	461a      	mov	r2, r3
 8004b52:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b56:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	613b      	str	r3, [r7, #16]
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b60:	693a      	ldr	r2, [r7, #16]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d3b7      	bcc.n	8004ad6 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b66:	2300      	movs	r3, #0
 8004b68:	613b      	str	r3, [r7, #16]
 8004b6a:	e043      	b.n	8004bf4 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	015a      	lsls	r2, r3, #5
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	4413      	add	r3, r2
 8004b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b82:	d118      	bne.n	8004bb6 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d10a      	bne.n	8004ba0 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	015a      	lsls	r2, r3, #5
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	4413      	add	r3, r2
 8004b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b96:	461a      	mov	r2, r3
 8004b98:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b9c:	6013      	str	r3, [r2, #0]
 8004b9e:	e013      	b.n	8004bc8 <USB_DevInit+0x1ec>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
<<<<<<< HEAD
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	015a      	lsls	r2, r3, #5
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	4413      	add	r3, r2
 8004c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004c32:	6013      	str	r3, [r2, #0]
 8004c34:	e008      	b.n	8004c48 <USB_DevInit+0x1ec>
=======
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	015a      	lsls	r2, r3, #5
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bac:	461a      	mov	r2, r3
 8004bae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004bb2:	6013      	str	r3, [r2, #0]
 8004bb4:	e008      	b.n	8004bc8 <USB_DevInit+0x1ec>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
<<<<<<< HEAD
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	015a      	lsls	r2, r3, #5
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c42:	461a      	mov	r2, r3
 8004c44:	2300      	movs	r3, #0
 8004c46:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	015a      	lsls	r2, r3, #5
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	4413      	add	r3, r2
 8004c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c54:	461a      	mov	r2, r3
 8004c56:	2300      	movs	r3, #0
 8004c58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	015a      	lsls	r2, r3, #5
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	4413      	add	r3, r2
 8004c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c66:	461a      	mov	r2, r3
 8004c68:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c6c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	3301      	adds	r3, #1
 8004c72:	613b      	str	r3, [r7, #16]
 8004c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d3b7      	bcc.n	8004bec <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c8e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004c9c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	f043 0210 	orr.w	r2, r3, #16
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	699a      	ldr	r2, [r3, #24]
 8004cae:	4b10      	ldr	r3, [pc, #64]	; (8004cf0 <USB_DevInit+0x294>)
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	6193      	str	r3, [r2, #24]
=======
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	015a      	lsls	r2, r3, #5
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	015a      	lsls	r2, r3, #5
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	4413      	add	r3, r2
 8004bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	015a      	lsls	r2, r3, #5
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	4413      	add	r3, r2
 8004be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be6:	461a      	mov	r2, r3
 8004be8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004bec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	613b      	str	r3, [r7, #16]
 8004bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d3b7      	bcc.n	8004b6c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c0e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004c1c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	f043 0210 	orr.w	r2, r3, #16
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	699a      	ldr	r2, [r3, #24]
 8004c2e:	4b10      	ldr	r3, [pc, #64]	; (8004c70 <USB_DevInit+0x294>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	6193      	str	r3, [r2, #24]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
<<<<<<< HEAD
 8004cb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d005      	beq.n	8004cc8 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	699b      	ldr	r3, [r3, #24]
 8004cc0:	f043 0208 	orr.w	r2, r3, #8
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004cc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d107      	bne.n	8004cde <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004cd6:	f043 0304 	orr.w	r3, r3, #4
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004cde:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3718      	adds	r7, #24
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004cea:	b004      	add	sp, #16
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	803c3800 	.word	0x803c3800

08004cf4 <USB_FlushTxFifo>:
=======
 8004c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d005      	beq.n	8004c48 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	f043 0208 	orr.w	r2, r3, #8
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004c48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d107      	bne.n	8004c5e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c56:	f043 0304 	orr.w	r3, r3, #4
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004c5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3718      	adds	r7, #24
 8004c64:	46bd      	mov	sp, r7
 8004c66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c6a:	b004      	add	sp, #16
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	803c3800 	.word	0x803c3800

08004c74 <USB_FlushTxFifo>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
<<<<<<< HEAD
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	60fb      	str	r3, [r7, #12]
=======
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	60fb      	str	r3, [r7, #12]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
<<<<<<< HEAD
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	3301      	adds	r3, #1
 8004d06:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	4a13      	ldr	r2, [pc, #76]	; (8004d58 <USB_FlushTxFifo+0x64>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d901      	bls.n	8004d14 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e01b      	b.n	8004d4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	daf2      	bge.n	8004d02 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	019b      	lsls	r3, r3, #6
 8004d24:	f043 0220 	orr.w	r2, r3, #32
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	611a      	str	r2, [r3, #16]
=======
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	3301      	adds	r3, #1
 8004c86:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	4a13      	ldr	r2, [pc, #76]	; (8004cd8 <USB_FlushTxFifo+0x64>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d901      	bls.n	8004c94 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e01b      	b.n	8004ccc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	daf2      	bge.n	8004c82 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	019b      	lsls	r3, r3, #6
 8004ca4:	f043 0220 	orr.w	r2, r3, #32
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	611a      	str	r2, [r3, #16]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

  do
  {
    count++;
<<<<<<< HEAD
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	3301      	adds	r3, #1
 8004d30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	4a08      	ldr	r2, [pc, #32]	; (8004d58 <USB_FlushTxFifo+0x64>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d901      	bls.n	8004d3e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e006      	b.n	8004d4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	f003 0320 	and.w	r3, r3, #32
 8004d46:	2b20      	cmp	r3, #32
 8004d48:	d0f0      	beq.n	8004d2c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3714      	adds	r7, #20
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr
 8004d58:	00030d40 	.word	0x00030d40

08004d5c <USB_FlushRxFifo>:
=======
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	3301      	adds	r3, #1
 8004cb0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	4a08      	ldr	r2, [pc, #32]	; (8004cd8 <USB_FlushTxFifo+0x64>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d901      	bls.n	8004cbe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e006      	b.n	8004ccc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	f003 0320 	and.w	r3, r3, #32
 8004cc6:	2b20      	cmp	r3, #32
 8004cc8:	d0f0      	beq.n	8004cac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3714      	adds	r7, #20
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr
 8004cd8:	00030d40 	.word	0x00030d40

08004cdc <USB_FlushRxFifo>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
<<<<<<< HEAD
 8004d5c:	b480      	push	{r7}
 8004d5e:	b085      	sub	sp, #20
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d64:	2300      	movs	r3, #0
 8004d66:	60fb      	str	r3, [r7, #12]
=======
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	60fb      	str	r3, [r7, #12]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
<<<<<<< HEAD
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	4a11      	ldr	r2, [pc, #68]	; (8004db8 <USB_FlushRxFifo+0x5c>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d901      	bls.n	8004d7a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e018      	b.n	8004dac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	daf2      	bge.n	8004d68 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004d82:	2300      	movs	r3, #0
 8004d84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2210      	movs	r2, #16
 8004d8a:	611a      	str	r2, [r3, #16]
=======
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	3301      	adds	r3, #1
 8004cec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	4a11      	ldr	r2, [pc, #68]	; (8004d38 <USB_FlushRxFifo+0x5c>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d901      	bls.n	8004cfa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e018      	b.n	8004d2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	daf2      	bge.n	8004ce8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004d02:	2300      	movs	r3, #0
 8004d04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2210      	movs	r2, #16
 8004d0a:	611a      	str	r2, [r3, #16]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

  do
  {
    count++;
<<<<<<< HEAD
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	3301      	adds	r3, #1
 8004d90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	4a08      	ldr	r2, [pc, #32]	; (8004db8 <USB_FlushRxFifo+0x5c>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d901      	bls.n	8004d9e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e006      	b.n	8004dac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	f003 0310 	and.w	r3, r3, #16
 8004da6:	2b10      	cmp	r3, #16
 8004da8:	d0f0      	beq.n	8004d8c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3714      	adds	r7, #20
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr
 8004db8:	00030d40 	.word	0x00030d40

08004dbc <USB_SetDevSpeed>:
=======
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	3301      	adds	r3, #1
 8004d10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	4a08      	ldr	r2, [pc, #32]	; (8004d38 <USB_FlushRxFifo+0x5c>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d901      	bls.n	8004d1e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e006      	b.n	8004d2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	f003 0310 	and.w	r3, r3, #16
 8004d26:	2b10      	cmp	r3, #16
 8004d28:	d0f0      	beq.n	8004d0c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004d2a:	2300      	movs	r3, #0
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3714      	adds	r7, #20
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr
 8004d38:	00030d40 	.word	0x00030d40

08004d3c <USB_SetDevSpeed>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
<<<<<<< HEAD
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	78fb      	ldrb	r3, [r7, #3]
 8004dd6:	68f9      	ldr	r1, [r7, #12]
 8004dd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3714      	adds	r7, #20
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr

08004dee <USB_DevDisconnect>:
=======
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	460b      	mov	r3, r1
 8004d46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	78fb      	ldrb	r3, [r7, #3]
 8004d56:	68f9      	ldr	r1, [r7, #12]
 8004d58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr

08004d6e <USB_DevDisconnect>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
<<<<<<< HEAD
 8004dee:	b480      	push	{r7}
 8004df0:	b085      	sub	sp, #20
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004e08:	f023 0303 	bic.w	r3, r3, #3
 8004e0c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e1c:	f043 0302 	orr.w	r3, r3, #2
 8004e20:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3714      	adds	r7, #20
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <USB_GetMode>:
=======
 8004d6e:	b480      	push	{r7}
 8004d70:	b085      	sub	sp, #20
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004d88:	f023 0303 	bic.w	r3, r3, #3
 8004d8c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d9c:	f043 0302 	orr.w	r3, r3, #2
 8004da0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3714      	adds	r7, #20
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <USB_GetMode>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
<<<<<<< HEAD
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	695b      	ldr	r3, [r3, #20]
 8004e3c:	f003 0301 	and.w	r3, r3, #1
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <USB_CoreReset>:
=======
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	695b      	ldr	r3, [r3, #20]
 8004dbc:	f003 0301 	and.w	r3, r3, #1
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <USB_CoreReset>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
<<<<<<< HEAD
 8004e4c:	b480      	push	{r7}
 8004e4e:	b085      	sub	sp, #20
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e54:	2300      	movs	r3, #0
 8004e56:	60fb      	str	r3, [r7, #12]
=======
 8004dcc:	b480      	push	{r7}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	60fb      	str	r3, [r7, #12]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
<<<<<<< HEAD
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	4a13      	ldr	r2, [pc, #76]	; (8004eb0 <USB_CoreReset+0x64>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d901      	bls.n	8004e6a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e01b      	b.n	8004ea2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	daf2      	bge.n	8004e58 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004e72:	2300      	movs	r3, #0
 8004e74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	f043 0201 	orr.w	r2, r3, #1
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	611a      	str	r2, [r3, #16]
=======
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	3301      	adds	r3, #1
 8004ddc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	4a13      	ldr	r2, [pc, #76]	; (8004e30 <USB_CoreReset+0x64>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d901      	bls.n	8004dea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e01b      	b.n	8004e22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	daf2      	bge.n	8004dd8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004df2:	2300      	movs	r3, #0
 8004df4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	f043 0201 	orr.w	r2, r3, #1
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	611a      	str	r2, [r3, #16]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

  do
  {
    count++;
<<<<<<< HEAD
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	3301      	adds	r3, #1
 8004e86:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	4a09      	ldr	r2, [pc, #36]	; (8004eb0 <USB_CoreReset+0x64>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d901      	bls.n	8004e94 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e006      	b.n	8004ea2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	f003 0301 	and.w	r3, r3, #1
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d0f0      	beq.n	8004e82 <USB_CoreReset+0x36>

  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3714      	adds	r7, #20
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	00030d40 	.word	0x00030d40

08004eb4 <__NVIC_SetPriority>:
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	4603      	mov	r3, r0
 8004ebc:	6039      	str	r1, [r7, #0]
 8004ebe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	db0a      	blt.n	8004ede <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	b2da      	uxtb	r2, r3
 8004ecc:	490c      	ldr	r1, [pc, #48]	; (8004f00 <__NVIC_SetPriority+0x4c>)
 8004ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ed2:	0112      	lsls	r2, r2, #4
 8004ed4:	b2d2      	uxtb	r2, r2
 8004ed6:	440b      	add	r3, r1
 8004ed8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004edc:	e00a      	b.n	8004ef4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	b2da      	uxtb	r2, r3
 8004ee2:	4908      	ldr	r1, [pc, #32]	; (8004f04 <__NVIC_SetPriority+0x50>)
 8004ee4:	79fb      	ldrb	r3, [r7, #7]
 8004ee6:	f003 030f 	and.w	r3, r3, #15
 8004eea:	3b04      	subs	r3, #4
 8004eec:	0112      	lsls	r2, r2, #4
 8004eee:	b2d2      	uxtb	r2, r2
 8004ef0:	440b      	add	r3, r1
 8004ef2:	761a      	strb	r2, [r3, #24]
}
 8004ef4:	bf00      	nop
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr
 8004f00:	e000e100 	.word	0xe000e100
 8004f04:	e000ed00 	.word	0xe000ed00

08004f08 <SysTick_Handler>:
=======
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	3301      	adds	r3, #1
 8004e06:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	4a09      	ldr	r2, [pc, #36]	; (8004e30 <USB_CoreReset+0x64>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d901      	bls.n	8004e14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e006      	b.n	8004e22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	f003 0301 	and.w	r3, r3, #1
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d0f0      	beq.n	8004e02 <USB_CoreReset+0x36>

  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3714      	adds	r7, #20
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	00030d40 	.word	0x00030d40

08004e34 <__NVIC_SetPriority>:
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	6039      	str	r1, [r7, #0]
 8004e3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	db0a      	blt.n	8004e5e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	b2da      	uxtb	r2, r3
 8004e4c:	490c      	ldr	r1, [pc, #48]	; (8004e80 <__NVIC_SetPriority+0x4c>)
 8004e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e52:	0112      	lsls	r2, r2, #4
 8004e54:	b2d2      	uxtb	r2, r2
 8004e56:	440b      	add	r3, r1
 8004e58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004e5c:	e00a      	b.n	8004e74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	b2da      	uxtb	r2, r3
 8004e62:	4908      	ldr	r1, [pc, #32]	; (8004e84 <__NVIC_SetPriority+0x50>)
 8004e64:	79fb      	ldrb	r3, [r7, #7]
 8004e66:	f003 030f 	and.w	r3, r3, #15
 8004e6a:	3b04      	subs	r3, #4
 8004e6c:	0112      	lsls	r2, r2, #4
 8004e6e:	b2d2      	uxtb	r2, r2
 8004e70:	440b      	add	r3, r1
 8004e72:	761a      	strb	r2, [r3, #24]
}
 8004e74:	bf00      	nop
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr
 8004e80:	e000e100 	.word	0xe000e100
 8004e84:	e000ed00 	.word	0xe000ed00

08004e88 <SysTick_Handler>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
<<<<<<< HEAD
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004f0c:	4b05      	ldr	r3, [pc, #20]	; (8004f24 <SysTick_Handler+0x1c>)
 8004f0e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004f10:	f001 fd28 	bl	8006964 <xTaskGetSchedulerState>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d001      	beq.n	8004f1e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004f1a:	f002 fb0d 	bl	8007538 <xPortSysTickHandler>
  }
}
 8004f1e:	bf00      	nop
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	e000e010 	.word	0xe000e010

08004f28 <SVC_Setup>:
=======
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004e8c:	4b05      	ldr	r3, [pc, #20]	; (8004ea4 <SysTick_Handler+0x1c>)
 8004e8e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004e90:	f001 fd28 	bl	80068e4 <xTaskGetSchedulerState>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d001      	beq.n	8004e9e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004e9a:	f002 fb0d 	bl	80074b8 <xPortSysTickHandler>
  }
}
 8004e9e:	bf00      	nop
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	e000e010 	.word	0xe000e010

08004ea8 <SVC_Setup>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
<<<<<<< HEAD
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	af00      	add	r7, sp, #0
=======
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	af00      	add	r7, sp, #0
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
<<<<<<< HEAD
 8004f2c:	2100      	movs	r1, #0
 8004f2e:	f06f 0004 	mvn.w	r0, #4
 8004f32:	f7ff ffbf 	bl	8004eb4 <__NVIC_SetPriority>
#endif
}
 8004f36:	bf00      	nop
 8004f38:	bd80      	pop	{r7, pc}
	...

08004f3c <osKernelInitialize>:
=======
 8004eac:	2100      	movs	r1, #0
 8004eae:	f06f 0004 	mvn.w	r0, #4
 8004eb2:	f7ff ffbf 	bl	8004e34 <__NVIC_SetPriority>
#endif
}
 8004eb6:	bf00      	nop
 8004eb8:	bd80      	pop	{r7, pc}
	...

08004ebc <osKernelInitialize>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
<<<<<<< HEAD
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f42:	f3ef 8305 	mrs	r3, IPSR
 8004f46:	603b      	str	r3, [r7, #0]
  return(result);
 8004f48:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d003      	beq.n	8004f56 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004f4e:	f06f 0305 	mvn.w	r3, #5
 8004f52:	607b      	str	r3, [r7, #4]
 8004f54:	e00c      	b.n	8004f70 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004f56:	4b0a      	ldr	r3, [pc, #40]	; (8004f80 <osKernelInitialize+0x44>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d105      	bne.n	8004f6a <osKernelInitialize+0x2e>
=======
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ec2:	f3ef 8305 	mrs	r3, IPSR
 8004ec6:	603b      	str	r3, [r7, #0]
  return(result);
 8004ec8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d003      	beq.n	8004ed6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004ece:	f06f 0305 	mvn.w	r3, #5
 8004ed2:	607b      	str	r3, [r7, #4]
 8004ed4:	e00c      	b.n	8004ef0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004ed6:	4b0a      	ldr	r3, [pc, #40]	; (8004f00 <osKernelInitialize+0x44>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d105      	bne.n	8004eea <osKernelInitialize+0x2e>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
<<<<<<< HEAD
 8004f5e:	4b08      	ldr	r3, [pc, #32]	; (8004f80 <osKernelInitialize+0x44>)
 8004f60:	2201      	movs	r2, #1
 8004f62:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004f64:	2300      	movs	r3, #0
 8004f66:	607b      	str	r3, [r7, #4]
 8004f68:	e002      	b.n	8004f70 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f6e:	607b      	str	r3, [r7, #4]
=======
 8004ede:	4b08      	ldr	r3, [pc, #32]	; (8004f00 <osKernelInitialize+0x44>)
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	607b      	str	r3, [r7, #4]
 8004ee8:	e002      	b.n	8004ef0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004eea:	f04f 33ff 	mov.w	r3, #4294967295
 8004eee:	607b      	str	r3, [r7, #4]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    }
  }

  return (stat);
<<<<<<< HEAD
 8004f70:	687b      	ldr	r3, [r7, #4]
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	370c      	adds	r7, #12
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	20000760 	.word	0x20000760

08004f84 <osKernelStart>:
=======
 8004ef0:	687b      	ldr	r3, [r7, #4]
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	370c      	adds	r7, #12
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	20000774 	.word	0x20000774

08004f04 <osKernelStart>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  }

  return (state);
}

osStatus_t osKernelStart (void) {
<<<<<<< HEAD
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f8a:	f3ef 8305 	mrs	r3, IPSR
 8004f8e:	603b      	str	r3, [r7, #0]
  return(result);
 8004f90:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d003      	beq.n	8004f9e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004f96:	f06f 0305 	mvn.w	r3, #5
 8004f9a:	607b      	str	r3, [r7, #4]
 8004f9c:	e010      	b.n	8004fc0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004f9e:	4b0b      	ldr	r3, [pc, #44]	; (8004fcc <osKernelStart+0x48>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d109      	bne.n	8004fba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004fa6:	f7ff ffbf 	bl	8004f28 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004faa:	4b08      	ldr	r3, [pc, #32]	; (8004fcc <osKernelStart+0x48>)
 8004fac:	2202      	movs	r2, #2
 8004fae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004fb0:	f001 f87c 	bl	80060ac <vTaskStartScheduler>
      stat = osOK;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	607b      	str	r3, [r7, #4]
 8004fb8:	e002      	b.n	8004fc0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004fba:	f04f 33ff 	mov.w	r3, #4294967295
 8004fbe:	607b      	str	r3, [r7, #4]
=======
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f0a:	f3ef 8305 	mrs	r3, IPSR
 8004f0e:	603b      	str	r3, [r7, #0]
  return(result);
 8004f10:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d003      	beq.n	8004f1e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004f16:	f06f 0305 	mvn.w	r3, #5
 8004f1a:	607b      	str	r3, [r7, #4]
 8004f1c:	e010      	b.n	8004f40 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004f1e:	4b0b      	ldr	r3, [pc, #44]	; (8004f4c <osKernelStart+0x48>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d109      	bne.n	8004f3a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004f26:	f7ff ffbf 	bl	8004ea8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004f2a:	4b08      	ldr	r3, [pc, #32]	; (8004f4c <osKernelStart+0x48>)
 8004f2c:	2202      	movs	r2, #2
 8004f2e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004f30:	f001 f87c 	bl	800602c <vTaskStartScheduler>
      stat = osOK;
 8004f34:	2300      	movs	r3, #0
 8004f36:	607b      	str	r3, [r7, #4]
 8004f38:	e002      	b.n	8004f40 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f3e:	607b      	str	r3, [r7, #4]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    }
  }

  return (stat);
<<<<<<< HEAD
 8004fc0:	687b      	ldr	r3, [r7, #4]
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3708      	adds	r7, #8
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	20000760 	.word	0x20000760

08004fd0 <osThreadNew>:
=======
 8004f40:	687b      	ldr	r3, [r7, #4]
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3708      	adds	r7, #8
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	20000774 	.word	0x20000774

08004f50 <osThreadNew>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
<<<<<<< HEAD
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b08e      	sub	sp, #56	; 0x38
 8004fd4:	af04      	add	r7, sp, #16
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	607a      	str	r2, [r7, #4]
=======
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b08e      	sub	sp, #56	; 0x38
 8004f54:	af04      	add	r7, sp, #16
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
<<<<<<< HEAD
 8004fdc:	2300      	movs	r3, #0
 8004fde:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fe0:	f3ef 8305 	mrs	r3, IPSR
 8004fe4:	617b      	str	r3, [r7, #20]
  return(result);
 8004fe6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d17e      	bne.n	80050ea <osThreadNew+0x11a>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d07b      	beq.n	80050ea <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004ff2:	2380      	movs	r3, #128	; 0x80
 8004ff4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004ff6:	2318      	movs	r3, #24
 8004ff8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8005002:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d045      	beq.n	8005096 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d002      	beq.n	8005018 <osThreadNew+0x48>
        name = attr->name;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	699b      	ldr	r3, [r3, #24]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d002      	beq.n	8005026 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d008      	beq.n	800503e <osThreadNew+0x6e>
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	2b38      	cmp	r3, #56	; 0x38
 8005030:	d805      	bhi.n	800503e <osThreadNew+0x6e>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	f003 0301 	and.w	r3, r3, #1
 800503a:	2b00      	cmp	r3, #0
 800503c:	d001      	beq.n	8005042 <osThreadNew+0x72>
        return (NULL);
 800503e:	2300      	movs	r3, #0
 8005040:	e054      	b.n	80050ec <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d003      	beq.n	8005052 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	089b      	lsrs	r3, r3, #2
 8005050:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00e      	beq.n	8005078 <osThreadNew+0xa8>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	2ba7      	cmp	r3, #167	; 0xa7
 8005060:	d90a      	bls.n	8005078 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005066:	2b00      	cmp	r3, #0
 8005068:	d006      	beq.n	8005078 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d002      	beq.n	8005078 <osThreadNew+0xa8>
        mem = 1;
 8005072:	2301      	movs	r3, #1
 8005074:	61bb      	str	r3, [r7, #24]
 8005076:	e010      	b.n	800509a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d10c      	bne.n	800509a <osThreadNew+0xca>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d108      	bne.n	800509a <osThreadNew+0xca>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d104      	bne.n	800509a <osThreadNew+0xca>
          mem = 0;
 8005090:	2300      	movs	r3, #0
 8005092:	61bb      	str	r3, [r7, #24]
 8005094:	e001      	b.n	800509a <osThreadNew+0xca>
=======
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f60:	f3ef 8305 	mrs	r3, IPSR
 8004f64:	617b      	str	r3, [r7, #20]
  return(result);
 8004f66:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d17e      	bne.n	800506a <osThreadNew+0x11a>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d07b      	beq.n	800506a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004f72:	2380      	movs	r3, #128	; 0x80
 8004f74:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004f76:	2318      	movs	r3, #24
 8004f78:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f82:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d045      	beq.n	8005016 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d002      	beq.n	8004f98 <osThreadNew+0x48>
        name = attr->name;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d002      	beq.n	8004fa6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d008      	beq.n	8004fbe <osThreadNew+0x6e>
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	2b38      	cmp	r3, #56	; 0x38
 8004fb0:	d805      	bhi.n	8004fbe <osThreadNew+0x6e>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f003 0301 	and.w	r3, r3, #1
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d001      	beq.n	8004fc2 <osThreadNew+0x72>
        return (NULL);
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	e054      	b.n	800506c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d003      	beq.n	8004fd2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	089b      	lsrs	r3, r3, #2
 8004fd0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00e      	beq.n	8004ff8 <osThreadNew+0xa8>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	2bbb      	cmp	r3, #187	; 0xbb
 8004fe0:	d90a      	bls.n	8004ff8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d006      	beq.n	8004ff8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d002      	beq.n	8004ff8 <osThreadNew+0xa8>
        mem = 1;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	61bb      	str	r3, [r7, #24]
 8004ff6:	e010      	b.n	800501a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d10c      	bne.n	800501a <osThreadNew+0xca>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d108      	bne.n	800501a <osThreadNew+0xca>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d104      	bne.n	800501a <osThreadNew+0xca>
          mem = 0;
 8005010:	2300      	movs	r3, #0
 8005012:	61bb      	str	r3, [r7, #24]
 8005014:	e001      	b.n	800501a <osThreadNew+0xca>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
        }
      }
    }
    else {
      mem = 0;
<<<<<<< HEAD
 8005096:	2300      	movs	r3, #0
 8005098:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	2b01      	cmp	r3, #1
 800509e:	d110      	bne.n	80050c2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80050a8:	9202      	str	r2, [sp, #8]
 80050aa:	9301      	str	r3, [sp, #4]
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	9300      	str	r3, [sp, #0]
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	6a3a      	ldr	r2, [r7, #32]
 80050b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050b6:	68f8      	ldr	r0, [r7, #12]
 80050b8:	f000 fe0c 	bl	8005cd4 <xTaskCreateStatic>
 80050bc:	4603      	mov	r3, r0
 80050be:	613b      	str	r3, [r7, #16]
 80050c0:	e013      	b.n	80050ea <osThreadNew+0x11a>
=======
 8005016:	2300      	movs	r3, #0
 8005018:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d110      	bne.n	8005042 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005028:	9202      	str	r2, [sp, #8]
 800502a:	9301      	str	r3, [sp, #4]
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	9300      	str	r3, [sp, #0]
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	6a3a      	ldr	r2, [r7, #32]
 8005034:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005036:	68f8      	ldr	r0, [r7, #12]
 8005038:	f000 fe0c 	bl	8005c54 <xTaskCreateStatic>
 800503c:	4603      	mov	r3, r0
 800503e:	613b      	str	r3, [r7, #16]
 8005040:	e013      	b.n	800506a <osThreadNew+0x11a>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
      #endif
    }
    else {
      if (mem == 0) {
<<<<<<< HEAD
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d110      	bne.n	80050ea <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80050c8:	6a3b      	ldr	r3, [r7, #32]
 80050ca:	b29a      	uxth	r2, r3
 80050cc:	f107 0310 	add.w	r3, r7, #16
 80050d0:	9301      	str	r3, [sp, #4]
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	9300      	str	r3, [sp, #0]
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050da:	68f8      	ldr	r0, [r7, #12]
 80050dc:	f000 fe57 	bl	8005d8e <xTaskCreate>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d001      	beq.n	80050ea <osThreadNew+0x11a>
            hTask = NULL;
 80050e6:	2300      	movs	r3, #0
 80050e8:	613b      	str	r3, [r7, #16]
=======
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d110      	bne.n	800506a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005048:	6a3b      	ldr	r3, [r7, #32]
 800504a:	b29a      	uxth	r2, r3
 800504c:	f107 0310 	add.w	r3, r7, #16
 8005050:	9301      	str	r3, [sp, #4]
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	9300      	str	r3, [sp, #0]
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f000 fe57 	bl	8005d0e <xTaskCreate>
 8005060:	4603      	mov	r3, r0
 8005062:	2b01      	cmp	r3, #1
 8005064:	d001      	beq.n	800506a <osThreadNew+0x11a>
            hTask = NULL;
 8005066:	2300      	movs	r3, #0
 8005068:	613b      	str	r3, [r7, #16]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
<<<<<<< HEAD
 80050ea:	693b      	ldr	r3, [r7, #16]
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3728      	adds	r7, #40	; 0x28
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <osDelay>:
=======
 800506a:	693b      	ldr	r3, [r7, #16]
}
 800506c:	4618      	mov	r0, r3
 800506e:	3728      	adds	r7, #40	; 0x28
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <osDelay>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
<<<<<<< HEAD
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050fc:	f3ef 8305 	mrs	r3, IPSR
 8005100:	60bb      	str	r3, [r7, #8]
  return(result);
 8005102:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005104:	2b00      	cmp	r3, #0
 8005106:	d003      	beq.n	8005110 <osDelay+0x1c>
    stat = osErrorISR;
 8005108:	f06f 0305 	mvn.w	r3, #5
 800510c:	60fb      	str	r3, [r7, #12]
 800510e:	e007      	b.n	8005120 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005110:	2300      	movs	r3, #0
 8005112:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d002      	beq.n	8005120 <osDelay+0x2c>
      vTaskDelay(ticks);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 ff92 	bl	8006044 <vTaskDelay>
=======
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800507c:	f3ef 8305 	mrs	r3, IPSR
 8005080:	60bb      	str	r3, [r7, #8]
  return(result);
 8005082:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005084:	2b00      	cmp	r3, #0
 8005086:	d003      	beq.n	8005090 <osDelay+0x1c>
    stat = osErrorISR;
 8005088:	f06f 0305 	mvn.w	r3, #5
 800508c:	60fb      	str	r3, [r7, #12]
 800508e:	e007      	b.n	80050a0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005090:	2300      	movs	r3, #0
 8005092:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d002      	beq.n	80050a0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 ff92 	bl	8005fc4 <vTaskDelay>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
    }
  }

  return (stat);
<<<<<<< HEAD
 8005120:	68fb      	ldr	r3, [r7, #12]
}
 8005122:	4618      	mov	r0, r3
 8005124:	3710      	adds	r7, #16
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
	...

0800512c <vApplicationGetIdleTaskMemory>:
=======
 80050a0:	68fb      	ldr	r3, [r7, #12]
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3710      	adds	r7, #16
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
	...

080050ac <vApplicationGetIdleTaskMemory>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
<<<<<<< HEAD
 800512c:	b480      	push	{r7}
 800512e:	b085      	sub	sp, #20
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]
=======
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	607a      	str	r2, [r7, #4]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
<<<<<<< HEAD
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	4a07      	ldr	r2, [pc, #28]	; (8005158 <vApplicationGetIdleTaskMemory+0x2c>)
 800513c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	4a06      	ldr	r2, [pc, #24]	; (800515c <vApplicationGetIdleTaskMemory+0x30>)
 8005142:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2280      	movs	r2, #128	; 0x80
 8005148:	601a      	str	r2, [r3, #0]
}
 800514a:	bf00      	nop
 800514c:	3714      	adds	r7, #20
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	20000764 	.word	0x20000764
 800515c:	2000080c 	.word	0x2000080c

08005160 <vApplicationGetTimerTaskMemory>:
=======
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	4a07      	ldr	r2, [pc, #28]	; (80050d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80050bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	4a06      	ldr	r2, [pc, #24]	; (80050dc <vApplicationGetIdleTaskMemory+0x30>)
 80050c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2280      	movs	r2, #128	; 0x80
 80050c8:	601a      	str	r2, [r3, #0]
}
 80050ca:	bf00      	nop
 80050cc:	3714      	adds	r7, #20
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	20000778 	.word	0x20000778
 80050dc:	20000834 	.word	0x20000834

080050e0 <vApplicationGetTimerTaskMemory>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
<<<<<<< HEAD
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
=======
 80050e0:	b480      	push	{r7}
 80050e2:	b085      	sub	sp, #20
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
<<<<<<< HEAD
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	4a07      	ldr	r2, [pc, #28]	; (800518c <vApplicationGetTimerTaskMemory+0x2c>)
 8005170:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	4a06      	ldr	r2, [pc, #24]	; (8005190 <vApplicationGetTimerTaskMemory+0x30>)
 8005176:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800517e:	601a      	str	r2, [r3, #0]
}
 8005180:	bf00      	nop
 8005182:	3714      	adds	r7, #20
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr
 800518c:	20000a0c 	.word	0x20000a0c
 8005190:	20000ab4 	.word	0x20000ab4

08005194 <vListInitialise>:
=======
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	4a07      	ldr	r2, [pc, #28]	; (800510c <vApplicationGetTimerTaskMemory+0x2c>)
 80050f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	4a06      	ldr	r2, [pc, #24]	; (8005110 <vApplicationGetTimerTaskMemory+0x30>)
 80050f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050fe:	601a      	str	r2, [r3, #0]
}
 8005100:	bf00      	nop
 8005102:	3714      	adds	r7, #20
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr
 800510c:	20000a34 	.word	0x20000a34
 8005110:	20000af0 	.word	0x20000af0

08005114 <vListInitialise>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
<<<<<<< HEAD
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
=======
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
<<<<<<< HEAD
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f103 0208 	add.w	r2, r3, #8
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	605a      	str	r2, [r3, #4]
=======
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f103 0208 	add.w	r2, r3, #8
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	605a      	str	r2, [r3, #4]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
<<<<<<< HEAD
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f04f 32ff 	mov.w	r2, #4294967295
 80051ac:	609a      	str	r2, [r3, #8]
=======
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f04f 32ff 	mov.w	r2, #4294967295
 800512c:	609a      	str	r2, [r3, #8]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
<<<<<<< HEAD
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f103 0208 	add.w	r2, r3, #8
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f103 0208 	add.w	r2, r3, #8
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	601a      	str	r2, [r3, #0]
=======
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f103 0208 	add.w	r2, r3, #8
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f103 0208 	add.w	r2, r3, #8
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	601a      	str	r2, [r3, #0]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
<<<<<<< HEAD
 80051c8:	bf00      	nop
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <vListInitialiseItem>:
=======
 8005148:	bf00      	nop
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <vListInitialiseItem>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
<<<<<<< HEAD
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	611a      	str	r2, [r3, #16]
=======
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	611a      	str	r2, [r3, #16]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
<<<<<<< HEAD
 80051e2:	bf00      	nop
 80051e4:	370c      	adds	r7, #12
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr

080051ee <vListInsertEnd>:
=======
 8005162:	bf00      	nop
 8005164:	370c      	adds	r7, #12
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr

0800516e <vListInsertEnd>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
<<<<<<< HEAD
 80051ee:	b480      	push	{r7}
 80051f0:	b085      	sub	sp, #20
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
 80051f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	60fb      	str	r3, [r7, #12]
=======
 800516e:	b480      	push	{r7}
 8005170:	b085      	sub	sp, #20
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
 8005176:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	60fb      	str	r3, [r7, #12]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
<<<<<<< HEAD
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	689a      	ldr	r2, [r3, #8]
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	609a      	str	r2, [r3, #8]
=======
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	689a      	ldr	r2, [r3, #8]
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	609a      	str	r2, [r3, #8]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
<<<<<<< HEAD
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	683a      	ldr	r2, [r7, #0]
 8005212:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	683a      	ldr	r2, [r7, #0]
 8005218:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	1c5a      	adds	r2, r3, #1
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	601a      	str	r2, [r3, #0]
}
 800522a:	bf00      	nop
 800522c:	3714      	adds	r7, #20
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr

08005236 <vListInsert>:
=======
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	683a      	ldr	r2, [r7, #0]
 8005192:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	1c5a      	adds	r2, r3, #1
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	601a      	str	r2, [r3, #0]
}
 80051aa:	bf00      	nop
 80051ac:	3714      	adds	r7, #20
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr

080051b6 <vListInsert>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
<<<<<<< HEAD
 8005236:	b480      	push	{r7}
 8005238:	b085      	sub	sp, #20
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
 800523e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	60bb      	str	r3, [r7, #8]
=======
 80051b6:	b480      	push	{r7}
 80051b8:	b085      	sub	sp, #20
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
 80051be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	60bb      	str	r3, [r7, #8]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
<<<<<<< HEAD
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800524c:	d103      	bne.n	8005256 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	60fb      	str	r3, [r7, #12]
 8005254:	e00c      	b.n	8005270 <vListInsert+0x3a>
=======
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051cc:	d103      	bne.n	80051d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	60fb      	str	r3, [r7, #12]
 80051d4:	e00c      	b.n	80051f0 <vListInsert+0x3a>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
<<<<<<< HEAD
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	3308      	adds	r3, #8
 800525a:	60fb      	str	r3, [r7, #12]
 800525c:	e002      	b.n	8005264 <vListInsert+0x2e>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	60fb      	str	r3, [r7, #12]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68ba      	ldr	r2, [r7, #8]
 800526c:	429a      	cmp	r2, r3
 800526e:	d2f6      	bcs.n	800525e <vListInsert+0x28>
=======
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	3308      	adds	r3, #8
 80051da:	60fb      	str	r3, [r7, #12]
 80051dc:	e002      	b.n	80051e4 <vListInsert+0x2e>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	60fb      	str	r3, [r7, #12]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68ba      	ldr	r2, [r7, #8]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d2f6      	bcs.n	80051de <vListInsert+0x28>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
<<<<<<< HEAD
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	685a      	ldr	r2, [r3, #4]
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	683a      	ldr	r2, [r7, #0]
 800527e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	683a      	ldr	r2, [r7, #0]
 800528a:	605a      	str	r2, [r3, #4]
=======
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	685a      	ldr	r2, [r3, #4]
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	683a      	ldr	r2, [r7, #0]
 80051fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	683a      	ldr	r2, [r7, #0]
 800520a:	605a      	str	r2, [r3, #4]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
<<<<<<< HEAD
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	1c5a      	adds	r2, r3, #1
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	601a      	str	r2, [r3, #0]
}
 800529c:	bf00      	nop
 800529e:	3714      	adds	r7, #20
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <uxListRemove>:
=======
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	1c5a      	adds	r2, r3, #1
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	601a      	str	r2, [r3, #0]
}
 800521c:	bf00      	nop
 800521e:	3714      	adds	r7, #20
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <uxListRemove>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
<<<<<<< HEAD
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	6892      	ldr	r2, [r2, #8]
 80052be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	6852      	ldr	r2, [r2, #4]
 80052c8:	605a      	str	r2, [r3, #4]
=======
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	6892      	ldr	r2, [r2, #8]
 800523e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	6852      	ldr	r2, [r2, #4]
 8005248:	605a      	str	r2, [r3, #4]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
<<<<<<< HEAD
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d103      	bne.n	80052dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	689a      	ldr	r2, [r3, #8]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	605a      	str	r2, [r3, #4]
=======
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	429a      	cmp	r2, r3
 8005252:	d103      	bne.n	800525c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	689a      	ldr	r2, [r3, #8]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	605a      	str	r2, [r3, #4]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
<<<<<<< HEAD
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	1e5a      	subs	r2, r3, #1
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3714      	adds	r7, #20
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <xQueueGenericReset>:
=======
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	1e5a      	subs	r2, r3, #1
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
}
 8005270:	4618      	mov	r0, r3
 8005272:	3714      	adds	r7, #20
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <xQueueGenericReset>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
<<<<<<< HEAD
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d10a      	bne.n	8005326 <xQueueGenericReset+0x2a>
=======
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d10a      	bne.n	80052a6 <xQueueGenericReset+0x2a>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
<<<<<<< HEAD
 8005310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005314:	f383 8811 	msr	BASEPRI, r3
 8005318:	f3bf 8f6f 	isb	sy
 800531c:	f3bf 8f4f 	dsb	sy
 8005320:	60bb      	str	r3, [r7, #8]
=======
 8005290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005294:	f383 8811 	msr	BASEPRI, r3
 8005298:	f3bf 8f6f 	isb	sy
 800529c:	f3bf 8f4f 	dsb	sy
 80052a0:	60bb      	str	r3, [r7, #8]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
<<<<<<< HEAD
 8005322:	bf00      	nop
 8005324:	e7fe      	b.n	8005324 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005326:	f002 f875 	bl	8007414 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005332:	68f9      	ldr	r1, [r7, #12]
 8005334:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005336:	fb01 f303 	mul.w	r3, r1, r3
 800533a:	441a      	add	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2200      	movs	r2, #0
 8005344:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005356:	3b01      	subs	r3, #1
 8005358:	68f9      	ldr	r1, [r7, #12]
 800535a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800535c:	fb01 f303 	mul.w	r3, r1, r3
 8005360:	441a      	add	r2, r3
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	22ff      	movs	r2, #255	; 0xff
 800536a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	22ff      	movs	r2, #255	; 0xff
 8005372:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d114      	bne.n	80053a6 <xQueueGenericReset+0xaa>
=======
 80052a2:	bf00      	nop
 80052a4:	e7fe      	b.n	80052a4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80052a6:	f002 f875 	bl	8007394 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b2:	68f9      	ldr	r1, [r7, #12]
 80052b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80052b6:	fb01 f303 	mul.w	r3, r1, r3
 80052ba:	441a      	add	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2200      	movs	r2, #0
 80052c4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052d6:	3b01      	subs	r3, #1
 80052d8:	68f9      	ldr	r1, [r7, #12]
 80052da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80052dc:	fb01 f303 	mul.w	r3, r1, r3
 80052e0:	441a      	add	r2, r3
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	22ff      	movs	r2, #255	; 0xff
 80052ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	22ff      	movs	r2, #255	; 0xff
 80052f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d114      	bne.n	8005326 <xQueueGenericReset+0xaa>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
<<<<<<< HEAD
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d01a      	beq.n	80053ba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	3310      	adds	r3, #16
 8005388:	4618      	mov	r0, r3
 800538a:	f001 f929 	bl	80065e0 <xTaskRemoveFromEventList>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d012      	beq.n	80053ba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005394:	4b0c      	ldr	r3, [pc, #48]	; (80053c8 <xQueueGenericReset+0xcc>)
 8005396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800539a:	601a      	str	r2, [r3, #0]
 800539c:	f3bf 8f4f 	dsb	sy
 80053a0:	f3bf 8f6f 	isb	sy
 80053a4:	e009      	b.n	80053ba <xQueueGenericReset+0xbe>
=======
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d01a      	beq.n	800533a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	3310      	adds	r3, #16
 8005308:	4618      	mov	r0, r3
 800530a:	f001 f929 	bl	8006560 <xTaskRemoveFromEventList>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d012      	beq.n	800533a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005314:	4b0c      	ldr	r3, [pc, #48]	; (8005348 <xQueueGenericReset+0xcc>)
 8005316:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800531a:	601a      	str	r2, [r3, #0]
 800531c:	f3bf 8f4f 	dsb	sy
 8005320:	f3bf 8f6f 	isb	sy
 8005324:	e009      	b.n	800533a <xQueueGenericReset+0xbe>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
<<<<<<< HEAD
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	3310      	adds	r3, #16
 80053aa:	4618      	mov	r0, r3
 80053ac:	f7ff fef2 	bl	8005194 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	3324      	adds	r3, #36	; 0x24
 80053b4:	4618      	mov	r0, r3
 80053b6:	f7ff feed 	bl	8005194 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80053ba:	f002 f85b 	bl	8007474 <vPortExitCritical>
=======
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	3310      	adds	r3, #16
 800532a:	4618      	mov	r0, r3
 800532c:	f7ff fef2 	bl	8005114 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	3324      	adds	r3, #36	; 0x24
 8005334:	4618      	mov	r0, r3
 8005336:	f7ff feed 	bl	8005114 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800533a:	f002 f85b 	bl	80073f4 <vPortExitCritical>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
<<<<<<< HEAD
 80053be:	2301      	movs	r3, #1
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3710      	adds	r7, #16
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	e000ed04 	.word	0xe000ed04

080053cc <xQueueGenericCreateStatic>:
=======
 800533e:	2301      	movs	r3, #1
}
 8005340:	4618      	mov	r0, r3
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	e000ed04 	.word	0xe000ed04

0800534c <xQueueGenericCreateStatic>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
<<<<<<< HEAD
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b08e      	sub	sp, #56	; 0x38
 80053d0:	af02      	add	r7, sp, #8
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
 80053d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d10a      	bne.n	80053f6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80053e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e4:	f383 8811 	msr	BASEPRI, r3
 80053e8:	f3bf 8f6f 	isb	sy
 80053ec:	f3bf 8f4f 	dsb	sy
 80053f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80053f2:	bf00      	nop
 80053f4:	e7fe      	b.n	80053f4 <xQueueGenericCreateStatic+0x28>
=======
 800534c:	b580      	push	{r7, lr}
 800534e:	b08e      	sub	sp, #56	; 0x38
 8005350:	af02      	add	r7, sp, #8
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	607a      	str	r2, [r7, #4]
 8005358:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d10a      	bne.n	8005376 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005364:	f383 8811 	msr	BASEPRI, r3
 8005368:	f3bf 8f6f 	isb	sy
 800536c:	f3bf 8f4f 	dsb	sy
 8005370:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005372:	bf00      	nop
 8005374:	e7fe      	b.n	8005374 <xQueueGenericCreateStatic+0x28>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
<<<<<<< HEAD
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d10a      	bne.n	8005412 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80053fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005400:	f383 8811 	msr	BASEPRI, r3
 8005404:	f3bf 8f6f 	isb	sy
 8005408:	f3bf 8f4f 	dsb	sy
 800540c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800540e:	bf00      	nop
 8005410:	e7fe      	b.n	8005410 <xQueueGenericCreateStatic+0x44>
=======
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d10a      	bne.n	8005392 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800537c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005380:	f383 8811 	msr	BASEPRI, r3
 8005384:	f3bf 8f6f 	isb	sy
 8005388:	f3bf 8f4f 	dsb	sy
 800538c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800538e:	bf00      	nop
 8005390:	e7fe      	b.n	8005390 <xQueueGenericCreateStatic+0x44>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
<<<<<<< HEAD
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d002      	beq.n	800541e <xQueueGenericCreateStatic+0x52>
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d001      	beq.n	8005422 <xQueueGenericCreateStatic+0x56>
 800541e:	2301      	movs	r3, #1
 8005420:	e000      	b.n	8005424 <xQueueGenericCreateStatic+0x58>
 8005422:	2300      	movs	r3, #0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d10a      	bne.n	800543e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542c:	f383 8811 	msr	BASEPRI, r3
 8005430:	f3bf 8f6f 	isb	sy
 8005434:	f3bf 8f4f 	dsb	sy
 8005438:	623b      	str	r3, [r7, #32]
}
 800543a:	bf00      	nop
 800543c:	e7fe      	b.n	800543c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d102      	bne.n	800544a <xQueueGenericCreateStatic+0x7e>
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <xQueueGenericCreateStatic+0x82>
 800544a:	2301      	movs	r3, #1
 800544c:	e000      	b.n	8005450 <xQueueGenericCreateStatic+0x84>
 800544e:	2300      	movs	r3, #0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d10a      	bne.n	800546a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005458:	f383 8811 	msr	BASEPRI, r3
 800545c:	f3bf 8f6f 	isb	sy
 8005460:	f3bf 8f4f 	dsb	sy
 8005464:	61fb      	str	r3, [r7, #28]
}
 8005466:	bf00      	nop
 8005468:	e7fe      	b.n	8005468 <xQueueGenericCreateStatic+0x9c>
=======
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d002      	beq.n	800539e <xQueueGenericCreateStatic+0x52>
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d001      	beq.n	80053a2 <xQueueGenericCreateStatic+0x56>
 800539e:	2301      	movs	r3, #1
 80053a0:	e000      	b.n	80053a4 <xQueueGenericCreateStatic+0x58>
 80053a2:	2300      	movs	r3, #0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d10a      	bne.n	80053be <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80053a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ac:	f383 8811 	msr	BASEPRI, r3
 80053b0:	f3bf 8f6f 	isb	sy
 80053b4:	f3bf 8f4f 	dsb	sy
 80053b8:	623b      	str	r3, [r7, #32]
}
 80053ba:	bf00      	nop
 80053bc:	e7fe      	b.n	80053bc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d102      	bne.n	80053ca <xQueueGenericCreateStatic+0x7e>
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d101      	bne.n	80053ce <xQueueGenericCreateStatic+0x82>
 80053ca:	2301      	movs	r3, #1
 80053cc:	e000      	b.n	80053d0 <xQueueGenericCreateStatic+0x84>
 80053ce:	2300      	movs	r3, #0
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d10a      	bne.n	80053ea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80053d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d8:	f383 8811 	msr	BASEPRI, r3
 80053dc:	f3bf 8f6f 	isb	sy
 80053e0:	f3bf 8f4f 	dsb	sy
 80053e4:	61fb      	str	r3, [r7, #28]
}
 80053e6:	bf00      	nop
 80053e8:	e7fe      	b.n	80053e8 <xQueueGenericCreateStatic+0x9c>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
<<<<<<< HEAD
 800546a:	2350      	movs	r3, #80	; 0x50
 800546c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	2b50      	cmp	r3, #80	; 0x50
 8005472:	d00a      	beq.n	800548a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005478:	f383 8811 	msr	BASEPRI, r3
 800547c:	f3bf 8f6f 	isb	sy
 8005480:	f3bf 8f4f 	dsb	sy
 8005484:	61bb      	str	r3, [r7, #24]
}
 8005486:	bf00      	nop
 8005488:	e7fe      	b.n	8005488 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800548a:	697b      	ldr	r3, [r7, #20]
=======
 80053ea:	2350      	movs	r3, #80	; 0x50
 80053ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	2b50      	cmp	r3, #80	; 0x50
 80053f2:	d00a      	beq.n	800540a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80053f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f8:	f383 8811 	msr	BASEPRI, r3
 80053fc:	f3bf 8f6f 	isb	sy
 8005400:	f3bf 8f4f 	dsb	sy
 8005404:	61bb      	str	r3, [r7, #24]
}
 8005406:	bf00      	nop
 8005408:	e7fe      	b.n	8005408 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800540a:	697b      	ldr	r3, [r7, #20]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
<<<<<<< HEAD
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00d      	beq.n	80054b2 <xQueueGenericCreateStatic+0xe6>
=======
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005412:	2b00      	cmp	r3, #0
 8005414:	d00d      	beq.n	8005432 <xQueueGenericCreateStatic+0xe6>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
<<<<<<< HEAD
 8005496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005498:	2201      	movs	r2, #1
 800549a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
=======
 8005416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005418:	2201      	movs	r2, #1
 800541a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
<<<<<<< HEAD
 800549e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80054a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a4:	9300      	str	r3, [sp, #0]
 80054a6:	4613      	mov	r3, r2
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	68b9      	ldr	r1, [r7, #8]
 80054ac:	68f8      	ldr	r0, [r7, #12]
 80054ae:	f000 f805 	bl	80054bc <prvInitialiseNewQueue>
=======
 800541e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005424:	9300      	str	r3, [sp, #0]
 8005426:	4613      	mov	r3, r2
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	68b9      	ldr	r1, [r7, #8]
 800542c:	68f8      	ldr	r0, [r7, #12]
 800542e:	f000 f805 	bl	800543c <prvInitialiseNewQueue>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
<<<<<<< HEAD
 80054b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3730      	adds	r7, #48	; 0x30
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <prvInitialiseNewQueue>:
=======
 8005432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005434:	4618      	mov	r0, r3
 8005436:	3730      	adds	r7, #48	; 0x30
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <prvInitialiseNewQueue>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
<<<<<<< HEAD
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	607a      	str	r2, [r7, #4]
 80054c8:	70fb      	strb	r3, [r7, #3]
=======
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
 8005448:	70fb      	strb	r3, [r7, #3]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
<<<<<<< HEAD
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d103      	bne.n	80054d8 <prvInitialiseNewQueue+0x1c>
=======
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d103      	bne.n	8005458 <prvInitialiseNewQueue+0x1c>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
<<<<<<< HEAD
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	69ba      	ldr	r2, [r7, #24]
 80054d4:	601a      	str	r2, [r3, #0]
 80054d6:	e002      	b.n	80054de <prvInitialiseNewQueue+0x22>
=======
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	69ba      	ldr	r2, [r7, #24]
 8005454:	601a      	str	r2, [r3, #0]
 8005456:	e002      	b.n	800545e <prvInitialiseNewQueue+0x22>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
<<<<<<< HEAD
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	601a      	str	r2, [r3, #0]
=======
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	601a      	str	r2, [r3, #0]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
<<<<<<< HEAD
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	68fa      	ldr	r2, [r7, #12]
 80054e2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	68ba      	ldr	r2, [r7, #8]
 80054e8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80054ea:	2101      	movs	r1, #1
 80054ec:	69b8      	ldr	r0, [r7, #24]
 80054ee:	f7ff ff05 	bl	80052fc <xQueueGenericReset>
=======
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800546a:	2101      	movs	r1, #1
 800546c:	69b8      	ldr	r0, [r7, #24]
 800546e:	f7ff ff05 	bl	800527c <xQueueGenericReset>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
<<<<<<< HEAD
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	78fa      	ldrb	r2, [r7, #3]
 80054f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
=======
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	78fa      	ldrb	r2, [r7, #3]
 8005476:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
<<<<<<< HEAD
 80054fa:	bf00      	nop
 80054fc:	3710      	adds	r7, #16
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
	...

08005504 <xQueueGenericSend>:
=======
 800547a:	bf00      	nop
 800547c:	3710      	adds	r7, #16
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
	...

08005484 <xQueueGenericSend>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
<<<<<<< HEAD
 8005504:	b580      	push	{r7, lr}
 8005506:	b08e      	sub	sp, #56	; 0x38
 8005508:	af00      	add	r7, sp, #0
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	607a      	str	r2, [r7, #4]
 8005510:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005512:	2300      	movs	r3, #0
 8005514:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800551a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551c:	2b00      	cmp	r3, #0
 800551e:	d10a      	bne.n	8005536 <xQueueGenericSend+0x32>
	__asm volatile
 8005520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005524:	f383 8811 	msr	BASEPRI, r3
 8005528:	f3bf 8f6f 	isb	sy
 800552c:	f3bf 8f4f 	dsb	sy
 8005530:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005532:	bf00      	nop
 8005534:	e7fe      	b.n	8005534 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d103      	bne.n	8005544 <xQueueGenericSend+0x40>
 800553c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800553e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005540:	2b00      	cmp	r3, #0
 8005542:	d101      	bne.n	8005548 <xQueueGenericSend+0x44>
 8005544:	2301      	movs	r3, #1
 8005546:	e000      	b.n	800554a <xQueueGenericSend+0x46>
 8005548:	2300      	movs	r3, #0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d10a      	bne.n	8005564 <xQueueGenericSend+0x60>
	__asm volatile
 800554e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005552:	f383 8811 	msr	BASEPRI, r3
 8005556:	f3bf 8f6f 	isb	sy
 800555a:	f3bf 8f4f 	dsb	sy
 800555e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005560:	bf00      	nop
 8005562:	e7fe      	b.n	8005562 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	2b02      	cmp	r3, #2
 8005568:	d103      	bne.n	8005572 <xQueueGenericSend+0x6e>
 800556a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800556e:	2b01      	cmp	r3, #1
 8005570:	d101      	bne.n	8005576 <xQueueGenericSend+0x72>
 8005572:	2301      	movs	r3, #1
 8005574:	e000      	b.n	8005578 <xQueueGenericSend+0x74>
 8005576:	2300      	movs	r3, #0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d10a      	bne.n	8005592 <xQueueGenericSend+0x8e>
	__asm volatile
 800557c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005580:	f383 8811 	msr	BASEPRI, r3
 8005584:	f3bf 8f6f 	isb	sy
 8005588:	f3bf 8f4f 	dsb	sy
 800558c:	623b      	str	r3, [r7, #32]
}
 800558e:	bf00      	nop
 8005590:	e7fe      	b.n	8005590 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005592:	f001 f9e7 	bl	8006964 <xTaskGetSchedulerState>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d102      	bne.n	80055a2 <xQueueGenericSend+0x9e>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d101      	bne.n	80055a6 <xQueueGenericSend+0xa2>
 80055a2:	2301      	movs	r3, #1
 80055a4:	e000      	b.n	80055a8 <xQueueGenericSend+0xa4>
 80055a6:	2300      	movs	r3, #0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d10a      	bne.n	80055c2 <xQueueGenericSend+0xbe>
	__asm volatile
 80055ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b0:	f383 8811 	msr	BASEPRI, r3
 80055b4:	f3bf 8f6f 	isb	sy
 80055b8:	f3bf 8f4f 	dsb	sy
 80055bc:	61fb      	str	r3, [r7, #28]
}
 80055be:	bf00      	nop
 80055c0:	e7fe      	b.n	80055c0 <xQueueGenericSend+0xbc>
=======
 8005484:	b580      	push	{r7, lr}
 8005486:	b08e      	sub	sp, #56	; 0x38
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	607a      	str	r2, [r7, #4]
 8005490:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005492:	2300      	movs	r3, #0
 8005494:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800549a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549c:	2b00      	cmp	r3, #0
 800549e:	d10a      	bne.n	80054b6 <xQueueGenericSend+0x32>
	__asm volatile
 80054a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a4:	f383 8811 	msr	BASEPRI, r3
 80054a8:	f3bf 8f6f 	isb	sy
 80054ac:	f3bf 8f4f 	dsb	sy
 80054b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80054b2:	bf00      	nop
 80054b4:	e7fe      	b.n	80054b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d103      	bne.n	80054c4 <xQueueGenericSend+0x40>
 80054bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d101      	bne.n	80054c8 <xQueueGenericSend+0x44>
 80054c4:	2301      	movs	r3, #1
 80054c6:	e000      	b.n	80054ca <xQueueGenericSend+0x46>
 80054c8:	2300      	movs	r3, #0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d10a      	bne.n	80054e4 <xQueueGenericSend+0x60>
	__asm volatile
 80054ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d2:	f383 8811 	msr	BASEPRI, r3
 80054d6:	f3bf 8f6f 	isb	sy
 80054da:	f3bf 8f4f 	dsb	sy
 80054de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80054e0:	bf00      	nop
 80054e2:	e7fe      	b.n	80054e2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d103      	bne.n	80054f2 <xQueueGenericSend+0x6e>
 80054ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d101      	bne.n	80054f6 <xQueueGenericSend+0x72>
 80054f2:	2301      	movs	r3, #1
 80054f4:	e000      	b.n	80054f8 <xQueueGenericSend+0x74>
 80054f6:	2300      	movs	r3, #0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10a      	bne.n	8005512 <xQueueGenericSend+0x8e>
	__asm volatile
 80054fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005500:	f383 8811 	msr	BASEPRI, r3
 8005504:	f3bf 8f6f 	isb	sy
 8005508:	f3bf 8f4f 	dsb	sy
 800550c:	623b      	str	r3, [r7, #32]
}
 800550e:	bf00      	nop
 8005510:	e7fe      	b.n	8005510 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005512:	f001 f9e7 	bl	80068e4 <xTaskGetSchedulerState>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d102      	bne.n	8005522 <xQueueGenericSend+0x9e>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d101      	bne.n	8005526 <xQueueGenericSend+0xa2>
 8005522:	2301      	movs	r3, #1
 8005524:	e000      	b.n	8005528 <xQueueGenericSend+0xa4>
 8005526:	2300      	movs	r3, #0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d10a      	bne.n	8005542 <xQueueGenericSend+0xbe>
	__asm volatile
 800552c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005530:	f383 8811 	msr	BASEPRI, r3
 8005534:	f3bf 8f6f 	isb	sy
 8005538:	f3bf 8f4f 	dsb	sy
 800553c:	61fb      	str	r3, [r7, #28]
}
 800553e:	bf00      	nop
 8005540:	e7fe      	b.n	8005540 <xQueueGenericSend+0xbc>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
<<<<<<< HEAD
 80055c2:	f001 ff27 	bl	8007414 <vPortEnterCritical>
=======
 8005542:	f001 ff27 	bl	8007394 <vPortEnterCritical>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
<<<<<<< HEAD
 80055c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d302      	bcc.n	80055d8 <xQueueGenericSend+0xd4>
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d129      	bne.n	800562c <xQueueGenericSend+0x128>
=======
 8005546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005548:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800554a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800554e:	429a      	cmp	r2, r3
 8005550:	d302      	bcc.n	8005558 <xQueueGenericSend+0xd4>
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	2b02      	cmp	r3, #2
 8005556:	d129      	bne.n	80055ac <xQueueGenericSend+0x128>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
<<<<<<< HEAD
 80055d8:	683a      	ldr	r2, [r7, #0]
 80055da:	68b9      	ldr	r1, [r7, #8]
 80055dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055de:	f000 fa0b 	bl	80059f8 <prvCopyDataToQueue>
 80055e2:	62f8      	str	r0, [r7, #44]	; 0x2c
=======
 8005558:	683a      	ldr	r2, [r7, #0]
 800555a:	68b9      	ldr	r1, [r7, #8]
 800555c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800555e:	f000 fa0b 	bl	8005978 <prvCopyDataToQueue>
 8005562:	62f8      	str	r0, [r7, #44]	; 0x2c
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< HEAD
 80055e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d010      	beq.n	800560e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ee:	3324      	adds	r3, #36	; 0x24
 80055f0:	4618      	mov	r0, r3
 80055f2:	f000 fff5 	bl	80065e0 <xTaskRemoveFromEventList>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d013      	beq.n	8005624 <xQueueGenericSend+0x120>
=======
 8005564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005568:	2b00      	cmp	r3, #0
 800556a:	d010      	beq.n	800558e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800556c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556e:	3324      	adds	r3, #36	; 0x24
 8005570:	4618      	mov	r0, r3
 8005572:	f000 fff5 	bl	8006560 <xTaskRemoveFromEventList>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d013      	beq.n	80055a4 <xQueueGenericSend+0x120>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
<<<<<<< HEAD
 80055fc:	4b3f      	ldr	r3, [pc, #252]	; (80056fc <xQueueGenericSend+0x1f8>)
 80055fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005602:	601a      	str	r2, [r3, #0]
 8005604:	f3bf 8f4f 	dsb	sy
 8005608:	f3bf 8f6f 	isb	sy
 800560c:	e00a      	b.n	8005624 <xQueueGenericSend+0x120>
=======
 800557c:	4b3f      	ldr	r3, [pc, #252]	; (800567c <xQueueGenericSend+0x1f8>)
 800557e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005582:	601a      	str	r2, [r3, #0]
 8005584:	f3bf 8f4f 	dsb	sy
 8005588:	f3bf 8f6f 	isb	sy
 800558c:	e00a      	b.n	80055a4 <xQueueGenericSend+0x120>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
<<<<<<< HEAD
 800560e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005610:	2b00      	cmp	r3, #0
 8005612:	d007      	beq.n	8005624 <xQueueGenericSend+0x120>
=======
 800558e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005590:	2b00      	cmp	r3, #0
 8005592:	d007      	beq.n	80055a4 <xQueueGenericSend+0x120>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
<<<<<<< HEAD
 8005614:	4b39      	ldr	r3, [pc, #228]	; (80056fc <xQueueGenericSend+0x1f8>)
 8005616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800561a:	601a      	str	r2, [r3, #0]
 800561c:	f3bf 8f4f 	dsb	sy
 8005620:	f3bf 8f6f 	isb	sy
=======
 8005594:	4b39      	ldr	r3, [pc, #228]	; (800567c <xQueueGenericSend+0x1f8>)
 8005596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800559a:	601a      	str	r2, [r3, #0]
 800559c:	f3bf 8f4f 	dsb	sy
 80055a0:	f3bf 8f6f 	isb	sy
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
<<<<<<< HEAD
 8005624:	f001 ff26 	bl	8007474 <vPortExitCritical>
				return pdPASS;
 8005628:	2301      	movs	r3, #1
 800562a:	e063      	b.n	80056f4 <xQueueGenericSend+0x1f0>
=======
 80055a4:	f001 ff26 	bl	80073f4 <vPortExitCritical>
				return pdPASS;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e063      	b.n	8005674 <xQueueGenericSend+0x1f0>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
<<<<<<< HEAD
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d103      	bne.n	800563a <xQueueGenericSend+0x136>
=======
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d103      	bne.n	80055ba <xQueueGenericSend+0x136>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
<<<<<<< HEAD
 8005632:	f001 ff1f 	bl	8007474 <vPortExitCritical>
=======
 80055b2:	f001 ff1f 	bl	80073f4 <vPortExitCritical>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
<<<<<<< HEAD
 8005636:	2300      	movs	r3, #0
 8005638:	e05c      	b.n	80056f4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800563a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800563c:	2b00      	cmp	r3, #0
 800563e:	d106      	bne.n	800564e <xQueueGenericSend+0x14a>
=======
 80055b6:	2300      	movs	r3, #0
 80055b8:	e05c      	b.n	8005674 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80055ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d106      	bne.n	80055ce <xQueueGenericSend+0x14a>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
<<<<<<< HEAD
 8005640:	f107 0314 	add.w	r3, r7, #20
 8005644:	4618      	mov	r0, r3
 8005646:	f001 f82f 	bl	80066a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800564a:	2301      	movs	r3, #1
 800564c:	637b      	str	r3, [r7, #52]	; 0x34
=======
 80055c0:	f107 0314 	add.w	r3, r7, #20
 80055c4:	4618      	mov	r0, r3
 80055c6:	f001 f82f 	bl	8006628 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055ca:	2301      	movs	r3, #1
 80055cc:	637b      	str	r3, [r7, #52]	; 0x34
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
<<<<<<< HEAD
 800564e:	f001 ff11 	bl	8007474 <vPortExitCritical>
=======
 80055ce:	f001 ff11 	bl	80073f4 <vPortExitCritical>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
<<<<<<< HEAD
 8005652:	f000 fd9b 	bl	800618c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005656:	f001 fedd 	bl	8007414 <vPortEnterCritical>
 800565a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005660:	b25b      	sxtb	r3, r3
 8005662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005666:	d103      	bne.n	8005670 <xQueueGenericSend+0x16c>
 8005668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566a:	2200      	movs	r2, #0
 800566c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005672:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005676:	b25b      	sxtb	r3, r3
 8005678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800567c:	d103      	bne.n	8005686 <xQueueGenericSend+0x182>
 800567e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005680:	2200      	movs	r2, #0
 8005682:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005686:	f001 fef5 	bl	8007474 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800568a:	1d3a      	adds	r2, r7, #4
 800568c:	f107 0314 	add.w	r3, r7, #20
 8005690:	4611      	mov	r1, r2
 8005692:	4618      	mov	r0, r3
 8005694:	f001 f81e 	bl	80066d4 <xTaskCheckForTimeOut>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d124      	bne.n	80056e8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800569e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056a0:	f000 faa2 	bl	8005be8 <prvIsQueueFull>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d018      	beq.n	80056dc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80056aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ac:	3310      	adds	r3, #16
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	4611      	mov	r1, r2
 80056b2:	4618      	mov	r0, r3
 80056b4:	f000 ff44 	bl	8006540 <vTaskPlaceOnEventList>
=======
 80055d2:	f000 fd9b 	bl	800610c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80055d6:	f001 fedd 	bl	8007394 <vPortEnterCritical>
 80055da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055e0:	b25b      	sxtb	r3, r3
 80055e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e6:	d103      	bne.n	80055f0 <xQueueGenericSend+0x16c>
 80055e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055f6:	b25b      	sxtb	r3, r3
 80055f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055fc:	d103      	bne.n	8005606 <xQueueGenericSend+0x182>
 80055fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005600:	2200      	movs	r2, #0
 8005602:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005606:	f001 fef5 	bl	80073f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800560a:	1d3a      	adds	r2, r7, #4
 800560c:	f107 0314 	add.w	r3, r7, #20
 8005610:	4611      	mov	r1, r2
 8005612:	4618      	mov	r0, r3
 8005614:	f001 f81e 	bl	8006654 <xTaskCheckForTimeOut>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d124      	bne.n	8005668 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800561e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005620:	f000 faa2 	bl	8005b68 <prvIsQueueFull>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d018      	beq.n	800565c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800562a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562c:	3310      	adds	r3, #16
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	4611      	mov	r1, r2
 8005632:	4618      	mov	r0, r3
 8005634:	f000 ff44 	bl	80064c0 <vTaskPlaceOnEventList>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 80056b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056ba:	f000 fa2d 	bl	8005b18 <prvUnlockQueue>
=======
 8005638:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800563a:	f000 fa2d 	bl	8005a98 <prvUnlockQueue>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
<<<<<<< HEAD
 80056be:	f000 fd73 	bl	80061a8 <xTaskResumeAll>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	f47f af7c 	bne.w	80055c2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80056ca:	4b0c      	ldr	r3, [pc, #48]	; (80056fc <xQueueGenericSend+0x1f8>)
 80056cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056d0:	601a      	str	r2, [r3, #0]
 80056d2:	f3bf 8f4f 	dsb	sy
 80056d6:	f3bf 8f6f 	isb	sy
 80056da:	e772      	b.n	80055c2 <xQueueGenericSend+0xbe>
=======
 800563e:	f000 fd73 	bl	8006128 <xTaskResumeAll>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	f47f af7c 	bne.w	8005542 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800564a:	4b0c      	ldr	r3, [pc, #48]	; (800567c <xQueueGenericSend+0x1f8>)
 800564c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005650:	601a      	str	r2, [r3, #0]
 8005652:	f3bf 8f4f 	dsb	sy
 8005656:	f3bf 8f6f 	isb	sy
 800565a:	e772      	b.n	8005542 <xQueueGenericSend+0xbe>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 80056dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056de:	f000 fa1b 	bl	8005b18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80056e2:	f000 fd61 	bl	80061a8 <xTaskResumeAll>
 80056e6:	e76c      	b.n	80055c2 <xQueueGenericSend+0xbe>
=======
 800565c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800565e:	f000 fa1b 	bl	8005a98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005662:	f000 fd61 	bl	8006128 <xTaskResumeAll>
 8005666:	e76c      	b.n	8005542 <xQueueGenericSend+0xbe>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 80056e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056ea:	f000 fa15 	bl	8005b18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80056ee:	f000 fd5b 	bl	80061a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80056f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3738      	adds	r7, #56	; 0x38
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	e000ed04 	.word	0xe000ed04

08005700 <xQueueGenericSendFromISR>:
=======
 8005668:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800566a:	f000 fa15 	bl	8005a98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800566e:	f000 fd5b 	bl	8006128 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005672:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005674:	4618      	mov	r0, r3
 8005676:	3738      	adds	r7, #56	; 0x38
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	e000ed04 	.word	0xe000ed04

08005680 <xQueueGenericSendFromISR>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
<<<<<<< HEAD
 8005700:	b580      	push	{r7, lr}
 8005702:	b090      	sub	sp, #64	; 0x40
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
 800570c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005714:	2b00      	cmp	r3, #0
 8005716:	d10a      	bne.n	800572e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571c:	f383 8811 	msr	BASEPRI, r3
 8005720:	f3bf 8f6f 	isb	sy
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800572a:	bf00      	nop
 800572c:	e7fe      	b.n	800572c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d103      	bne.n	800573c <xQueueGenericSendFromISR+0x3c>
 8005734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005738:	2b00      	cmp	r3, #0
 800573a:	d101      	bne.n	8005740 <xQueueGenericSendFromISR+0x40>
 800573c:	2301      	movs	r3, #1
 800573e:	e000      	b.n	8005742 <xQueueGenericSendFromISR+0x42>
 8005740:	2300      	movs	r3, #0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d10a      	bne.n	800575c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574a:	f383 8811 	msr	BASEPRI, r3
 800574e:	f3bf 8f6f 	isb	sy
 8005752:	f3bf 8f4f 	dsb	sy
 8005756:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005758:	bf00      	nop
 800575a:	e7fe      	b.n	800575a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	2b02      	cmp	r3, #2
 8005760:	d103      	bne.n	800576a <xQueueGenericSendFromISR+0x6a>
 8005762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005766:	2b01      	cmp	r3, #1
 8005768:	d101      	bne.n	800576e <xQueueGenericSendFromISR+0x6e>
 800576a:	2301      	movs	r3, #1
 800576c:	e000      	b.n	8005770 <xQueueGenericSendFromISR+0x70>
 800576e:	2300      	movs	r3, #0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d10a      	bne.n	800578a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005778:	f383 8811 	msr	BASEPRI, r3
 800577c:	f3bf 8f6f 	isb	sy
 8005780:	f3bf 8f4f 	dsb	sy
 8005784:	623b      	str	r3, [r7, #32]
}
 8005786:	bf00      	nop
 8005788:	e7fe      	b.n	8005788 <xQueueGenericSendFromISR+0x88>
=======
 8005680:	b580      	push	{r7, lr}
 8005682:	b090      	sub	sp, #64	; 0x40
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
 800568c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005694:	2b00      	cmp	r3, #0
 8005696:	d10a      	bne.n	80056ae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569c:	f383 8811 	msr	BASEPRI, r3
 80056a0:	f3bf 8f6f 	isb	sy
 80056a4:	f3bf 8f4f 	dsb	sy
 80056a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80056aa:	bf00      	nop
 80056ac:	e7fe      	b.n	80056ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d103      	bne.n	80056bc <xQueueGenericSendFromISR+0x3c>
 80056b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d101      	bne.n	80056c0 <xQueueGenericSendFromISR+0x40>
 80056bc:	2301      	movs	r3, #1
 80056be:	e000      	b.n	80056c2 <xQueueGenericSendFromISR+0x42>
 80056c0:	2300      	movs	r3, #0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d10a      	bne.n	80056dc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80056c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ca:	f383 8811 	msr	BASEPRI, r3
 80056ce:	f3bf 8f6f 	isb	sy
 80056d2:	f3bf 8f4f 	dsb	sy
 80056d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80056d8:	bf00      	nop
 80056da:	e7fe      	b.n	80056da <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d103      	bne.n	80056ea <xQueueGenericSendFromISR+0x6a>
 80056e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d101      	bne.n	80056ee <xQueueGenericSendFromISR+0x6e>
 80056ea:	2301      	movs	r3, #1
 80056ec:	e000      	b.n	80056f0 <xQueueGenericSendFromISR+0x70>
 80056ee:	2300      	movs	r3, #0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d10a      	bne.n	800570a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80056f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f8:	f383 8811 	msr	BASEPRI, r3
 80056fc:	f3bf 8f6f 	isb	sy
 8005700:	f3bf 8f4f 	dsb	sy
 8005704:	623b      	str	r3, [r7, #32]
}
 8005706:	bf00      	nop
 8005708:	e7fe      	b.n	8005708 <xQueueGenericSendFromISR+0x88>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
<<<<<<< HEAD
 800578a:	f001 ff25 	bl	80075d8 <vPortValidateInterruptPriority>
=======
 800570a:	f001 ff25 	bl	8007558 <vPortValidateInterruptPriority>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
<<<<<<< HEAD
 800578e:	f3ef 8211 	mrs	r2, BASEPRI
 8005792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005796:	f383 8811 	msr	BASEPRI, r3
 800579a:	f3bf 8f6f 	isb	sy
 800579e:	f3bf 8f4f 	dsb	sy
 80057a2:	61fa      	str	r2, [r7, #28]
 80057a4:	61bb      	str	r3, [r7, #24]
=======
 800570e:	f3ef 8211 	mrs	r2, BASEPRI
 8005712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005716:	f383 8811 	msr	BASEPRI, r3
 800571a:	f3bf 8f6f 	isb	sy
 800571e:	f3bf 8f4f 	dsb	sy
 8005722:	61fa      	str	r2, [r7, #28]
 8005724:	61bb      	str	r3, [r7, #24]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
<<<<<<< HEAD
 80057a6:	69fb      	ldr	r3, [r7, #28]
=======
 8005726:	69fb      	ldr	r3, [r7, #28]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
<<<<<<< HEAD
 80057a8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d302      	bcc.n	80057bc <xQueueGenericSendFromISR+0xbc>
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d12f      	bne.n	800581c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80057bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ca:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 8005728:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800572a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800572c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800572e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005732:	429a      	cmp	r2, r3
 8005734:	d302      	bcc.n	800573c <xQueueGenericSendFromISR+0xbc>
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	2b02      	cmp	r3, #2
 800573a:	d12f      	bne.n	800579c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800573c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800573e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800574a:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
<<<<<<< HEAD
 80057cc:	683a      	ldr	r2, [r7, #0]
 80057ce:	68b9      	ldr	r1, [r7, #8]
 80057d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80057d2:	f000 f911 	bl	80059f8 <prvCopyDataToQueue>
=======
 800574c:	683a      	ldr	r2, [r7, #0]
 800574e:	68b9      	ldr	r1, [r7, #8]
 8005750:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005752:	f000 f911 	bl	8005978 <prvCopyDataToQueue>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
<<<<<<< HEAD
 80057d6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80057da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057de:	d112      	bne.n	8005806 <xQueueGenericSendFromISR+0x106>
=======
 8005756:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800575a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800575e:	d112      	bne.n	8005786 <xQueueGenericSendFromISR+0x106>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< HEAD
 80057e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d016      	beq.n	8005816 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ea:	3324      	adds	r3, #36	; 0x24
 80057ec:	4618      	mov	r0, r3
 80057ee:	f000 fef7 	bl	80065e0 <xTaskRemoveFromEventList>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d00e      	beq.n	8005816 <xQueueGenericSendFromISR+0x116>
=======
 8005760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005764:	2b00      	cmp	r3, #0
 8005766:	d016      	beq.n	8005796 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800576a:	3324      	adds	r3, #36	; 0x24
 800576c:	4618      	mov	r0, r3
 800576e:	f000 fef7 	bl	8006560 <xTaskRemoveFromEventList>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00e      	beq.n	8005796 <xQueueGenericSendFromISR+0x116>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
<<<<<<< HEAD
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00b      	beq.n	8005816 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2201      	movs	r2, #1
 8005802:	601a      	str	r2, [r3, #0]
 8005804:	e007      	b.n	8005816 <xQueueGenericSendFromISR+0x116>
=======
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00b      	beq.n	8005796 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2201      	movs	r2, #1
 8005782:	601a      	str	r2, [r3, #0]
 8005784:	e007      	b.n	8005796 <xQueueGenericSendFromISR+0x116>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
<<<<<<< HEAD
 8005806:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800580a:	3301      	adds	r3, #1
 800580c:	b2db      	uxtb	r3, r3
 800580e:	b25a      	sxtb	r2, r3
 8005810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005812:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005816:	2301      	movs	r3, #1
 8005818:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800581a:	e001      	b.n	8005820 <xQueueGenericSendFromISR+0x120>
=======
 8005786:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800578a:	3301      	adds	r3, #1
 800578c:	b2db      	uxtb	r3, r3
 800578e:	b25a      	sxtb	r2, r3
 8005790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005792:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005796:	2301      	movs	r3, #1
 8005798:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800579a:	e001      	b.n	80057a0 <xQueueGenericSendFromISR+0x120>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
<<<<<<< HEAD
 800581c:	2300      	movs	r3, #0
 800581e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005822:	617b      	str	r3, [r7, #20]
=======
 800579c:	2300      	movs	r3, #0
 800579e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a2:	617b      	str	r3, [r7, #20]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
<<<<<<< HEAD
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	f383 8811 	msr	BASEPRI, r3
=======
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	f383 8811 	msr	BASEPRI, r3
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
<<<<<<< HEAD
 800582a:	bf00      	nop
=======
 80057aa:	bf00      	nop
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
<<<<<<< HEAD
 800582c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800582e:	4618      	mov	r0, r3
 8005830:	3740      	adds	r7, #64	; 0x40
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
	...

08005838 <xQueueReceive>:
=======
 80057ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3740      	adds	r7, #64	; 0x40
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
	...

080057b8 <xQueueReceive>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
<<<<<<< HEAD
 8005838:	b580      	push	{r7, lr}
 800583a:	b08c      	sub	sp, #48	; 0x30
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005844:	2300      	movs	r3, #0
 8005846:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800584c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584e:	2b00      	cmp	r3, #0
 8005850:	d10a      	bne.n	8005868 <xQueueReceive+0x30>
	__asm volatile
 8005852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005856:	f383 8811 	msr	BASEPRI, r3
 800585a:	f3bf 8f6f 	isb	sy
 800585e:	f3bf 8f4f 	dsb	sy
 8005862:	623b      	str	r3, [r7, #32]
}
 8005864:	bf00      	nop
 8005866:	e7fe      	b.n	8005866 <xQueueReceive+0x2e>
=======
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b08c      	sub	sp, #48	; 0x30
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80057c4:	2300      	movs	r3, #0
 80057c6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80057cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d10a      	bne.n	80057e8 <xQueueReceive+0x30>
	__asm volatile
 80057d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d6:	f383 8811 	msr	BASEPRI, r3
 80057da:	f3bf 8f6f 	isb	sy
 80057de:	f3bf 8f4f 	dsb	sy
 80057e2:	623b      	str	r3, [r7, #32]
}
 80057e4:	bf00      	nop
 80057e6:	e7fe      	b.n	80057e6 <xQueueReceive+0x2e>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
<<<<<<< HEAD
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d103      	bne.n	8005876 <xQueueReceive+0x3e>
 800586e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005872:	2b00      	cmp	r3, #0
 8005874:	d101      	bne.n	800587a <xQueueReceive+0x42>
 8005876:	2301      	movs	r3, #1
 8005878:	e000      	b.n	800587c <xQueueReceive+0x44>
 800587a:	2300      	movs	r3, #0
 800587c:	2b00      	cmp	r3, #0
 800587e:	d10a      	bne.n	8005896 <xQueueReceive+0x5e>
	__asm volatile
 8005880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005884:	f383 8811 	msr	BASEPRI, r3
 8005888:	f3bf 8f6f 	isb	sy
 800588c:	f3bf 8f4f 	dsb	sy
 8005890:	61fb      	str	r3, [r7, #28]
}
 8005892:	bf00      	nop
 8005894:	e7fe      	b.n	8005894 <xQueueReceive+0x5c>
=======
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d103      	bne.n	80057f6 <xQueueReceive+0x3e>
 80057ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d101      	bne.n	80057fa <xQueueReceive+0x42>
 80057f6:	2301      	movs	r3, #1
 80057f8:	e000      	b.n	80057fc <xQueueReceive+0x44>
 80057fa:	2300      	movs	r3, #0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d10a      	bne.n	8005816 <xQueueReceive+0x5e>
	__asm volatile
 8005800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005804:	f383 8811 	msr	BASEPRI, r3
 8005808:	f3bf 8f6f 	isb	sy
 800580c:	f3bf 8f4f 	dsb	sy
 8005810:	61fb      	str	r3, [r7, #28]
}
 8005812:	bf00      	nop
 8005814:	e7fe      	b.n	8005814 <xQueueReceive+0x5c>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
<<<<<<< HEAD
 8005896:	f001 f865 	bl	8006964 <xTaskGetSchedulerState>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d102      	bne.n	80058a6 <xQueueReceive+0x6e>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d101      	bne.n	80058aa <xQueueReceive+0x72>
 80058a6:	2301      	movs	r3, #1
 80058a8:	e000      	b.n	80058ac <xQueueReceive+0x74>
 80058aa:	2300      	movs	r3, #0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d10a      	bne.n	80058c6 <xQueueReceive+0x8e>
	__asm volatile
 80058b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b4:	f383 8811 	msr	BASEPRI, r3
 80058b8:	f3bf 8f6f 	isb	sy
 80058bc:	f3bf 8f4f 	dsb	sy
 80058c0:	61bb      	str	r3, [r7, #24]
}
 80058c2:	bf00      	nop
 80058c4:	e7fe      	b.n	80058c4 <xQueueReceive+0x8c>
=======
 8005816:	f001 f865 	bl	80068e4 <xTaskGetSchedulerState>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d102      	bne.n	8005826 <xQueueReceive+0x6e>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d101      	bne.n	800582a <xQueueReceive+0x72>
 8005826:	2301      	movs	r3, #1
 8005828:	e000      	b.n	800582c <xQueueReceive+0x74>
 800582a:	2300      	movs	r3, #0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d10a      	bne.n	8005846 <xQueueReceive+0x8e>
	__asm volatile
 8005830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005834:	f383 8811 	msr	BASEPRI, r3
 8005838:	f3bf 8f6f 	isb	sy
 800583c:	f3bf 8f4f 	dsb	sy
 8005840:	61bb      	str	r3, [r7, #24]
}
 8005842:	bf00      	nop
 8005844:	e7fe      	b.n	8005844 <xQueueReceive+0x8c>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
<<<<<<< HEAD
 80058c6:	f001 fda5 	bl	8007414 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ce:	627b      	str	r3, [r7, #36]	; 0x24
=======
 8005846:	f001 fda5 	bl	8007394 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800584a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584e:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
<<<<<<< HEAD
 80058d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d01f      	beq.n	8005916 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80058d6:	68b9      	ldr	r1, [r7, #8]
 80058d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058da:	f000 f8f7 	bl	8005acc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80058de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e0:	1e5a      	subs	r2, r3, #1
 80058e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e4:	639a      	str	r2, [r3, #56]	; 0x38
=======
 8005850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005852:	2b00      	cmp	r3, #0
 8005854:	d01f      	beq.n	8005896 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005856:	68b9      	ldr	r1, [r7, #8]
 8005858:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800585a:	f000 f8f7 	bl	8005a4c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800585e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005860:	1e5a      	subs	r2, r3, #1
 8005862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005864:	639a      	str	r2, [r3, #56]	; 0x38
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
<<<<<<< HEAD
 80058e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00f      	beq.n	800590e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f0:	3310      	adds	r3, #16
 80058f2:	4618      	mov	r0, r3
 80058f4:	f000 fe74 	bl	80065e0 <xTaskRemoveFromEventList>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d007      	beq.n	800590e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80058fe:	4b3d      	ldr	r3, [pc, #244]	; (80059f4 <xQueueReceive+0x1bc>)
 8005900:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005904:	601a      	str	r2, [r3, #0]
 8005906:	f3bf 8f4f 	dsb	sy
 800590a:	f3bf 8f6f 	isb	sy
=======
 8005866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00f      	beq.n	800588e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800586e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005870:	3310      	adds	r3, #16
 8005872:	4618      	mov	r0, r3
 8005874:	f000 fe74 	bl	8006560 <xTaskRemoveFromEventList>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d007      	beq.n	800588e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800587e:	4b3d      	ldr	r3, [pc, #244]	; (8005974 <xQueueReceive+0x1bc>)
 8005880:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005884:	601a      	str	r2, [r3, #0]
 8005886:	f3bf 8f4f 	dsb	sy
 800588a:	f3bf 8f6f 	isb	sy
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
<<<<<<< HEAD
 800590e:	f001 fdb1 	bl	8007474 <vPortExitCritical>
				return pdPASS;
 8005912:	2301      	movs	r3, #1
 8005914:	e069      	b.n	80059ea <xQueueReceive+0x1b2>
=======
 800588e:	f001 fdb1 	bl	80073f4 <vPortExitCritical>
				return pdPASS;
 8005892:	2301      	movs	r3, #1
 8005894:	e069      	b.n	800596a <xQueueReceive+0x1b2>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
<<<<<<< HEAD
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d103      	bne.n	8005924 <xQueueReceive+0xec>
=======
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d103      	bne.n	80058a4 <xQueueReceive+0xec>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
<<<<<<< HEAD
 800591c:	f001 fdaa 	bl	8007474 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005920:	2300      	movs	r3, #0
 8005922:	e062      	b.n	80059ea <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005926:	2b00      	cmp	r3, #0
 8005928:	d106      	bne.n	8005938 <xQueueReceive+0x100>
=======
 800589c:	f001 fdaa 	bl	80073f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80058a0:	2300      	movs	r3, #0
 80058a2:	e062      	b.n	800596a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80058a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d106      	bne.n	80058b8 <xQueueReceive+0x100>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
<<<<<<< HEAD
 800592a:	f107 0310 	add.w	r3, r7, #16
 800592e:	4618      	mov	r0, r3
 8005930:	f000 feba 	bl	80066a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005934:	2301      	movs	r3, #1
 8005936:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 80058aa:	f107 0310 	add.w	r3, r7, #16
 80058ae:	4618      	mov	r0, r3
 80058b0:	f000 feba 	bl	8006628 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80058b4:	2301      	movs	r3, #1
 80058b6:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
<<<<<<< HEAD
 8005938:	f001 fd9c 	bl	8007474 <vPortExitCritical>
=======
 80058b8:	f001 fd9c 	bl	80073f4 <vPortExitCritical>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
<<<<<<< HEAD
 800593c:	f000 fc26 	bl	800618c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005940:	f001 fd68 	bl	8007414 <vPortEnterCritical>
 8005944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005946:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800594a:	b25b      	sxtb	r3, r3
 800594c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005950:	d103      	bne.n	800595a <xQueueReceive+0x122>
 8005952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005954:	2200      	movs	r2, #0
 8005956:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800595a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005960:	b25b      	sxtb	r3, r3
 8005962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005966:	d103      	bne.n	8005970 <xQueueReceive+0x138>
 8005968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596a:	2200      	movs	r2, #0
 800596c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005970:	f001 fd80 	bl	8007474 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005974:	1d3a      	adds	r2, r7, #4
 8005976:	f107 0310 	add.w	r3, r7, #16
 800597a:	4611      	mov	r1, r2
 800597c:	4618      	mov	r0, r3
 800597e:	f000 fea9 	bl	80066d4 <xTaskCheckForTimeOut>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d123      	bne.n	80059d0 <xQueueReceive+0x198>
=======
 80058bc:	f000 fc26 	bl	800610c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80058c0:	f001 fd68 	bl	8007394 <vPortEnterCritical>
 80058c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058ca:	b25b      	sxtb	r3, r3
 80058cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058d0:	d103      	bne.n	80058da <xQueueReceive+0x122>
 80058d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058e0:	b25b      	sxtb	r3, r3
 80058e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e6:	d103      	bne.n	80058f0 <xQueueReceive+0x138>
 80058e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058f0:	f001 fd80 	bl	80073f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80058f4:	1d3a      	adds	r2, r7, #4
 80058f6:	f107 0310 	add.w	r3, r7, #16
 80058fa:	4611      	mov	r1, r2
 80058fc:	4618      	mov	r0, r3
 80058fe:	f000 fea9 	bl	8006654 <xTaskCheckForTimeOut>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d123      	bne.n	8005950 <xQueueReceive+0x198>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
<<<<<<< HEAD
 8005988:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800598a:	f000 f917 	bl	8005bbc <prvIsQueueEmpty>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d017      	beq.n	80059c4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005996:	3324      	adds	r3, #36	; 0x24
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	4611      	mov	r1, r2
 800599c:	4618      	mov	r0, r3
 800599e:	f000 fdcf 	bl	8006540 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80059a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059a4:	f000 f8b8 	bl	8005b18 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80059a8:	f000 fbfe 	bl	80061a8 <xTaskResumeAll>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d189      	bne.n	80058c6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80059b2:	4b10      	ldr	r3, [pc, #64]	; (80059f4 <xQueueReceive+0x1bc>)
 80059b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059b8:	601a      	str	r2, [r3, #0]
 80059ba:	f3bf 8f4f 	dsb	sy
 80059be:	f3bf 8f6f 	isb	sy
 80059c2:	e780      	b.n	80058c6 <xQueueReceive+0x8e>
=======
 8005908:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800590a:	f000 f917 	bl	8005b3c <prvIsQueueEmpty>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d017      	beq.n	8005944 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005916:	3324      	adds	r3, #36	; 0x24
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	4611      	mov	r1, r2
 800591c:	4618      	mov	r0, r3
 800591e:	f000 fdcf 	bl	80064c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005922:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005924:	f000 f8b8 	bl	8005a98 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005928:	f000 fbfe 	bl	8006128 <xTaskResumeAll>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d189      	bne.n	8005846 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005932:	4b10      	ldr	r3, [pc, #64]	; (8005974 <xQueueReceive+0x1bc>)
 8005934:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005938:	601a      	str	r2, [r3, #0]
 800593a:	f3bf 8f4f 	dsb	sy
 800593e:	f3bf 8f6f 	isb	sy
 8005942:	e780      	b.n	8005846 <xQueueReceive+0x8e>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 80059c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059c6:	f000 f8a7 	bl	8005b18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80059ca:	f000 fbed 	bl	80061a8 <xTaskResumeAll>
 80059ce:	e77a      	b.n	80058c6 <xQueueReceive+0x8e>
=======
 8005944:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005946:	f000 f8a7 	bl	8005a98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800594a:	f000 fbed 	bl	8006128 <xTaskResumeAll>
 800594e:	e77a      	b.n	8005846 <xQueueReceive+0x8e>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 80059d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059d2:	f000 f8a1 	bl	8005b18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80059d6:	f000 fbe7 	bl	80061a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80059da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059dc:	f000 f8ee 	bl	8005bbc <prvIsQueueEmpty>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	f43f af6f 	beq.w	80058c6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80059e8:	2300      	movs	r3, #0
=======
 8005950:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005952:	f000 f8a1 	bl	8005a98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005956:	f000 fbe7 	bl	8006128 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800595a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800595c:	f000 f8ee 	bl	8005b3c <prvIsQueueEmpty>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	f43f af6f 	beq.w	8005846 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005968:	2300      	movs	r3, #0
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
<<<<<<< HEAD
 80059ea:	4618      	mov	r0, r3
 80059ec:	3730      	adds	r7, #48	; 0x30
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	e000ed04 	.word	0xe000ed04

080059f8 <prvCopyDataToQueue>:
=======
 800596a:	4618      	mov	r0, r3
 800596c:	3730      	adds	r7, #48	; 0x30
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	e000ed04 	.word	0xe000ed04

08005978 <prvCopyDataToQueue>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
<<<<<<< HEAD
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b086      	sub	sp, #24
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005a04:	2300      	movs	r3, #0
 8005a06:	617b      	str	r3, [r7, #20]
=======
 8005978:	b580      	push	{r7, lr}
 800597a:	b086      	sub	sp, #24
 800597c:	af00      	add	r7, sp, #0
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005984:	2300      	movs	r3, #0
 8005986:	617b      	str	r3, [r7, #20]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
<<<<<<< HEAD
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d10d      	bne.n	8005a32 <prvCopyDataToQueue+0x3a>
=======
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005992:	2b00      	cmp	r3, #0
 8005994:	d10d      	bne.n	80059b2 <prvCopyDataToQueue+0x3a>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
<<<<<<< HEAD
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d14d      	bne.n	8005aba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	4618      	mov	r0, r3
 8005a24:	f000 ffbc 	bl	80069a0 <xTaskPriorityDisinherit>
 8005a28:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	609a      	str	r2, [r3, #8]
 8005a30:	e043      	b.n	8005aba <prvCopyDataToQueue+0xc2>
=======
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d14d      	bne.n	8005a3a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	4618      	mov	r0, r3
 80059a4:	f000 ffbc 	bl	8006920 <xTaskPriorityDisinherit>
 80059a8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	609a      	str	r2, [r3, #8]
 80059b0:	e043      	b.n	8005a3a <prvCopyDataToQueue+0xc2>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
<<<<<<< HEAD
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d119      	bne.n	8005a6c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6858      	ldr	r0, [r3, #4]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a40:	461a      	mov	r2, r3
 8005a42:	68b9      	ldr	r1, [r7, #8]
 8005a44:	f002 f876 	bl	8007b34 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	685a      	ldr	r2, [r3, #4]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a50:	441a      	add	r2, r3
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	685a      	ldr	r2, [r3, #4]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d32b      	bcc.n	8005aba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	605a      	str	r2, [r3, #4]
 8005a6a:	e026      	b.n	8005aba <prvCopyDataToQueue+0xc2>
=======
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d119      	bne.n	80059ec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6858      	ldr	r0, [r3, #4]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c0:	461a      	mov	r2, r3
 80059c2:	68b9      	ldr	r1, [r7, #8]
 80059c4:	f002 f818 	bl	80079f8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	685a      	ldr	r2, [r3, #4]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d0:	441a      	add	r2, r3
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	685a      	ldr	r2, [r3, #4]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d32b      	bcc.n	8005a3a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	605a      	str	r2, [r3, #4]
 80059ea:	e026      	b.n	8005a3a <prvCopyDataToQueue+0xc2>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
<<<<<<< HEAD
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	68d8      	ldr	r0, [r3, #12]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a74:	461a      	mov	r2, r3
 8005a76:	68b9      	ldr	r1, [r7, #8]
 8005a78:	f002 f85c 	bl	8007b34 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	68da      	ldr	r2, [r3, #12]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a84:	425b      	negs	r3, r3
 8005a86:	441a      	add	r2, r3
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	68da      	ldr	r2, [r3, #12]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d207      	bcs.n	8005aa8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	689a      	ldr	r2, [r3, #8]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa0:	425b      	negs	r3, r3
 8005aa2:	441a      	add	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	60da      	str	r2, [r3, #12]
=======
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	68d8      	ldr	r0, [r3, #12]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f4:	461a      	mov	r2, r3
 80059f6:	68b9      	ldr	r1, [r7, #8]
 80059f8:	f001 fffe 	bl	80079f8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	68da      	ldr	r2, [r3, #12]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a04:	425b      	negs	r3, r3
 8005a06:	441a      	add	r2, r3
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	68da      	ldr	r2, [r3, #12]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d207      	bcs.n	8005a28 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	689a      	ldr	r2, [r3, #8]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a20:	425b      	negs	r3, r3
 8005a22:	441a      	add	r2, r3
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	60da      	str	r2, [r3, #12]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
<<<<<<< HEAD
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d105      	bne.n	8005aba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d002      	beq.n	8005aba <prvCopyDataToQueue+0xc2>
=======
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d105      	bne.n	8005a3a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d002      	beq.n	8005a3a <prvCopyDataToQueue+0xc2>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
<<<<<<< HEAD
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	613b      	str	r3, [r7, #16]
=======
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	3b01      	subs	r3, #1
 8005a38:	613b      	str	r3, [r7, #16]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
<<<<<<< HEAD
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	1c5a      	adds	r2, r3, #1
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005ac2:	697b      	ldr	r3, [r7, #20]
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3718      	adds	r7, #24
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <prvCopyDataFromQueue>:
=======
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	1c5a      	adds	r2, r3, #1
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005a42:	697b      	ldr	r3, [r7, #20]
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3718      	adds	r7, #24
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <prvCopyDataFromQueue>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
<<<<<<< HEAD
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d018      	beq.n	8005b10 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	68da      	ldr	r2, [r3, #12]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae6:	441a      	add	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	68da      	ldr	r2, [r3, #12]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d303      	bcc.n	8005b00 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	60da      	str	r2, [r3, #12]
=======
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d018      	beq.n	8005a90 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	68da      	ldr	r2, [r3, #12]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a66:	441a      	add	r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	68da      	ldr	r2, [r3, #12]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d303      	bcc.n	8005a80 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	60da      	str	r2, [r3, #12]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
<<<<<<< HEAD
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	68d9      	ldr	r1, [r3, #12]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b08:	461a      	mov	r2, r3
 8005b0a:	6838      	ldr	r0, [r7, #0]
 8005b0c:	f002 f812 	bl	8007b34 <memcpy>
	}
}
 8005b10:	bf00      	nop
 8005b12:	3708      	adds	r7, #8
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <prvUnlockQueue>:
=======
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	68d9      	ldr	r1, [r3, #12]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a88:	461a      	mov	r2, r3
 8005a8a:	6838      	ldr	r0, [r7, #0]
 8005a8c:	f001 ffb4 	bl	80079f8 <memcpy>
	}
}
 8005a90:	bf00      	nop
 8005a92:	3708      	adds	r7, #8
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <prvUnlockQueue>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
<<<<<<< HEAD
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
=======
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
<<<<<<< HEAD
 8005b20:	f001 fc78 	bl	8007414 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b2a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b2c:	e011      	b.n	8005b52 <prvUnlockQueue+0x3a>
=======
 8005aa0:	f001 fc78 	bl	8007394 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005aaa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005aac:	e011      	b.n	8005ad2 <prvUnlockQueue+0x3a>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< HEAD
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d012      	beq.n	8005b5c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	3324      	adds	r3, #36	; 0x24
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f000 fd50 	bl	80065e0 <xTaskRemoveFromEventList>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d001      	beq.n	8005b4a <prvUnlockQueue+0x32>
=======
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d012      	beq.n	8005adc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	3324      	adds	r3, #36	; 0x24
 8005aba:	4618      	mov	r0, r3
 8005abc:	f000 fd50 	bl	8006560 <xTaskRemoveFromEventList>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d001      	beq.n	8005aca <prvUnlockQueue+0x32>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
<<<<<<< HEAD
 8005b46:	f000 fe27 	bl	8006798 <vTaskMissedYield>
=======
 8005ac6:	f000 fe27 	bl	8006718 <vTaskMissedYield>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
<<<<<<< HEAD
 8005b4a:	7bfb      	ldrb	r3, [r7, #15]
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	dce9      	bgt.n	8005b2e <prvUnlockQueue+0x16>
 8005b5a:	e000      	b.n	8005b5e <prvUnlockQueue+0x46>
					break;
 8005b5c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	22ff      	movs	r2, #255	; 0xff
 8005b62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005b66:	f001 fc85 	bl	8007474 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005b6a:	f001 fc53 	bl	8007414 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b74:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b76:	e011      	b.n	8005b9c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d012      	beq.n	8005ba6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	3310      	adds	r3, #16
 8005b84:	4618      	mov	r0, r3
 8005b86:	f000 fd2b 	bl	80065e0 <xTaskRemoveFromEventList>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d001      	beq.n	8005b94 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005b90:	f000 fe02 	bl	8006798 <vTaskMissedYield>
=======
 8005aca:	7bfb      	ldrb	r3, [r7, #15]
 8005acc:	3b01      	subs	r3, #1
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	dce9      	bgt.n	8005aae <prvUnlockQueue+0x16>
 8005ada:	e000      	b.n	8005ade <prvUnlockQueue+0x46>
					break;
 8005adc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	22ff      	movs	r2, #255	; 0xff
 8005ae2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005ae6:	f001 fc85 	bl	80073f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005aea:	f001 fc53 	bl	8007394 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005af4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005af6:	e011      	b.n	8005b1c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	691b      	ldr	r3, [r3, #16]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d012      	beq.n	8005b26 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	3310      	adds	r3, #16
 8005b04:	4618      	mov	r0, r3
 8005b06:	f000 fd2b 	bl	8006560 <xTaskRemoveFromEventList>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d001      	beq.n	8005b14 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005b10:	f000 fe02 	bl	8006718 <vTaskMissedYield>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
<<<<<<< HEAD
 8005b94:	7bbb      	ldrb	r3, [r7, #14]
 8005b96:	3b01      	subs	r3, #1
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	dce9      	bgt.n	8005b78 <prvUnlockQueue+0x60>
 8005ba4:	e000      	b.n	8005ba8 <prvUnlockQueue+0x90>
=======
 8005b14:	7bbb      	ldrb	r3, [r7, #14]
 8005b16:	3b01      	subs	r3, #1
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	dce9      	bgt.n	8005af8 <prvUnlockQueue+0x60>
 8005b24:	e000      	b.n	8005b28 <prvUnlockQueue+0x90>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
			}
			else
			{
				break;
<<<<<<< HEAD
 8005ba6:	bf00      	nop
=======
 8005b26:	bf00      	nop
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
<<<<<<< HEAD
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	22ff      	movs	r2, #255	; 0xff
 8005bac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005bb0:	f001 fc60 	bl	8007474 <vPortExitCritical>
}
 8005bb4:	bf00      	nop
 8005bb6:	3710      	adds	r7, #16
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <prvIsQueueEmpty>:
=======
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	22ff      	movs	r2, #255	; 0xff
 8005b2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005b30:	f001 fc60 	bl	80073f4 <vPortExitCritical>
}
 8005b34:	bf00      	nop
 8005b36:	3710      	adds	r7, #16
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <prvIsQueueEmpty>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
<<<<<<< HEAD
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005bc4:	f001 fc26 	bl	8007414 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d102      	bne.n	8005bd6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	60fb      	str	r3, [r7, #12]
 8005bd4:	e001      	b.n	8005bda <prvIsQueueEmpty+0x1e>
=======
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b44:	f001 fc26 	bl	8007394 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d102      	bne.n	8005b56 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005b50:	2301      	movs	r3, #1
 8005b52:	60fb      	str	r3, [r7, #12]
 8005b54:	e001      	b.n	8005b5a <prvIsQueueEmpty+0x1e>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		}
		else
		{
			xReturn = pdFALSE;
<<<<<<< HEAD
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005bda:	f001 fc4b 	bl	8007474 <vPortExitCritical>

	return xReturn;
 8005bde:	68fb      	ldr	r3, [r7, #12]
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3710      	adds	r7, #16
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <prvIsQueueFull>:
=======
 8005b56:	2300      	movs	r3, #0
 8005b58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b5a:	f001 fc4b 	bl	80073f4 <vPortExitCritical>

	return xReturn;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <prvIsQueueFull>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
<<<<<<< HEAD
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005bf0:	f001 fc10 	bl	8007414 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d102      	bne.n	8005c06 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005c00:	2301      	movs	r3, #1
 8005c02:	60fb      	str	r3, [r7, #12]
 8005c04:	e001      	b.n	8005c0a <prvIsQueueFull+0x22>
=======
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b70:	f001 fc10 	bl	8007394 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d102      	bne.n	8005b86 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005b80:	2301      	movs	r3, #1
 8005b82:	60fb      	str	r3, [r7, #12]
 8005b84:	e001      	b.n	8005b8a <prvIsQueueFull+0x22>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		}
		else
		{
			xReturn = pdFALSE;
<<<<<<< HEAD
 8005c06:	2300      	movs	r3, #0
 8005c08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c0a:	f001 fc33 	bl	8007474 <vPortExitCritical>

	return xReturn;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <vQueueAddToRegistry>:
=======
 8005b86:	2300      	movs	r3, #0
 8005b88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b8a:	f001 fc33 	bl	80073f4 <vPortExitCritical>

	return xReturn;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3710      	adds	r7, #16
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <vQueueAddToRegistry>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
<<<<<<< HEAD
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
=======
 8005b98:	b480      	push	{r7}
 8005b9a:	b085      	sub	sp, #20
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
<<<<<<< HEAD
 8005c22:	2300      	movs	r3, #0
 8005c24:	60fb      	str	r3, [r7, #12]
 8005c26:	e014      	b.n	8005c52 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005c28:	4a0f      	ldr	r2, [pc, #60]	; (8005c68 <vQueueAddToRegistry+0x50>)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d10b      	bne.n	8005c4c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005c34:	490c      	ldr	r1, [pc, #48]	; (8005c68 <vQueueAddToRegistry+0x50>)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	683a      	ldr	r2, [r7, #0]
 8005c3a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005c3e:	4a0a      	ldr	r2, [pc, #40]	; (8005c68 <vQueueAddToRegistry+0x50>)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	00db      	lsls	r3, r3, #3
 8005c44:	4413      	add	r3, r2
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005c4a:	e006      	b.n	8005c5a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	3301      	adds	r3, #1
 8005c50:	60fb      	str	r3, [r7, #12]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2b07      	cmp	r3, #7
 8005c56:	d9e7      	bls.n	8005c28 <vQueueAddToRegistry+0x10>
=======
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	60fb      	str	r3, [r7, #12]
 8005ba6:	e014      	b.n	8005bd2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005ba8:	4a0f      	ldr	r2, [pc, #60]	; (8005be8 <vQueueAddToRegistry+0x50>)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d10b      	bne.n	8005bcc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005bb4:	490c      	ldr	r1, [pc, #48]	; (8005be8 <vQueueAddToRegistry+0x50>)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	683a      	ldr	r2, [r7, #0]
 8005bba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005bbe:	4a0a      	ldr	r2, [pc, #40]	; (8005be8 <vQueueAddToRegistry+0x50>)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	00db      	lsls	r3, r3, #3
 8005bc4:	4413      	add	r3, r2
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005bca:	e006      	b.n	8005bda <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	3301      	adds	r3, #1
 8005bd0:	60fb      	str	r3, [r7, #12]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2b07      	cmp	r3, #7
 8005bd6:	d9e7      	bls.n	8005ba8 <vQueueAddToRegistry+0x10>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
<<<<<<< HEAD
 8005c58:	bf00      	nop
 8005c5a:	bf00      	nop
 8005c5c:	3714      	adds	r7, #20
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr
 8005c66:	bf00      	nop
 8005c68:	20000eb4 	.word	0x20000eb4

08005c6c <vQueueWaitForMessageRestricted>:
=======
 8005bd8:	bf00      	nop
 8005bda:	bf00      	nop
 8005bdc:	3714      	adds	r7, #20
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop
 8005be8:	20000ef0 	.word	0x20000ef0

08005bec <vQueueWaitForMessageRestricted>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
<<<<<<< HEAD
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b086      	sub	sp, #24
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	617b      	str	r3, [r7, #20]
=======
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b086      	sub	sp, #24
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	617b      	str	r3, [r7, #20]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
<<<<<<< HEAD
 8005c7c:	f001 fbca 	bl	8007414 <vPortEnterCritical>
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c86:	b25b      	sxtb	r3, r3
 8005c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c8c:	d103      	bne.n	8005c96 <vQueueWaitForMessageRestricted+0x2a>
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c9c:	b25b      	sxtb	r3, r3
 8005c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca2:	d103      	bne.n	8005cac <vQueueWaitForMessageRestricted+0x40>
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cac:	f001 fbe2 	bl	8007474 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d106      	bne.n	8005cc6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	3324      	adds	r3, #36	; 0x24
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	68b9      	ldr	r1, [r7, #8]
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f000 fc61 	bl	8006588 <vTaskPlaceOnEventListRestricted>
=======
 8005bfc:	f001 fbca 	bl	8007394 <vPortEnterCritical>
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c06:	b25b      	sxtb	r3, r3
 8005c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0c:	d103      	bne.n	8005c16 <vQueueWaitForMessageRestricted+0x2a>
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c1c:	b25b      	sxtb	r3, r3
 8005c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c22:	d103      	bne.n	8005c2c <vQueueWaitForMessageRestricted+0x40>
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c2c:	f001 fbe2 	bl	80073f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d106      	bne.n	8005c46 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	3324      	adds	r3, #36	; 0x24
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	68b9      	ldr	r1, [r7, #8]
 8005c40:	4618      	mov	r0, r3
 8005c42:	f000 fc61 	bl	8006508 <vTaskPlaceOnEventListRestricted>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 8005cc6:	6978      	ldr	r0, [r7, #20]
 8005cc8:	f7ff ff26 	bl	8005b18 <prvUnlockQueue>
	}
 8005ccc:	bf00      	nop
 8005cce:	3718      	adds	r7, #24
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <xTaskCreateStatic>:
=======
 8005c46:	6978      	ldr	r0, [r7, #20]
 8005c48:	f7ff ff26 	bl	8005a98 <prvUnlockQueue>
	}
 8005c4c:	bf00      	nop
 8005c4e:	3718      	adds	r7, #24
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <xTaskCreateStatic>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
<<<<<<< HEAD
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b08e      	sub	sp, #56	; 0x38
 8005cd8:	af04      	add	r7, sp, #16
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	607a      	str	r2, [r7, #4]
 8005ce0:	603b      	str	r3, [r7, #0]
=======
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b08e      	sub	sp, #56	; 0x38
 8005c58:	af04      	add	r7, sp, #16
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]
 8005c60:	603b      	str	r3, [r7, #0]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
<<<<<<< HEAD
 8005ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d10a      	bne.n	8005cfe <xTaskCreateStatic+0x2a>
	__asm volatile
 8005ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cec:	f383 8811 	msr	BASEPRI, r3
 8005cf0:	f3bf 8f6f 	isb	sy
 8005cf4:	f3bf 8f4f 	dsb	sy
 8005cf8:	623b      	str	r3, [r7, #32]
}
 8005cfa:	bf00      	nop
 8005cfc:	e7fe      	b.n	8005cfc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d10a      	bne.n	8005d1a <xTaskCreateStatic+0x46>
	__asm volatile
 8005d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d08:	f383 8811 	msr	BASEPRI, r3
 8005d0c:	f3bf 8f6f 	isb	sy
 8005d10:	f3bf 8f4f 	dsb	sy
 8005d14:	61fb      	str	r3, [r7, #28]
}
 8005d16:	bf00      	nop
 8005d18:	e7fe      	b.n	8005d18 <xTaskCreateStatic+0x44>
=======
 8005c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d10a      	bne.n	8005c7e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c6c:	f383 8811 	msr	BASEPRI, r3
 8005c70:	f3bf 8f6f 	isb	sy
 8005c74:	f3bf 8f4f 	dsb	sy
 8005c78:	623b      	str	r3, [r7, #32]
}
 8005c7a:	bf00      	nop
 8005c7c:	e7fe      	b.n	8005c7c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d10a      	bne.n	8005c9a <xTaskCreateStatic+0x46>
	__asm volatile
 8005c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c88:	f383 8811 	msr	BASEPRI, r3
 8005c8c:	f3bf 8f6f 	isb	sy
 8005c90:	f3bf 8f4f 	dsb	sy
 8005c94:	61fb      	str	r3, [r7, #28]
}
 8005c96:	bf00      	nop
 8005c98:	e7fe      	b.n	8005c98 <xTaskCreateStatic+0x44>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
<<<<<<< HEAD
 8005d1a:	23a8      	movs	r3, #168	; 0xa8
 8005d1c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	2ba8      	cmp	r3, #168	; 0xa8
 8005d22:	d00a      	beq.n	8005d3a <xTaskCreateStatic+0x66>
	__asm volatile
 8005d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d28:	f383 8811 	msr	BASEPRI, r3
 8005d2c:	f3bf 8f6f 	isb	sy
 8005d30:	f3bf 8f4f 	dsb	sy
 8005d34:	61bb      	str	r3, [r7, #24]
}
 8005d36:	bf00      	nop
 8005d38:	e7fe      	b.n	8005d38 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005d3a:	693b      	ldr	r3, [r7, #16]
=======
 8005c9a:	23bc      	movs	r3, #188	; 0xbc
 8005c9c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	2bbc      	cmp	r3, #188	; 0xbc
 8005ca2:	d00a      	beq.n	8005cba <xTaskCreateStatic+0x66>
	__asm volatile
 8005ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca8:	f383 8811 	msr	BASEPRI, r3
 8005cac:	f3bf 8f6f 	isb	sy
 8005cb0:	f3bf 8f4f 	dsb	sy
 8005cb4:	61bb      	str	r3, [r7, #24]
}
 8005cb6:	bf00      	nop
 8005cb8:	e7fe      	b.n	8005cb8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005cba:	693b      	ldr	r3, [r7, #16]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
<<<<<<< HEAD
 8005d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d01e      	beq.n	8005d80 <xTaskCreateStatic+0xac>
 8005d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d01b      	beq.n	8005d80 <xTaskCreateStatic+0xac>
=======
 8005cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d01e      	beq.n	8005d00 <xTaskCreateStatic+0xac>
 8005cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d01b      	beq.n	8005d00 <xTaskCreateStatic+0xac>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
<<<<<<< HEAD
 8005d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d4a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d50:	631a      	str	r2, [r3, #48]	; 0x30
=======
 8005cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cd0:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
<<<<<<< HEAD
 8005d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d54:	2202      	movs	r2, #2
 8005d56:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
=======
 8005cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd4:	2202      	movs	r2, #2
 8005cd6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
<<<<<<< HEAD
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	9303      	str	r3, [sp, #12]
 8005d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d60:	9302      	str	r3, [sp, #8]
 8005d62:	f107 0314 	add.w	r3, r7, #20
 8005d66:	9301      	str	r3, [sp, #4]
 8005d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6a:	9300      	str	r3, [sp, #0]
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	68b9      	ldr	r1, [r7, #8]
 8005d72:	68f8      	ldr	r0, [r7, #12]
 8005d74:	f000 f850 	bl	8005e18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005d7a:	f000 f8f3 	bl	8005f64 <prvAddNewTaskToReadyList>
 8005d7e:	e001      	b.n	8005d84 <xTaskCreateStatic+0xb0>
=======
 8005cda:	2300      	movs	r3, #0
 8005cdc:	9303      	str	r3, [sp, #12]
 8005cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce0:	9302      	str	r3, [sp, #8]
 8005ce2:	f107 0314 	add.w	r3, r7, #20
 8005ce6:	9301      	str	r3, [sp, #4]
 8005ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cea:	9300      	str	r3, [sp, #0]
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	68b9      	ldr	r1, [r7, #8]
 8005cf2:	68f8      	ldr	r0, [r7, #12]
 8005cf4:	f000 f850 	bl	8005d98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005cf8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005cfa:	f000 f8f3 	bl	8005ee4 <prvAddNewTaskToReadyList>
 8005cfe:	e001      	b.n	8005d04 <xTaskCreateStatic+0xb0>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		}
		else
		{
			xReturn = NULL;
<<<<<<< HEAD
 8005d80:	2300      	movs	r3, #0
 8005d82:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005d84:	697b      	ldr	r3, [r7, #20]
	}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3728      	adds	r7, #40	; 0x28
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <xTaskCreate>:
=======
 8005d00:	2300      	movs	r3, #0
 8005d02:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005d04:	697b      	ldr	r3, [r7, #20]
	}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3728      	adds	r7, #40	; 0x28
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}

08005d0e <xTaskCreate>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
<<<<<<< HEAD
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b08c      	sub	sp, #48	; 0x30
 8005d92:	af04      	add	r7, sp, #16
 8005d94:	60f8      	str	r0, [r7, #12]
 8005d96:	60b9      	str	r1, [r7, #8]
 8005d98:	603b      	str	r3, [r7, #0]
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	80fb      	strh	r3, [r7, #6]
=======
 8005d0e:	b580      	push	{r7, lr}
 8005d10:	b08c      	sub	sp, #48	; 0x30
 8005d12:	af04      	add	r7, sp, #16
 8005d14:	60f8      	str	r0, [r7, #12]
 8005d16:	60b9      	str	r1, [r7, #8]
 8005d18:	603b      	str	r3, [r7, #0]
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	80fb      	strh	r3, [r7, #6]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
<<<<<<< HEAD
 8005d9e:	88fb      	ldrh	r3, [r7, #6]
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	4618      	mov	r0, r3
 8005da4:	f001 fc58 	bl	8007658 <pvPortMalloc>
 8005da8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d00e      	beq.n	8005dce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005db0:	20a8      	movs	r0, #168	; 0xa8
 8005db2:	f001 fc51 	bl	8007658 <pvPortMalloc>
 8005db6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d003      	beq.n	8005dc6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	697a      	ldr	r2, [r7, #20]
 8005dc2:	631a      	str	r2, [r3, #48]	; 0x30
 8005dc4:	e005      	b.n	8005dd2 <xTaskCreate+0x44>
=======
 8005d1e:	88fb      	ldrh	r3, [r7, #6]
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	4618      	mov	r0, r3
 8005d24:	f001 fc58 	bl	80075d8 <pvPortMalloc>
 8005d28:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00e      	beq.n	8005d4e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005d30:	20bc      	movs	r0, #188	; 0xbc
 8005d32:	f001 fc51 	bl	80075d8 <pvPortMalloc>
 8005d36:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d003      	beq.n	8005d46 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	697a      	ldr	r2, [r7, #20]
 8005d42:	631a      	str	r2, [r3, #48]	; 0x30
 8005d44:	e005      	b.n	8005d52 <xTaskCreate+0x44>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
<<<<<<< HEAD
 8005dc6:	6978      	ldr	r0, [r7, #20]
 8005dc8:	f001 fd12 	bl	80077f0 <vPortFree>
 8005dcc:	e001      	b.n	8005dd2 <xTaskCreate+0x44>
=======
 8005d46:	6978      	ldr	r0, [r7, #20]
 8005d48:	f001 fd12 	bl	8007770 <vPortFree>
 8005d4c:	e001      	b.n	8005d52 <xTaskCreate+0x44>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
				}
			}
			else
			{
				pxNewTCB = NULL;
<<<<<<< HEAD
 8005dce:	2300      	movs	r3, #0
 8005dd0:	61fb      	str	r3, [r7, #28]
=======
 8005d4e:	2300      	movs	r3, #0
 8005d50:	61fb      	str	r3, [r7, #28]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
<<<<<<< HEAD
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d017      	beq.n	8005e08 <xTaskCreate+0x7a>
=======
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d017      	beq.n	8005d88 <xTaskCreate+0x7a>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
<<<<<<< HEAD
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
=======
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
<<<<<<< HEAD
 8005de0:	88fa      	ldrh	r2, [r7, #6]
 8005de2:	2300      	movs	r3, #0
 8005de4:	9303      	str	r3, [sp, #12]
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	9302      	str	r3, [sp, #8]
 8005dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dec:	9301      	str	r3, [sp, #4]
 8005dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df0:	9300      	str	r3, [sp, #0]
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	68b9      	ldr	r1, [r7, #8]
 8005df6:	68f8      	ldr	r0, [r7, #12]
 8005df8:	f000 f80e 	bl	8005e18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005dfc:	69f8      	ldr	r0, [r7, #28]
 8005dfe:	f000 f8b1 	bl	8005f64 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005e02:	2301      	movs	r3, #1
 8005e04:	61bb      	str	r3, [r7, #24]
 8005e06:	e002      	b.n	8005e0e <xTaskCreate+0x80>
=======
 8005d60:	88fa      	ldrh	r2, [r7, #6]
 8005d62:	2300      	movs	r3, #0
 8005d64:	9303      	str	r3, [sp, #12]
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	9302      	str	r3, [sp, #8]
 8005d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d6c:	9301      	str	r3, [sp, #4]
 8005d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d70:	9300      	str	r3, [sp, #0]
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	68b9      	ldr	r1, [r7, #8]
 8005d76:	68f8      	ldr	r0, [r7, #12]
 8005d78:	f000 f80e 	bl	8005d98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d7c:	69f8      	ldr	r0, [r7, #28]
 8005d7e:	f000 f8b1 	bl	8005ee4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005d82:	2301      	movs	r3, #1
 8005d84:	61bb      	str	r3, [r7, #24]
 8005d86:	e002      	b.n	8005d8e <xTaskCreate+0x80>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
<<<<<<< HEAD
 8005e08:	f04f 33ff 	mov.w	r3, #4294967295
 8005e0c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005e0e:	69bb      	ldr	r3, [r7, #24]
	}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3720      	adds	r7, #32
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <prvInitialiseNewTask>:
=======
 8005d88:	f04f 33ff 	mov.w	r3, #4294967295
 8005d8c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005d8e:	69bb      	ldr	r3, [r7, #24]
	}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3720      	adds	r7, #32
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <prvInitialiseNewTask>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
<<<<<<< HEAD
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b088      	sub	sp, #32
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	607a      	str	r2, [r7, #4]
 8005e24:	603b      	str	r3, [r7, #0]
=======
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b088      	sub	sp, #32
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	607a      	str	r2, [r7, #4]
 8005da4:	603b      	str	r3, [r7, #0]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
<<<<<<< HEAD
 8005e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e28:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	461a      	mov	r2, r3
 8005e30:	21a5      	movs	r1, #165	; 0xa5
 8005e32:	f001 fdfb 	bl	8007a2c <memset>
=======
 8005da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	461a      	mov	r2, r3
 8005db0:	21a5      	movs	r1, #165	; 0xa5
 8005db2:	f001 fe2f 	bl	8007a14 <memset>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
<<<<<<< HEAD
 8005e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005e40:	3b01      	subs	r3, #1
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	4413      	add	r3, r2
 8005e46:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	f023 0307 	bic.w	r3, r3, #7
 8005e4e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	f003 0307 	and.w	r3, r3, #7
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00a      	beq.n	8005e70 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5e:	f383 8811 	msr	BASEPRI, r3
 8005e62:	f3bf 8f6f 	isb	sy
 8005e66:	f3bf 8f4f 	dsb	sy
 8005e6a:	617b      	str	r3, [r7, #20]
}
 8005e6c:	bf00      	nop
 8005e6e:	e7fe      	b.n	8005e6e <prvInitialiseNewTask+0x56>
=======
 8005db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	4413      	add	r3, r2
 8005dc6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	f023 0307 	bic.w	r3, r3, #7
 8005dce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	f003 0307 	and.w	r3, r3, #7
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00a      	beq.n	8005df0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dde:	f383 8811 	msr	BASEPRI, r3
 8005de2:	f3bf 8f6f 	isb	sy
 8005de6:	f3bf 8f4f 	dsb	sy
 8005dea:	617b      	str	r3, [r7, #20]
}
 8005dec:	bf00      	nop
 8005dee:	e7fe      	b.n	8005dee <prvInitialiseNewTask+0x56>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
<<<<<<< HEAD
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d01f      	beq.n	8005eb6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e76:	2300      	movs	r3, #0
 8005e78:	61fb      	str	r3, [r7, #28]
 8005e7a:	e012      	b.n	8005ea2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005e7c:	68ba      	ldr	r2, [r7, #8]
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	4413      	add	r3, r2
 8005e82:	7819      	ldrb	r1, [r3, #0]
 8005e84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	4413      	add	r3, r2
 8005e8a:	3334      	adds	r3, #52	; 0x34
 8005e8c:	460a      	mov	r2, r1
 8005e8e:	701a      	strb	r2, [r3, #0]
=======
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d01f      	beq.n	8005e36 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005df6:	2300      	movs	r3, #0
 8005df8:	61fb      	str	r3, [r7, #28]
 8005dfa:	e012      	b.n	8005e22 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005dfc:	68ba      	ldr	r2, [r7, #8]
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	4413      	add	r3, r2
 8005e02:	7819      	ldrb	r1, [r3, #0]
 8005e04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	4413      	add	r3, r2
 8005e0a:	3334      	adds	r3, #52	; 0x34
 8005e0c:	460a      	mov	r2, r1
 8005e0e:	701a      	strb	r2, [r3, #0]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
<<<<<<< HEAD
 8005e90:	68ba      	ldr	r2, [r7, #8]
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	4413      	add	r3, r2
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d006      	beq.n	8005eaa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	61fb      	str	r3, [r7, #28]
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	2b0f      	cmp	r3, #15
 8005ea6:	d9e9      	bls.n	8005e7c <prvInitialiseNewTask+0x64>
 8005ea8:	e000      	b.n	8005eac <prvInitialiseNewTask+0x94>
			{
				break;
 8005eaa:	bf00      	nop
=======
 8005e10:	68ba      	ldr	r2, [r7, #8]
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	4413      	add	r3, r2
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d006      	beq.n	8005e2a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	3301      	adds	r3, #1
 8005e20:	61fb      	str	r3, [r7, #28]
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	2b0f      	cmp	r3, #15
 8005e26:	d9e9      	bls.n	8005dfc <prvInitialiseNewTask+0x64>
 8005e28:	e000      	b.n	8005e2c <prvInitialiseNewTask+0x94>
			{
				break;
 8005e2a:	bf00      	nop
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
<<<<<<< HEAD
 8005eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005eb4:	e003      	b.n	8005ebe <prvInitialiseNewTask+0xa6>
=======
 8005e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e34:	e003      	b.n	8005e3e <prvInitialiseNewTask+0xa6>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
<<<<<<< HEAD
 8005eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
=======
 8005e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
<<<<<<< HEAD
 8005ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec0:	2b37      	cmp	r3, #55	; 0x37
 8005ec2:	d901      	bls.n	8005ec8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005ec4:	2337      	movs	r3, #55	; 0x37
 8005ec6:	62bb      	str	r3, [r7, #40]	; 0x28
=======
 8005e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e40:	2b37      	cmp	r3, #55	; 0x37
 8005e42:	d901      	bls.n	8005e48 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005e44:	2337      	movs	r3, #55	; 0x37
 8005e46:	62bb      	str	r3, [r7, #40]	; 0x28
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
<<<<<<< HEAD
 8005ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ecc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ed2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	651a      	str	r2, [r3, #80]	; 0x50
=======
 8005e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e4c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e52:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e56:	2200      	movs	r2, #0
 8005e58:	651a      	str	r2, [r3, #80]	; 0x50
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
<<<<<<< HEAD
 8005eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005edc:	3304      	adds	r3, #4
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f7ff f978 	bl	80051d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee6:	3318      	adds	r3, #24
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f7ff f973 	bl	80051d4 <vListInitialiseItem>
=======
 8005e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e5c:	3304      	adds	r3, #4
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7ff f978 	bl	8005154 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e66:	3318      	adds	r3, #24
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f7ff f973 	bl	8005154 <vListInitialiseItem>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
<<<<<<< HEAD
 8005eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ef2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f02:	625a      	str	r2, [r3, #36]	; 0x24
=======
 8005e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e72:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e76:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e82:	625a      	str	r2, [r3, #36]	; 0x24
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
<<<<<<< HEAD
 8005f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f06:	2200      	movs	r2, #0
 8005f08:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
=======
 8005e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e86:	2200      	movs	r2, #0
 8005e88:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
<<<<<<< HEAD
 8005f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f16:	3354      	adds	r3, #84	; 0x54
 8005f18:	224c      	movs	r2, #76	; 0x4c
 8005f1a:	2100      	movs	r1, #0
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f001 fd85 	bl	8007a2c <memset>
 8005f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f24:	4a0c      	ldr	r2, [pc, #48]	; (8005f58 <prvInitialiseNewTask+0x140>)
 8005f26:	659a      	str	r2, [r3, #88]	; 0x58
 8005f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2a:	4a0c      	ldr	r2, [pc, #48]	; (8005f5c <prvInitialiseNewTask+0x144>)
 8005f2c:	65da      	str	r2, [r3, #92]	; 0x5c
 8005f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f30:	4a0b      	ldr	r2, [pc, #44]	; (8005f60 <prvInitialiseNewTask+0x148>)
 8005f32:	661a      	str	r2, [r3, #96]	; 0x60
=======
 8005e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e96:	3354      	adds	r3, #84	; 0x54
 8005e98:	2260      	movs	r2, #96	; 0x60
 8005e9a:	2100      	movs	r1, #0
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f001 fdb9 	bl	8007a14 <memset>
 8005ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea4:	4a0c      	ldr	r2, [pc, #48]	; (8005ed8 <prvInitialiseNewTask+0x140>)
 8005ea6:	659a      	str	r2, [r3, #88]	; 0x58
 8005ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eaa:	4a0c      	ldr	r2, [pc, #48]	; (8005edc <prvInitialiseNewTask+0x144>)
 8005eac:	65da      	str	r2, [r3, #92]	; 0x5c
 8005eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb0:	4a0b      	ldr	r2, [pc, #44]	; (8005ee0 <prvInitialiseNewTask+0x148>)
 8005eb2:	661a      	str	r2, [r3, #96]	; 0x60
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
<<<<<<< HEAD
 8005f34:	683a      	ldr	r2, [r7, #0]
 8005f36:	68f9      	ldr	r1, [r7, #12]
 8005f38:	69b8      	ldr	r0, [r7, #24]
 8005f3a:	f001 f941 	bl	80071c0 <pxPortInitialiseStack>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f42:	601a      	str	r2, [r3, #0]
=======
 8005eb4:	683a      	ldr	r2, [r7, #0]
 8005eb6:	68f9      	ldr	r1, [r7, #12]
 8005eb8:	69b8      	ldr	r0, [r7, #24]
 8005eba:	f001 f941 	bl	8007140 <pxPortInitialiseStack>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec2:	601a      	str	r2, [r3, #0]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
<<<<<<< HEAD
 8005f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d002      	beq.n	8005f50 <prvInitialiseNewTask+0x138>
=======
 8005ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d002      	beq.n	8005ed0 <prvInitialiseNewTask+0x138>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
<<<<<<< HEAD
 8005f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f4e:	601a      	str	r2, [r3, #0]
=======
 8005eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ecc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ece:	601a      	str	r2, [r3, #0]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< HEAD
 8005f50:	bf00      	nop
 8005f52:	3720      	adds	r7, #32
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	200024e8 	.word	0x200024e8
 8005f5c:	20002550 	.word	0x20002550
 8005f60:	200025b8 	.word	0x200025b8

08005f64 <prvAddNewTaskToReadyList>:
=======
 8005ed0:	bf00      	nop
 8005ed2:	3720      	adds	r7, #32
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	08007d34 	.word	0x08007d34
 8005edc:	08007d54 	.word	0x08007d54
 8005ee0:	08007d14 	.word	0x08007d14

08005ee4 <prvAddNewTaskToReadyList>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
<<<<<<< HEAD
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005f6c:	f001 fa52 	bl	8007414 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005f70:	4b2d      	ldr	r3, [pc, #180]	; (8006028 <prvAddNewTaskToReadyList+0xc4>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	3301      	adds	r3, #1
 8005f76:	4a2c      	ldr	r2, [pc, #176]	; (8006028 <prvAddNewTaskToReadyList+0xc4>)
 8005f78:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005f7a:	4b2c      	ldr	r3, [pc, #176]	; (800602c <prvAddNewTaskToReadyList+0xc8>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d109      	bne.n	8005f96 <prvAddNewTaskToReadyList+0x32>
=======
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005eec:	f001 fa52 	bl	8007394 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005ef0:	4b2d      	ldr	r3, [pc, #180]	; (8005fa8 <prvAddNewTaskToReadyList+0xc4>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	4a2c      	ldr	r2, [pc, #176]	; (8005fa8 <prvAddNewTaskToReadyList+0xc4>)
 8005ef8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005efa:	4b2c      	ldr	r3, [pc, #176]	; (8005fac <prvAddNewTaskToReadyList+0xc8>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d109      	bne.n	8005f16 <prvAddNewTaskToReadyList+0x32>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
<<<<<<< HEAD
 8005f82:	4a2a      	ldr	r2, [pc, #168]	; (800602c <prvAddNewTaskToReadyList+0xc8>)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005f88:	4b27      	ldr	r3, [pc, #156]	; (8006028 <prvAddNewTaskToReadyList+0xc4>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d110      	bne.n	8005fb2 <prvAddNewTaskToReadyList+0x4e>
=======
 8005f02:	4a2a      	ldr	r2, [pc, #168]	; (8005fac <prvAddNewTaskToReadyList+0xc8>)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005f08:	4b27      	ldr	r3, [pc, #156]	; (8005fa8 <prvAddNewTaskToReadyList+0xc4>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d110      	bne.n	8005f32 <prvAddNewTaskToReadyList+0x4e>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
<<<<<<< HEAD
 8005f90:	f000 fc26 	bl	80067e0 <prvInitialiseTaskLists>
 8005f94:	e00d      	b.n	8005fb2 <prvAddNewTaskToReadyList+0x4e>
=======
 8005f10:	f000 fc26 	bl	8006760 <prvInitialiseTaskLists>
 8005f14:	e00d      	b.n	8005f32 <prvAddNewTaskToReadyList+0x4e>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
<<<<<<< HEAD
 8005f96:	4b26      	ldr	r3, [pc, #152]	; (8006030 <prvAddNewTaskToReadyList+0xcc>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d109      	bne.n	8005fb2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005f9e:	4b23      	ldr	r3, [pc, #140]	; (800602c <prvAddNewTaskToReadyList+0xc8>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d802      	bhi.n	8005fb2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005fac:	4a1f      	ldr	r2, [pc, #124]	; (800602c <prvAddNewTaskToReadyList+0xc8>)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6013      	str	r3, [r2, #0]
=======
 8005f16:	4b26      	ldr	r3, [pc, #152]	; (8005fb0 <prvAddNewTaskToReadyList+0xcc>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d109      	bne.n	8005f32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005f1e:	4b23      	ldr	r3, [pc, #140]	; (8005fac <prvAddNewTaskToReadyList+0xc8>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d802      	bhi.n	8005f32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005f2c:	4a1f      	ldr	r2, [pc, #124]	; (8005fac <prvAddNewTaskToReadyList+0xc8>)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6013      	str	r3, [r2, #0]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
<<<<<<< HEAD
 8005fb2:	4b20      	ldr	r3, [pc, #128]	; (8006034 <prvAddNewTaskToReadyList+0xd0>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	4a1e      	ldr	r2, [pc, #120]	; (8006034 <prvAddNewTaskToReadyList+0xd0>)
 8005fba:	6013      	str	r3, [r2, #0]
=======
 8005f32:	4b20      	ldr	r3, [pc, #128]	; (8005fb4 <prvAddNewTaskToReadyList+0xd0>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	3301      	adds	r3, #1
 8005f38:	4a1e      	ldr	r2, [pc, #120]	; (8005fb4 <prvAddNewTaskToReadyList+0xd0>)
 8005f3a:	6013      	str	r3, [r2, #0]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
<<<<<<< HEAD
 8005fbc:	4b1d      	ldr	r3, [pc, #116]	; (8006034 <prvAddNewTaskToReadyList+0xd0>)
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	645a      	str	r2, [r3, #68]	; 0x44
=======
 8005f3c:	4b1d      	ldr	r3, [pc, #116]	; (8005fb4 <prvAddNewTaskToReadyList+0xd0>)
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
<<<<<<< HEAD
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fc8:	4b1b      	ldr	r3, [pc, #108]	; (8006038 <prvAddNewTaskToReadyList+0xd4>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d903      	bls.n	8005fd8 <prvAddNewTaskToReadyList+0x74>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd4:	4a18      	ldr	r2, [pc, #96]	; (8006038 <prvAddNewTaskToReadyList+0xd4>)
 8005fd6:	6013      	str	r3, [r2, #0]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fdc:	4613      	mov	r3, r2
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4413      	add	r3, r2
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	4a15      	ldr	r2, [pc, #84]	; (800603c <prvAddNewTaskToReadyList+0xd8>)
 8005fe6:	441a      	add	r2, r3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	3304      	adds	r3, #4
 8005fec:	4619      	mov	r1, r3
 8005fee:	4610      	mov	r0, r2
 8005ff0:	f7ff f8fd 	bl	80051ee <vListInsertEnd>
=======
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f48:	4b1b      	ldr	r3, [pc, #108]	; (8005fb8 <prvAddNewTaskToReadyList+0xd4>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d903      	bls.n	8005f58 <prvAddNewTaskToReadyList+0x74>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f54:	4a18      	ldr	r2, [pc, #96]	; (8005fb8 <prvAddNewTaskToReadyList+0xd4>)
 8005f56:	6013      	str	r3, [r2, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	4413      	add	r3, r2
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	4a15      	ldr	r2, [pc, #84]	; (8005fbc <prvAddNewTaskToReadyList+0xd8>)
 8005f66:	441a      	add	r2, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	3304      	adds	r3, #4
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	4610      	mov	r0, r2
 8005f70:	f7ff f8fd 	bl	800516e <vListInsertEnd>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
 8005ff4:	f001 fa3e 	bl	8007474 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005ff8:	4b0d      	ldr	r3, [pc, #52]	; (8006030 <prvAddNewTaskToReadyList+0xcc>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d00e      	beq.n	800601e <prvAddNewTaskToReadyList+0xba>
=======
 8005f74:	f001 fa3e 	bl	80073f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005f78:	4b0d      	ldr	r3, [pc, #52]	; (8005fb0 <prvAddNewTaskToReadyList+0xcc>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d00e      	beq.n	8005f9e <prvAddNewTaskToReadyList+0xba>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
<<<<<<< HEAD
 8006000:	4b0a      	ldr	r3, [pc, #40]	; (800602c <prvAddNewTaskToReadyList+0xc8>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600a:	429a      	cmp	r2, r3
 800600c:	d207      	bcs.n	800601e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800600e:	4b0c      	ldr	r3, [pc, #48]	; (8006040 <prvAddNewTaskToReadyList+0xdc>)
 8006010:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006014:	601a      	str	r2, [r3, #0]
 8006016:	f3bf 8f4f 	dsb	sy
 800601a:	f3bf 8f6f 	isb	sy
=======
 8005f80:	4b0a      	ldr	r3, [pc, #40]	; (8005fac <prvAddNewTaskToReadyList+0xc8>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d207      	bcs.n	8005f9e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005f8e:	4b0c      	ldr	r3, [pc, #48]	; (8005fc0 <prvAddNewTaskToReadyList+0xdc>)
 8005f90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f94:	601a      	str	r2, [r3, #0]
 8005f96:	f3bf 8f4f 	dsb	sy
 8005f9a:	f3bf 8f6f 	isb	sy
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< HEAD
 800601e:	bf00      	nop
 8006020:	3708      	adds	r7, #8
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	200013c8 	.word	0x200013c8
 800602c:	20000ef4 	.word	0x20000ef4
 8006030:	200013d4 	.word	0x200013d4
 8006034:	200013e4 	.word	0x200013e4
 8006038:	200013d0 	.word	0x200013d0
 800603c:	20000ef8 	.word	0x20000ef8
 8006040:	e000ed04 	.word	0xe000ed04

08006044 <vTaskDelay>:
=======
 8005f9e:	bf00      	nop
 8005fa0:	3708      	adds	r7, #8
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	20001404 	.word	0x20001404
 8005fac:	20000f30 	.word	0x20000f30
 8005fb0:	20001410 	.word	0x20001410
 8005fb4:	20001420 	.word	0x20001420
 8005fb8:	2000140c 	.word	0x2000140c
 8005fbc:	20000f34 	.word	0x20000f34
 8005fc0:	e000ed04 	.word	0xe000ed04

08005fc4 <vTaskDelay>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
<<<<<<< HEAD
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800604c:	2300      	movs	r3, #0
 800604e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d017      	beq.n	8006086 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006056:	4b13      	ldr	r3, [pc, #76]	; (80060a4 <vTaskDelay+0x60>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00a      	beq.n	8006074 <vTaskDelay+0x30>
	__asm volatile
 800605e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006062:	f383 8811 	msr	BASEPRI, r3
 8006066:	f3bf 8f6f 	isb	sy
 800606a:	f3bf 8f4f 	dsb	sy
 800606e:	60bb      	str	r3, [r7, #8]
}
 8006070:	bf00      	nop
 8006072:	e7fe      	b.n	8006072 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006074:	f000 f88a 	bl	800618c <vTaskSuspendAll>
=======
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d017      	beq.n	8006006 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005fd6:	4b13      	ldr	r3, [pc, #76]	; (8006024 <vTaskDelay+0x60>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d00a      	beq.n	8005ff4 <vTaskDelay+0x30>
	__asm volatile
 8005fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe2:	f383 8811 	msr	BASEPRI, r3
 8005fe6:	f3bf 8f6f 	isb	sy
 8005fea:	f3bf 8f4f 	dsb	sy
 8005fee:	60bb      	str	r3, [r7, #8]
}
 8005ff0:	bf00      	nop
 8005ff2:	e7fe      	b.n	8005ff2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005ff4:	f000 f88a 	bl	800610c <vTaskSuspendAll>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
<<<<<<< HEAD
 8006078:	2100      	movs	r1, #0
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 fcfe 	bl	8006a7c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006080:	f000 f892 	bl	80061a8 <xTaskResumeAll>
 8006084:	60f8      	str	r0, [r7, #12]
=======
 8005ff8:	2100      	movs	r1, #0
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 fcfe 	bl	80069fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006000:	f000 f892 	bl	8006128 <xTaskResumeAll>
 8006004:	60f8      	str	r0, [r7, #12]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
<<<<<<< HEAD
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d107      	bne.n	800609c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800608c:	4b06      	ldr	r3, [pc, #24]	; (80060a8 <vTaskDelay+0x64>)
 800608e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006092:	601a      	str	r2, [r3, #0]
 8006094:	f3bf 8f4f 	dsb	sy
 8006098:	f3bf 8f6f 	isb	sy
=======
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d107      	bne.n	800601c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800600c:	4b06      	ldr	r3, [pc, #24]	; (8006028 <vTaskDelay+0x64>)
 800600e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006012:	601a      	str	r2, [r3, #0]
 8006014:	f3bf 8f4f 	dsb	sy
 8006018:	f3bf 8f6f 	isb	sy
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
<<<<<<< HEAD
 800609c:	bf00      	nop
 800609e:	3710      	adds	r7, #16
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	200013f0 	.word	0x200013f0
 80060a8:	e000ed04 	.word	0xe000ed04

080060ac <vTaskStartScheduler>:
=======
 800601c:	bf00      	nop
 800601e:	3710      	adds	r7, #16
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}
 8006024:	2000142c 	.word	0x2000142c
 8006028:	e000ed04 	.word	0xe000ed04

0800602c <vTaskStartScheduler>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
<<<<<<< HEAD
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b08a      	sub	sp, #40	; 0x28
 80060b0:	af04      	add	r7, sp, #16
=======
 800602c:	b580      	push	{r7, lr}
 800602e:	b08a      	sub	sp, #40	; 0x28
 8006030:	af04      	add	r7, sp, #16
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
<<<<<<< HEAD
 80060b2:	2300      	movs	r3, #0
 80060b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80060b6:	2300      	movs	r3, #0
 80060b8:	607b      	str	r3, [r7, #4]
=======
 8006032:	2300      	movs	r3, #0
 8006034:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006036:	2300      	movs	r3, #0
 8006038:	607b      	str	r3, [r7, #4]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
<<<<<<< HEAD
 80060ba:	463a      	mov	r2, r7
 80060bc:	1d39      	adds	r1, r7, #4
 80060be:	f107 0308 	add.w	r3, r7, #8
 80060c2:	4618      	mov	r0, r3
 80060c4:	f7ff f832 	bl	800512c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80060c8:	6839      	ldr	r1, [r7, #0]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	68ba      	ldr	r2, [r7, #8]
 80060ce:	9202      	str	r2, [sp, #8]
 80060d0:	9301      	str	r3, [sp, #4]
 80060d2:	2300      	movs	r3, #0
 80060d4:	9300      	str	r3, [sp, #0]
 80060d6:	2300      	movs	r3, #0
 80060d8:	460a      	mov	r2, r1
 80060da:	4924      	ldr	r1, [pc, #144]	; (800616c <vTaskStartScheduler+0xc0>)
 80060dc:	4824      	ldr	r0, [pc, #144]	; (8006170 <vTaskStartScheduler+0xc4>)
 80060de:	f7ff fdf9 	bl	8005cd4 <xTaskCreateStatic>
 80060e2:	4603      	mov	r3, r0
 80060e4:	4a23      	ldr	r2, [pc, #140]	; (8006174 <vTaskStartScheduler+0xc8>)
 80060e6:	6013      	str	r3, [r2, #0]
=======
 800603a:	463a      	mov	r2, r7
 800603c:	1d39      	adds	r1, r7, #4
 800603e:	f107 0308 	add.w	r3, r7, #8
 8006042:	4618      	mov	r0, r3
 8006044:	f7ff f832 	bl	80050ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006048:	6839      	ldr	r1, [r7, #0]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	68ba      	ldr	r2, [r7, #8]
 800604e:	9202      	str	r2, [sp, #8]
 8006050:	9301      	str	r3, [sp, #4]
 8006052:	2300      	movs	r3, #0
 8006054:	9300      	str	r3, [sp, #0]
 8006056:	2300      	movs	r3, #0
 8006058:	460a      	mov	r2, r1
 800605a:	4924      	ldr	r1, [pc, #144]	; (80060ec <vTaskStartScheduler+0xc0>)
 800605c:	4824      	ldr	r0, [pc, #144]	; (80060f0 <vTaskStartScheduler+0xc4>)
 800605e:	f7ff fdf9 	bl	8005c54 <xTaskCreateStatic>
 8006062:	4603      	mov	r3, r0
 8006064:	4a23      	ldr	r2, [pc, #140]	; (80060f4 <vTaskStartScheduler+0xc8>)
 8006066:	6013      	str	r3, [r2, #0]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
<<<<<<< HEAD
 80060e8:	4b22      	ldr	r3, [pc, #136]	; (8006174 <vTaskStartScheduler+0xc8>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d002      	beq.n	80060f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80060f0:	2301      	movs	r3, #1
 80060f2:	617b      	str	r3, [r7, #20]
 80060f4:	e001      	b.n	80060fa <vTaskStartScheduler+0x4e>
=======
 8006068:	4b22      	ldr	r3, [pc, #136]	; (80060f4 <vTaskStartScheduler+0xc8>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d002      	beq.n	8006076 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006070:	2301      	movs	r3, #1
 8006072:	617b      	str	r3, [r7, #20]
 8006074:	e001      	b.n	800607a <vTaskStartScheduler+0x4e>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		}
		else
		{
			xReturn = pdFAIL;
<<<<<<< HEAD
 80060f6:	2300      	movs	r3, #0
 80060f8:	617b      	str	r3, [r7, #20]
=======
 8006076:	2300      	movs	r3, #0
 8006078:	617b      	str	r3, [r7, #20]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
<<<<<<< HEAD
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d102      	bne.n	8006106 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006100:	f000 fd10 	bl	8006b24 <xTimerCreateTimerTask>
 8006104:	6178      	str	r0, [r7, #20]
=======
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	2b01      	cmp	r3, #1
 800607e:	d102      	bne.n	8006086 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006080:	f000 fd10 	bl	8006aa4 <xTimerCreateTimerTask>
 8006084:	6178      	str	r0, [r7, #20]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
<<<<<<< HEAD
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	2b01      	cmp	r3, #1
 800610a:	d11b      	bne.n	8006144 <vTaskStartScheduler+0x98>
	__asm volatile
 800610c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006110:	f383 8811 	msr	BASEPRI, r3
 8006114:	f3bf 8f6f 	isb	sy
 8006118:	f3bf 8f4f 	dsb	sy
 800611c:	613b      	str	r3, [r7, #16]
}
 800611e:	bf00      	nop
=======
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	2b01      	cmp	r3, #1
 800608a:	d11b      	bne.n	80060c4 <vTaskStartScheduler+0x98>
	__asm volatile
 800608c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006090:	f383 8811 	msr	BASEPRI, r3
 8006094:	f3bf 8f6f 	isb	sy
 8006098:	f3bf 8f4f 	dsb	sy
 800609c:	613b      	str	r3, [r7, #16]
}
 800609e:	bf00      	nop
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
<<<<<<< HEAD
 8006120:	4b15      	ldr	r3, [pc, #84]	; (8006178 <vTaskStartScheduler+0xcc>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	3354      	adds	r3, #84	; 0x54
 8006126:	4a15      	ldr	r2, [pc, #84]	; (800617c <vTaskStartScheduler+0xd0>)
 8006128:	6013      	str	r3, [r2, #0]
=======
 80060a0:	4b15      	ldr	r3, [pc, #84]	; (80060f8 <vTaskStartScheduler+0xcc>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	3354      	adds	r3, #84	; 0x54
 80060a6:	4a15      	ldr	r2, [pc, #84]	; (80060fc <vTaskStartScheduler+0xd0>)
 80060a8:	6013      	str	r3, [r2, #0]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
<<<<<<< HEAD
 800612a:	4b15      	ldr	r3, [pc, #84]	; (8006180 <vTaskStartScheduler+0xd4>)
 800612c:	f04f 32ff 	mov.w	r2, #4294967295
 8006130:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006132:	4b14      	ldr	r3, [pc, #80]	; (8006184 <vTaskStartScheduler+0xd8>)
 8006134:	2201      	movs	r2, #1
 8006136:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006138:	4b13      	ldr	r3, [pc, #76]	; (8006188 <vTaskStartScheduler+0xdc>)
 800613a:	2200      	movs	r2, #0
 800613c:	601a      	str	r2, [r3, #0]
=======
 80060aa:	4b15      	ldr	r3, [pc, #84]	; (8006100 <vTaskStartScheduler+0xd4>)
 80060ac:	f04f 32ff 	mov.w	r2, #4294967295
 80060b0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80060b2:	4b14      	ldr	r3, [pc, #80]	; (8006104 <vTaskStartScheduler+0xd8>)
 80060b4:	2201      	movs	r2, #1
 80060b6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80060b8:	4b13      	ldr	r3, [pc, #76]	; (8006108 <vTaskStartScheduler+0xdc>)
 80060ba:	2200      	movs	r2, #0
 80060bc:	601a      	str	r2, [r3, #0]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
<<<<<<< HEAD
 800613e:	f001 f8c7 	bl	80072d0 <xPortStartScheduler>
=======
 80060be:	f001 f8c7 	bl	8007250 <xPortStartScheduler>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
<<<<<<< HEAD
 8006142:	e00e      	b.n	8006162 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800614a:	d10a      	bne.n	8006162 <vTaskStartScheduler+0xb6>
	__asm volatile
 800614c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006150:	f383 8811 	msr	BASEPRI, r3
 8006154:	f3bf 8f6f 	isb	sy
 8006158:	f3bf 8f4f 	dsb	sy
 800615c:	60fb      	str	r3, [r7, #12]
}
 800615e:	bf00      	nop
 8006160:	e7fe      	b.n	8006160 <vTaskStartScheduler+0xb4>
}
 8006162:	bf00      	nop
 8006164:	3718      	adds	r7, #24
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	08007c58 	.word	0x08007c58
 8006170:	080067b1 	.word	0x080067b1
 8006174:	200013ec 	.word	0x200013ec
 8006178:	20000ef4 	.word	0x20000ef4
 800617c:	2000005c 	.word	0x2000005c
 8006180:	200013e8 	.word	0x200013e8
 8006184:	200013d4 	.word	0x200013d4
 8006188:	200013cc 	.word	0x200013cc

0800618c <vTaskSuspendAll>:
=======
 80060c2:	e00e      	b.n	80060e2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ca:	d10a      	bne.n	80060e2 <vTaskStartScheduler+0xb6>
	__asm volatile
 80060cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d0:	f383 8811 	msr	BASEPRI, r3
 80060d4:	f3bf 8f6f 	isb	sy
 80060d8:	f3bf 8f4f 	dsb	sy
 80060dc:	60fb      	str	r3, [r7, #12]
}
 80060de:	bf00      	nop
 80060e0:	e7fe      	b.n	80060e0 <vTaskStartScheduler+0xb4>
}
 80060e2:	bf00      	nop
 80060e4:	3718      	adds	r7, #24
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	08007c00 	.word	0x08007c00
 80060f0:	08006731 	.word	0x08006731
 80060f4:	20001428 	.word	0x20001428
 80060f8:	20000f30 	.word	0x20000f30
 80060fc:	20000010 	.word	0x20000010
 8006100:	20001424 	.word	0x20001424
 8006104:	20001410 	.word	0x20001410
 8006108:	20001408 	.word	0x20001408

0800610c <vTaskSuspendAll>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
<<<<<<< HEAD
 800618c:	b480      	push	{r7}
 800618e:	af00      	add	r7, sp, #0
=======
 800610c:	b480      	push	{r7}
 800610e:	af00      	add	r7, sp, #0
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
<<<<<<< HEAD
 8006190:	4b04      	ldr	r3, [pc, #16]	; (80061a4 <vTaskSuspendAll+0x18>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	3301      	adds	r3, #1
 8006196:	4a03      	ldr	r2, [pc, #12]	; (80061a4 <vTaskSuspendAll+0x18>)
 8006198:	6013      	str	r3, [r2, #0]
=======
 8006110:	4b04      	ldr	r3, [pc, #16]	; (8006124 <vTaskSuspendAll+0x18>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	3301      	adds	r3, #1
 8006116:	4a03      	ldr	r2, [pc, #12]	; (8006124 <vTaskSuspendAll+0x18>)
 8006118:	6013      	str	r3, [r2, #0]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
<<<<<<< HEAD
 800619a:	bf00      	nop
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr
 80061a4:	200013f0 	.word	0x200013f0

080061a8 <xTaskResumeAll>:
=======
 800611a:	bf00      	nop
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr
 8006124:	2000142c 	.word	0x2000142c

08006128 <xTaskResumeAll>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
<<<<<<< HEAD
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80061ae:	2300      	movs	r3, #0
 80061b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80061b2:	2300      	movs	r3, #0
 80061b4:	60bb      	str	r3, [r7, #8]
=======
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800612e:	2300      	movs	r3, #0
 8006130:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006132:	2300      	movs	r3, #0
 8006134:	60bb      	str	r3, [r7, #8]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
<<<<<<< HEAD
 80061b6:	4b42      	ldr	r3, [pc, #264]	; (80062c0 <xTaskResumeAll+0x118>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d10a      	bne.n	80061d4 <xTaskResumeAll+0x2c>
	__asm volatile
 80061be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c2:	f383 8811 	msr	BASEPRI, r3
 80061c6:	f3bf 8f6f 	isb	sy
 80061ca:	f3bf 8f4f 	dsb	sy
 80061ce:	603b      	str	r3, [r7, #0]
}
 80061d0:	bf00      	nop
 80061d2:	e7fe      	b.n	80061d2 <xTaskResumeAll+0x2a>
=======
 8006136:	4b42      	ldr	r3, [pc, #264]	; (8006240 <xTaskResumeAll+0x118>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d10a      	bne.n	8006154 <xTaskResumeAll+0x2c>
	__asm volatile
 800613e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006142:	f383 8811 	msr	BASEPRI, r3
 8006146:	f3bf 8f6f 	isb	sy
 800614a:	f3bf 8f4f 	dsb	sy
 800614e:	603b      	str	r3, [r7, #0]
}
 8006150:	bf00      	nop
 8006152:	e7fe      	b.n	8006152 <xTaskResumeAll+0x2a>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
<<<<<<< HEAD
 80061d4:	f001 f91e 	bl	8007414 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80061d8:	4b39      	ldr	r3, [pc, #228]	; (80062c0 <xTaskResumeAll+0x118>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	3b01      	subs	r3, #1
 80061de:	4a38      	ldr	r2, [pc, #224]	; (80062c0 <xTaskResumeAll+0x118>)
 80061e0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061e2:	4b37      	ldr	r3, [pc, #220]	; (80062c0 <xTaskResumeAll+0x118>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d162      	bne.n	80062b0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80061ea:	4b36      	ldr	r3, [pc, #216]	; (80062c4 <xTaskResumeAll+0x11c>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d05e      	beq.n	80062b0 <xTaskResumeAll+0x108>
=======
 8006154:	f001 f91e 	bl	8007394 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006158:	4b39      	ldr	r3, [pc, #228]	; (8006240 <xTaskResumeAll+0x118>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	3b01      	subs	r3, #1
 800615e:	4a38      	ldr	r2, [pc, #224]	; (8006240 <xTaskResumeAll+0x118>)
 8006160:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006162:	4b37      	ldr	r3, [pc, #220]	; (8006240 <xTaskResumeAll+0x118>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d162      	bne.n	8006230 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800616a:	4b36      	ldr	r3, [pc, #216]	; (8006244 <xTaskResumeAll+0x11c>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d05e      	beq.n	8006230 <xTaskResumeAll+0x108>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
<<<<<<< HEAD
 80061f2:	e02f      	b.n	8006254 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061f4:	4b34      	ldr	r3, [pc, #208]	; (80062c8 <xTaskResumeAll+0x120>)
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	3318      	adds	r3, #24
 8006200:	4618      	mov	r0, r3
 8006202:	f7ff f851 	bl	80052a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	3304      	adds	r3, #4
 800620a:	4618      	mov	r0, r3
 800620c:	f7ff f84c 	bl	80052a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006214:	4b2d      	ldr	r3, [pc, #180]	; (80062cc <xTaskResumeAll+0x124>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	429a      	cmp	r2, r3
 800621a:	d903      	bls.n	8006224 <xTaskResumeAll+0x7c>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006220:	4a2a      	ldr	r2, [pc, #168]	; (80062cc <xTaskResumeAll+0x124>)
 8006222:	6013      	str	r3, [r2, #0]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006228:	4613      	mov	r3, r2
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	4413      	add	r3, r2
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	4a27      	ldr	r2, [pc, #156]	; (80062d0 <xTaskResumeAll+0x128>)
 8006232:	441a      	add	r2, r3
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	3304      	adds	r3, #4
 8006238:	4619      	mov	r1, r3
 800623a:	4610      	mov	r0, r2
 800623c:	f7fe ffd7 	bl	80051ee <vListInsertEnd>
=======
 8006172:	e02f      	b.n	80061d4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006174:	4b34      	ldr	r3, [pc, #208]	; (8006248 <xTaskResumeAll+0x120>)
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	3318      	adds	r3, #24
 8006180:	4618      	mov	r0, r3
 8006182:	f7ff f851 	bl	8005228 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	3304      	adds	r3, #4
 800618a:	4618      	mov	r0, r3
 800618c:	f7ff f84c 	bl	8005228 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006194:	4b2d      	ldr	r3, [pc, #180]	; (800624c <xTaskResumeAll+0x124>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	429a      	cmp	r2, r3
 800619a:	d903      	bls.n	80061a4 <xTaskResumeAll+0x7c>
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a0:	4a2a      	ldr	r2, [pc, #168]	; (800624c <xTaskResumeAll+0x124>)
 80061a2:	6013      	str	r3, [r2, #0]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061a8:	4613      	mov	r3, r2
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	4413      	add	r3, r2
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	4a27      	ldr	r2, [pc, #156]	; (8006250 <xTaskResumeAll+0x128>)
 80061b2:	441a      	add	r2, r3
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	3304      	adds	r3, #4
 80061b8:	4619      	mov	r1, r3
 80061ba:	4610      	mov	r0, r2
 80061bc:	f7fe ffd7 	bl	800516e <vListInsertEnd>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
<<<<<<< HEAD
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006244:	4b23      	ldr	r3, [pc, #140]	; (80062d4 <xTaskResumeAll+0x12c>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800624a:	429a      	cmp	r2, r3
 800624c:	d302      	bcc.n	8006254 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800624e:	4b22      	ldr	r3, [pc, #136]	; (80062d8 <xTaskResumeAll+0x130>)
 8006250:	2201      	movs	r2, #1
 8006252:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006254:	4b1c      	ldr	r3, [pc, #112]	; (80062c8 <xTaskResumeAll+0x120>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d1cb      	bne.n	80061f4 <xTaskResumeAll+0x4c>
=======
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061c4:	4b23      	ldr	r3, [pc, #140]	; (8006254 <xTaskResumeAll+0x12c>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d302      	bcc.n	80061d4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80061ce:	4b22      	ldr	r3, [pc, #136]	; (8006258 <xTaskResumeAll+0x130>)
 80061d0:	2201      	movs	r2, #1
 80061d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80061d4:	4b1c      	ldr	r3, [pc, #112]	; (8006248 <xTaskResumeAll+0x120>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d1cb      	bne.n	8006174 <xTaskResumeAll+0x4c>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
<<<<<<< HEAD
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d001      	beq.n	8006266 <xTaskResumeAll+0xbe>
=======
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d001      	beq.n	80061e6 <xTaskResumeAll+0xbe>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
<<<<<<< HEAD
 8006262:	f000 fb5f 	bl	8006924 <prvResetNextTaskUnblockTime>
=======
 80061e2:	f000 fb5f 	bl	80068a4 <prvResetNextTaskUnblockTime>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
<<<<<<< HEAD
 8006266:	4b1d      	ldr	r3, [pc, #116]	; (80062dc <xTaskResumeAll+0x134>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d010      	beq.n	8006294 <xTaskResumeAll+0xec>
=======
 80061e6:	4b1d      	ldr	r3, [pc, #116]	; (800625c <xTaskResumeAll+0x134>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d010      	beq.n	8006214 <xTaskResumeAll+0xec>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
<<<<<<< HEAD
 8006272:	f000 f847 	bl	8006304 <xTaskIncrementTick>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d002      	beq.n	8006282 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800627c:	4b16      	ldr	r3, [pc, #88]	; (80062d8 <xTaskResumeAll+0x130>)
 800627e:	2201      	movs	r2, #1
 8006280:	601a      	str	r2, [r3, #0]
=======
 80061f2:	f000 f847 	bl	8006284 <xTaskIncrementTick>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d002      	beq.n	8006202 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80061fc:	4b16      	ldr	r3, [pc, #88]	; (8006258 <xTaskResumeAll+0x130>)
 80061fe:	2201      	movs	r2, #1
 8006200:	601a      	str	r2, [r3, #0]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
<<<<<<< HEAD
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	3b01      	subs	r3, #1
 8006286:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d1f1      	bne.n	8006272 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800628e:	4b13      	ldr	r3, [pc, #76]	; (80062dc <xTaskResumeAll+0x134>)
 8006290:	2200      	movs	r2, #0
 8006292:	601a      	str	r2, [r3, #0]
=======
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	3b01      	subs	r3, #1
 8006206:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d1f1      	bne.n	80061f2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800620e:	4b13      	ldr	r3, [pc, #76]	; (800625c <xTaskResumeAll+0x134>)
 8006210:	2200      	movs	r2, #0
 8006212:	601a      	str	r2, [r3, #0]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
<<<<<<< HEAD
 8006294:	4b10      	ldr	r3, [pc, #64]	; (80062d8 <xTaskResumeAll+0x130>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d009      	beq.n	80062b0 <xTaskResumeAll+0x108>
=======
 8006214:	4b10      	ldr	r3, [pc, #64]	; (8006258 <xTaskResumeAll+0x130>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d009      	beq.n	8006230 <xTaskResumeAll+0x108>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
<<<<<<< HEAD
 800629c:	2301      	movs	r3, #1
 800629e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80062a0:	4b0f      	ldr	r3, [pc, #60]	; (80062e0 <xTaskResumeAll+0x138>)
 80062a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062a6:	601a      	str	r2, [r3, #0]
 80062a8:	f3bf 8f4f 	dsb	sy
 80062ac:	f3bf 8f6f 	isb	sy
=======
 800621c:	2301      	movs	r3, #1
 800621e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006220:	4b0f      	ldr	r3, [pc, #60]	; (8006260 <xTaskResumeAll+0x138>)
 8006222:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006226:	601a      	str	r2, [r3, #0]
 8006228:	f3bf 8f4f 	dsb	sy
 800622c:	f3bf 8f6f 	isb	sy
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
 80062b0:	f001 f8e0 	bl	8007474 <vPortExitCritical>

	return xAlreadyYielded;
 80062b4:	68bb      	ldr	r3, [r7, #8]
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	200013f0 	.word	0x200013f0
 80062c4:	200013c8 	.word	0x200013c8
 80062c8:	20001388 	.word	0x20001388
 80062cc:	200013d0 	.word	0x200013d0
 80062d0:	20000ef8 	.word	0x20000ef8
 80062d4:	20000ef4 	.word	0x20000ef4
 80062d8:	200013dc 	.word	0x200013dc
 80062dc:	200013d8 	.word	0x200013d8
 80062e0:	e000ed04 	.word	0xe000ed04

080062e4 <xTaskGetTickCount>:
=======
 8006230:	f001 f8e0 	bl	80073f4 <vPortExitCritical>

	return xAlreadyYielded;
 8006234:	68bb      	ldr	r3, [r7, #8]
}
 8006236:	4618      	mov	r0, r3
 8006238:	3710      	adds	r7, #16
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	2000142c 	.word	0x2000142c
 8006244:	20001404 	.word	0x20001404
 8006248:	200013c4 	.word	0x200013c4
 800624c:	2000140c 	.word	0x2000140c
 8006250:	20000f34 	.word	0x20000f34
 8006254:	20000f30 	.word	0x20000f30
 8006258:	20001418 	.word	0x20001418
 800625c:	20001414 	.word	0x20001414
 8006260:	e000ed04 	.word	0xe000ed04

08006264 <xTaskGetTickCount>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
<<<<<<< HEAD
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
=======
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
<<<<<<< HEAD
 80062ea:	4b05      	ldr	r3, [pc, #20]	; (8006300 <xTaskGetTickCount+0x1c>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	607b      	str	r3, [r7, #4]
=======
 800626a:	4b05      	ldr	r3, [pc, #20]	; (8006280 <xTaskGetTickCount+0x1c>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	607b      	str	r3, [r7, #4]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
<<<<<<< HEAD
 80062f0:	687b      	ldr	r3, [r7, #4]
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	370c      	adds	r7, #12
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr
 80062fe:	bf00      	nop
 8006300:	200013cc 	.word	0x200013cc

08006304 <xTaskIncrementTick>:
=======
 8006270:	687b      	ldr	r3, [r7, #4]
}
 8006272:	4618      	mov	r0, r3
 8006274:	370c      	adds	r7, #12
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	20001408 	.word	0x20001408

08006284 <xTaskIncrementTick>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
<<<<<<< HEAD
 8006304:	b580      	push	{r7, lr}
 8006306:	b086      	sub	sp, #24
 8006308:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800630a:	2300      	movs	r3, #0
 800630c:	617b      	str	r3, [r7, #20]
=======
 8006284:	b580      	push	{r7, lr}
 8006286:	b086      	sub	sp, #24
 8006288:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800628a:	2300      	movs	r3, #0
 800628c:	617b      	str	r3, [r7, #20]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
<<<<<<< HEAD
 800630e:	4b4f      	ldr	r3, [pc, #316]	; (800644c <xTaskIncrementTick+0x148>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	f040 808f 	bne.w	8006436 <xTaskIncrementTick+0x132>
=======
 800628e:	4b4f      	ldr	r3, [pc, #316]	; (80063cc <xTaskIncrementTick+0x148>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2b00      	cmp	r3, #0
 8006294:	f040 808f 	bne.w	80063b6 <xTaskIncrementTick+0x132>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
<<<<<<< HEAD
 8006318:	4b4d      	ldr	r3, [pc, #308]	; (8006450 <xTaskIncrementTick+0x14c>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	3301      	adds	r3, #1
 800631e:	613b      	str	r3, [r7, #16]
=======
 8006298:	4b4d      	ldr	r3, [pc, #308]	; (80063d0 <xTaskIncrementTick+0x14c>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	3301      	adds	r3, #1
 800629e:	613b      	str	r3, [r7, #16]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
<<<<<<< HEAD
 8006320:	4a4b      	ldr	r2, [pc, #300]	; (8006450 <xTaskIncrementTick+0x14c>)
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d120      	bne.n	800636e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800632c:	4b49      	ldr	r3, [pc, #292]	; (8006454 <xTaskIncrementTick+0x150>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00a      	beq.n	800634c <xTaskIncrementTick+0x48>
	__asm volatile
 8006336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800633a:	f383 8811 	msr	BASEPRI, r3
 800633e:	f3bf 8f6f 	isb	sy
 8006342:	f3bf 8f4f 	dsb	sy
 8006346:	603b      	str	r3, [r7, #0]
}
 8006348:	bf00      	nop
 800634a:	e7fe      	b.n	800634a <xTaskIncrementTick+0x46>
 800634c:	4b41      	ldr	r3, [pc, #260]	; (8006454 <xTaskIncrementTick+0x150>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	60fb      	str	r3, [r7, #12]
 8006352:	4b41      	ldr	r3, [pc, #260]	; (8006458 <xTaskIncrementTick+0x154>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a3f      	ldr	r2, [pc, #252]	; (8006454 <xTaskIncrementTick+0x150>)
 8006358:	6013      	str	r3, [r2, #0]
 800635a:	4a3f      	ldr	r2, [pc, #252]	; (8006458 <xTaskIncrementTick+0x154>)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6013      	str	r3, [r2, #0]
 8006360:	4b3e      	ldr	r3, [pc, #248]	; (800645c <xTaskIncrementTick+0x158>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	3301      	adds	r3, #1
 8006366:	4a3d      	ldr	r2, [pc, #244]	; (800645c <xTaskIncrementTick+0x158>)
 8006368:	6013      	str	r3, [r2, #0]
 800636a:	f000 fadb 	bl	8006924 <prvResetNextTaskUnblockTime>
=======
 80062a0:	4a4b      	ldr	r2, [pc, #300]	; (80063d0 <xTaskIncrementTick+0x14c>)
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d120      	bne.n	80062ee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80062ac:	4b49      	ldr	r3, [pc, #292]	; (80063d4 <xTaskIncrementTick+0x150>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00a      	beq.n	80062cc <xTaskIncrementTick+0x48>
	__asm volatile
 80062b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ba:	f383 8811 	msr	BASEPRI, r3
 80062be:	f3bf 8f6f 	isb	sy
 80062c2:	f3bf 8f4f 	dsb	sy
 80062c6:	603b      	str	r3, [r7, #0]
}
 80062c8:	bf00      	nop
 80062ca:	e7fe      	b.n	80062ca <xTaskIncrementTick+0x46>
 80062cc:	4b41      	ldr	r3, [pc, #260]	; (80063d4 <xTaskIncrementTick+0x150>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	60fb      	str	r3, [r7, #12]
 80062d2:	4b41      	ldr	r3, [pc, #260]	; (80063d8 <xTaskIncrementTick+0x154>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a3f      	ldr	r2, [pc, #252]	; (80063d4 <xTaskIncrementTick+0x150>)
 80062d8:	6013      	str	r3, [r2, #0]
 80062da:	4a3f      	ldr	r2, [pc, #252]	; (80063d8 <xTaskIncrementTick+0x154>)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6013      	str	r3, [r2, #0]
 80062e0:	4b3e      	ldr	r3, [pc, #248]	; (80063dc <xTaskIncrementTick+0x158>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	3301      	adds	r3, #1
 80062e6:	4a3d      	ldr	r2, [pc, #244]	; (80063dc <xTaskIncrementTick+0x158>)
 80062e8:	6013      	str	r3, [r2, #0]
 80062ea:	f000 fadb 	bl	80068a4 <prvResetNextTaskUnblockTime>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
<<<<<<< HEAD
 800636e:	4b3c      	ldr	r3, [pc, #240]	; (8006460 <xTaskIncrementTick+0x15c>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	693a      	ldr	r2, [r7, #16]
 8006374:	429a      	cmp	r2, r3
 8006376:	d349      	bcc.n	800640c <xTaskIncrementTick+0x108>
=======
 80062ee:	4b3c      	ldr	r3, [pc, #240]	; (80063e0 <xTaskIncrementTick+0x15c>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	693a      	ldr	r2, [r7, #16]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d349      	bcc.n	800638c <xTaskIncrementTick+0x108>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
<<<<<<< HEAD
 8006378:	4b36      	ldr	r3, [pc, #216]	; (8006454 <xTaskIncrementTick+0x150>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d104      	bne.n	800638c <xTaskIncrementTick+0x88>
=======
 80062f8:	4b36      	ldr	r3, [pc, #216]	; (80063d4 <xTaskIncrementTick+0x150>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d104      	bne.n	800630c <xTaskIncrementTick+0x88>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< HEAD
 8006382:	4b37      	ldr	r3, [pc, #220]	; (8006460 <xTaskIncrementTick+0x15c>)
 8006384:	f04f 32ff 	mov.w	r2, #4294967295
 8006388:	601a      	str	r2, [r3, #0]
					break;
 800638a:	e03f      	b.n	800640c <xTaskIncrementTick+0x108>
=======
 8006302:	4b37      	ldr	r3, [pc, #220]	; (80063e0 <xTaskIncrementTick+0x15c>)
 8006304:	f04f 32ff 	mov.w	r2, #4294967295
 8006308:	601a      	str	r2, [r3, #0]
					break;
 800630a:	e03f      	b.n	800638c <xTaskIncrementTick+0x108>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
<<<<<<< HEAD
 800638c:	4b31      	ldr	r3, [pc, #196]	; (8006454 <xTaskIncrementTick+0x150>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800639c:	693a      	ldr	r2, [r7, #16]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d203      	bcs.n	80063ac <xTaskIncrementTick+0xa8>
=======
 800630c:	4b31      	ldr	r3, [pc, #196]	; (80063d4 <xTaskIncrementTick+0x150>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800631c:	693a      	ldr	r2, [r7, #16]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	429a      	cmp	r2, r3
 8006322:	d203      	bcs.n	800632c <xTaskIncrementTick+0xa8>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
<<<<<<< HEAD
 80063a4:	4a2e      	ldr	r2, [pc, #184]	; (8006460 <xTaskIncrementTick+0x15c>)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80063aa:	e02f      	b.n	800640c <xTaskIncrementTick+0x108>
=======
 8006324:	4a2e      	ldr	r2, [pc, #184]	; (80063e0 <xTaskIncrementTick+0x15c>)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800632a:	e02f      	b.n	800638c <xTaskIncrementTick+0x108>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
<<<<<<< HEAD
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	3304      	adds	r3, #4
 80063b0:	4618      	mov	r0, r3
 80063b2:	f7fe ff79 	bl	80052a8 <uxListRemove>
=======
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	3304      	adds	r3, #4
 8006330:	4618      	mov	r0, r3
 8006332:	f7fe ff79 	bl	8005228 <uxListRemove>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
<<<<<<< HEAD
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d004      	beq.n	80063c8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	3318      	adds	r3, #24
 80063c2:	4618      	mov	r0, r3
 80063c4:	f7fe ff70 	bl	80052a8 <uxListRemove>
=======
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800633a:	2b00      	cmp	r3, #0
 800633c:	d004      	beq.n	8006348 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	3318      	adds	r3, #24
 8006342:	4618      	mov	r0, r3
 8006344:	f7fe ff70 	bl	8005228 <uxListRemove>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
<<<<<<< HEAD
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063cc:	4b25      	ldr	r3, [pc, #148]	; (8006464 <xTaskIncrementTick+0x160>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d903      	bls.n	80063dc <xTaskIncrementTick+0xd8>
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d8:	4a22      	ldr	r2, [pc, #136]	; (8006464 <xTaskIncrementTick+0x160>)
 80063da:	6013      	str	r3, [r2, #0]
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063e0:	4613      	mov	r3, r2
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	4413      	add	r3, r2
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	4a1f      	ldr	r2, [pc, #124]	; (8006468 <xTaskIncrementTick+0x164>)
 80063ea:	441a      	add	r2, r3
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	3304      	adds	r3, #4
 80063f0:	4619      	mov	r1, r3
 80063f2:	4610      	mov	r0, r2
 80063f4:	f7fe fefb 	bl	80051ee <vListInsertEnd>
=======
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800634c:	4b25      	ldr	r3, [pc, #148]	; (80063e4 <xTaskIncrementTick+0x160>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	429a      	cmp	r2, r3
 8006352:	d903      	bls.n	800635c <xTaskIncrementTick+0xd8>
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006358:	4a22      	ldr	r2, [pc, #136]	; (80063e4 <xTaskIncrementTick+0x160>)
 800635a:	6013      	str	r3, [r2, #0]
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006360:	4613      	mov	r3, r2
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	4413      	add	r3, r2
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	4a1f      	ldr	r2, [pc, #124]	; (80063e8 <xTaskIncrementTick+0x164>)
 800636a:	441a      	add	r2, r3
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	3304      	adds	r3, #4
 8006370:	4619      	mov	r1, r3
 8006372:	4610      	mov	r0, r2
 8006374:	f7fe fefb 	bl	800516e <vListInsertEnd>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
<<<<<<< HEAD
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063fc:	4b1b      	ldr	r3, [pc, #108]	; (800646c <xTaskIncrementTick+0x168>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006402:	429a      	cmp	r2, r3
 8006404:	d3b8      	bcc.n	8006378 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006406:	2301      	movs	r3, #1
 8006408:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800640a:	e7b5      	b.n	8006378 <xTaskIncrementTick+0x74>
=======
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800637c:	4b1b      	ldr	r3, [pc, #108]	; (80063ec <xTaskIncrementTick+0x168>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006382:	429a      	cmp	r2, r3
 8006384:	d3b8      	bcc.n	80062f8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006386:	2301      	movs	r3, #1
 8006388:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800638a:	e7b5      	b.n	80062f8 <xTaskIncrementTick+0x74>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
<<<<<<< HEAD
 800640c:	4b17      	ldr	r3, [pc, #92]	; (800646c <xTaskIncrementTick+0x168>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006412:	4915      	ldr	r1, [pc, #84]	; (8006468 <xTaskIncrementTick+0x164>)
 8006414:	4613      	mov	r3, r2
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	4413      	add	r3, r2
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	440b      	add	r3, r1
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2b01      	cmp	r3, #1
 8006422:	d901      	bls.n	8006428 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006424:	2301      	movs	r3, #1
 8006426:	617b      	str	r3, [r7, #20]
=======
 800638c:	4b17      	ldr	r3, [pc, #92]	; (80063ec <xTaskIncrementTick+0x168>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006392:	4915      	ldr	r1, [pc, #84]	; (80063e8 <xTaskIncrementTick+0x164>)
 8006394:	4613      	mov	r3, r2
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	4413      	add	r3, r2
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	440b      	add	r3, r1
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d901      	bls.n	80063a8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80063a4:	2301      	movs	r3, #1
 80063a6:	617b      	str	r3, [r7, #20]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
<<<<<<< HEAD
 8006428:	4b11      	ldr	r3, [pc, #68]	; (8006470 <xTaskIncrementTick+0x16c>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d007      	beq.n	8006440 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006430:	2301      	movs	r3, #1
 8006432:	617b      	str	r3, [r7, #20]
 8006434:	e004      	b.n	8006440 <xTaskIncrementTick+0x13c>
=======
 80063a8:	4b11      	ldr	r3, [pc, #68]	; (80063f0 <xTaskIncrementTick+0x16c>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d007      	beq.n	80063c0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80063b0:	2301      	movs	r3, #1
 80063b2:	617b      	str	r3, [r7, #20]
 80063b4:	e004      	b.n	80063c0 <xTaskIncrementTick+0x13c>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
<<<<<<< HEAD
 8006436:	4b0f      	ldr	r3, [pc, #60]	; (8006474 <xTaskIncrementTick+0x170>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	3301      	adds	r3, #1
 800643c:	4a0d      	ldr	r2, [pc, #52]	; (8006474 <xTaskIncrementTick+0x170>)
 800643e:	6013      	str	r3, [r2, #0]
=======
 80063b6:	4b0f      	ldr	r3, [pc, #60]	; (80063f4 <xTaskIncrementTick+0x170>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	3301      	adds	r3, #1
 80063bc:	4a0d      	ldr	r2, [pc, #52]	; (80063f4 <xTaskIncrementTick+0x170>)
 80063be:	6013      	str	r3, [r2, #0]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
<<<<<<< HEAD
 8006440:	697b      	ldr	r3, [r7, #20]
}
 8006442:	4618      	mov	r0, r3
 8006444:	3718      	adds	r7, #24
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	200013f0 	.word	0x200013f0
 8006450:	200013cc 	.word	0x200013cc
 8006454:	20001380 	.word	0x20001380
 8006458:	20001384 	.word	0x20001384
 800645c:	200013e0 	.word	0x200013e0
 8006460:	200013e8 	.word	0x200013e8
 8006464:	200013d0 	.word	0x200013d0
 8006468:	20000ef8 	.word	0x20000ef8
 800646c:	20000ef4 	.word	0x20000ef4
 8006470:	200013dc 	.word	0x200013dc
 8006474:	200013d8 	.word	0x200013d8

08006478 <vTaskSwitchContext>:
=======
 80063c0:	697b      	ldr	r3, [r7, #20]
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3718      	adds	r7, #24
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	2000142c 	.word	0x2000142c
 80063d0:	20001408 	.word	0x20001408
 80063d4:	200013bc 	.word	0x200013bc
 80063d8:	200013c0 	.word	0x200013c0
 80063dc:	2000141c 	.word	0x2000141c
 80063e0:	20001424 	.word	0x20001424
 80063e4:	2000140c 	.word	0x2000140c
 80063e8:	20000f34 	.word	0x20000f34
 80063ec:	20000f30 	.word	0x20000f30
 80063f0:	20001418 	.word	0x20001418
 80063f4:	20001414 	.word	0x20001414

080063f8 <vTaskSwitchContext>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
<<<<<<< HEAD
 8006478:	b480      	push	{r7}
 800647a:	b085      	sub	sp, #20
 800647c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800647e:	4b2a      	ldr	r3, [pc, #168]	; (8006528 <vTaskSwitchContext+0xb0>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d003      	beq.n	800648e <vTaskSwitchContext+0x16>
=======
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80063fe:	4b2a      	ldr	r3, [pc, #168]	; (80064a8 <vTaskSwitchContext+0xb0>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d003      	beq.n	800640e <vTaskSwitchContext+0x16>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
<<<<<<< HEAD
 8006486:	4b29      	ldr	r3, [pc, #164]	; (800652c <vTaskSwitchContext+0xb4>)
 8006488:	2201      	movs	r2, #1
 800648a:	601a      	str	r2, [r3, #0]
=======
 8006406:	4b29      	ldr	r3, [pc, #164]	; (80064ac <vTaskSwitchContext+0xb4>)
 8006408:	2201      	movs	r2, #1
 800640a:	601a      	str	r2, [r3, #0]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
<<<<<<< HEAD
 800648c:	e046      	b.n	800651c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800648e:	4b27      	ldr	r3, [pc, #156]	; (800652c <vTaskSwitchContext+0xb4>)
 8006490:	2200      	movs	r2, #0
 8006492:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006494:	4b26      	ldr	r3, [pc, #152]	; (8006530 <vTaskSwitchContext+0xb8>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	60fb      	str	r3, [r7, #12]
 800649a:	e010      	b.n	80064be <vTaskSwitchContext+0x46>
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d10a      	bne.n	80064b8 <vTaskSwitchContext+0x40>
	__asm volatile
 80064a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a6:	f383 8811 	msr	BASEPRI, r3
 80064aa:	f3bf 8f6f 	isb	sy
 80064ae:	f3bf 8f4f 	dsb	sy
 80064b2:	607b      	str	r3, [r7, #4]
}
 80064b4:	bf00      	nop
 80064b6:	e7fe      	b.n	80064b6 <vTaskSwitchContext+0x3e>
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	3b01      	subs	r3, #1
 80064bc:	60fb      	str	r3, [r7, #12]
 80064be:	491d      	ldr	r1, [pc, #116]	; (8006534 <vTaskSwitchContext+0xbc>)
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	4613      	mov	r3, r2
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	4413      	add	r3, r2
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	440b      	add	r3, r1
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d0e4      	beq.n	800649c <vTaskSwitchContext+0x24>
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	4613      	mov	r3, r2
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	4413      	add	r3, r2
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	4a15      	ldr	r2, [pc, #84]	; (8006534 <vTaskSwitchContext+0xbc>)
 80064de:	4413      	add	r3, r2
 80064e0:	60bb      	str	r3, [r7, #8]
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	685a      	ldr	r2, [r3, #4]
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	605a      	str	r2, [r3, #4]
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	685a      	ldr	r2, [r3, #4]
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	3308      	adds	r3, #8
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d104      	bne.n	8006502 <vTaskSwitchContext+0x8a>
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	685a      	ldr	r2, [r3, #4]
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	605a      	str	r2, [r3, #4]
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	4a0b      	ldr	r2, [pc, #44]	; (8006538 <vTaskSwitchContext+0xc0>)
 800650a:	6013      	str	r3, [r2, #0]
 800650c:	4a08      	ldr	r2, [pc, #32]	; (8006530 <vTaskSwitchContext+0xb8>)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006512:	4b09      	ldr	r3, [pc, #36]	; (8006538 <vTaskSwitchContext+0xc0>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	3354      	adds	r3, #84	; 0x54
 8006518:	4a08      	ldr	r2, [pc, #32]	; (800653c <vTaskSwitchContext+0xc4>)
 800651a:	6013      	str	r3, [r2, #0]
}
 800651c:	bf00      	nop
 800651e:	3714      	adds	r7, #20
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr
 8006528:	200013f0 	.word	0x200013f0
 800652c:	200013dc 	.word	0x200013dc
 8006530:	200013d0 	.word	0x200013d0
 8006534:	20000ef8 	.word	0x20000ef8
 8006538:	20000ef4 	.word	0x20000ef4
 800653c:	2000005c 	.word	0x2000005c

08006540 <vTaskPlaceOnEventList>:
=======
 800640c:	e046      	b.n	800649c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800640e:	4b27      	ldr	r3, [pc, #156]	; (80064ac <vTaskSwitchContext+0xb4>)
 8006410:	2200      	movs	r2, #0
 8006412:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006414:	4b26      	ldr	r3, [pc, #152]	; (80064b0 <vTaskSwitchContext+0xb8>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	60fb      	str	r3, [r7, #12]
 800641a:	e010      	b.n	800643e <vTaskSwitchContext+0x46>
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d10a      	bne.n	8006438 <vTaskSwitchContext+0x40>
	__asm volatile
 8006422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006426:	f383 8811 	msr	BASEPRI, r3
 800642a:	f3bf 8f6f 	isb	sy
 800642e:	f3bf 8f4f 	dsb	sy
 8006432:	607b      	str	r3, [r7, #4]
}
 8006434:	bf00      	nop
 8006436:	e7fe      	b.n	8006436 <vTaskSwitchContext+0x3e>
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	3b01      	subs	r3, #1
 800643c:	60fb      	str	r3, [r7, #12]
 800643e:	491d      	ldr	r1, [pc, #116]	; (80064b4 <vTaskSwitchContext+0xbc>)
 8006440:	68fa      	ldr	r2, [r7, #12]
 8006442:	4613      	mov	r3, r2
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	4413      	add	r3, r2
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	440b      	add	r3, r1
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d0e4      	beq.n	800641c <vTaskSwitchContext+0x24>
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	4613      	mov	r3, r2
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	4413      	add	r3, r2
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	4a15      	ldr	r2, [pc, #84]	; (80064b4 <vTaskSwitchContext+0xbc>)
 800645e:	4413      	add	r3, r2
 8006460:	60bb      	str	r3, [r7, #8]
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	685a      	ldr	r2, [r3, #4]
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	605a      	str	r2, [r3, #4]
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	685a      	ldr	r2, [r3, #4]
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	3308      	adds	r3, #8
 8006474:	429a      	cmp	r2, r3
 8006476:	d104      	bne.n	8006482 <vTaskSwitchContext+0x8a>
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	685a      	ldr	r2, [r3, #4]
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	605a      	str	r2, [r3, #4]
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	4a0b      	ldr	r2, [pc, #44]	; (80064b8 <vTaskSwitchContext+0xc0>)
 800648a:	6013      	str	r3, [r2, #0]
 800648c:	4a08      	ldr	r2, [pc, #32]	; (80064b0 <vTaskSwitchContext+0xb8>)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006492:	4b09      	ldr	r3, [pc, #36]	; (80064b8 <vTaskSwitchContext+0xc0>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	3354      	adds	r3, #84	; 0x54
 8006498:	4a08      	ldr	r2, [pc, #32]	; (80064bc <vTaskSwitchContext+0xc4>)
 800649a:	6013      	str	r3, [r2, #0]
}
 800649c:	bf00      	nop
 800649e:	3714      	adds	r7, #20
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr
 80064a8:	2000142c 	.word	0x2000142c
 80064ac:	20001418 	.word	0x20001418
 80064b0:	2000140c 	.word	0x2000140c
 80064b4:	20000f34 	.word	0x20000f34
 80064b8:	20000f30 	.word	0x20000f30
 80064bc:	20000010 	.word	0x20000010

080064c0 <vTaskPlaceOnEventList>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
<<<<<<< HEAD
 8006540:	b580      	push	{r7, lr}
 8006542:	b084      	sub	sp, #16
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d10a      	bne.n	8006566 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006554:	f383 8811 	msr	BASEPRI, r3
 8006558:	f3bf 8f6f 	isb	sy
 800655c:	f3bf 8f4f 	dsb	sy
 8006560:	60fb      	str	r3, [r7, #12]
}
 8006562:	bf00      	nop
 8006564:	e7fe      	b.n	8006564 <vTaskPlaceOnEventList+0x24>
=======
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d10a      	bne.n	80064e6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80064d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d4:	f383 8811 	msr	BASEPRI, r3
 80064d8:	f3bf 8f6f 	isb	sy
 80064dc:	f3bf 8f4f 	dsb	sy
 80064e0:	60fb      	str	r3, [r7, #12]
}
 80064e2:	bf00      	nop
 80064e4:	e7fe      	b.n	80064e4 <vTaskPlaceOnEventList+0x24>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
<<<<<<< HEAD
 8006566:	4b07      	ldr	r3, [pc, #28]	; (8006584 <vTaskPlaceOnEventList+0x44>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	3318      	adds	r3, #24
 800656c:	4619      	mov	r1, r3
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f7fe fe61 	bl	8005236 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006574:	2101      	movs	r1, #1
 8006576:	6838      	ldr	r0, [r7, #0]
 8006578:	f000 fa80 	bl	8006a7c <prvAddCurrentTaskToDelayedList>
}
 800657c:	bf00      	nop
 800657e:	3710      	adds	r7, #16
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}
 8006584:	20000ef4 	.word	0x20000ef4

08006588 <vTaskPlaceOnEventListRestricted>:
=======
 80064e6:	4b07      	ldr	r3, [pc, #28]	; (8006504 <vTaskPlaceOnEventList+0x44>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	3318      	adds	r3, #24
 80064ec:	4619      	mov	r1, r3
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f7fe fe61 	bl	80051b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80064f4:	2101      	movs	r1, #1
 80064f6:	6838      	ldr	r0, [r7, #0]
 80064f8:	f000 fa80 	bl	80069fc <prvAddCurrentTaskToDelayedList>
}
 80064fc:	bf00      	nop
 80064fe:	3710      	adds	r7, #16
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}
 8006504:	20000f30 	.word	0x20000f30

08006508 <vTaskPlaceOnEventListRestricted>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
<<<<<<< HEAD
 8006588:	b580      	push	{r7, lr}
 800658a:	b086      	sub	sp, #24
 800658c:	af00      	add	r7, sp, #0
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	60b9      	str	r1, [r7, #8]
 8006592:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d10a      	bne.n	80065b0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800659a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659e:	f383 8811 	msr	BASEPRI, r3
 80065a2:	f3bf 8f6f 	isb	sy
 80065a6:	f3bf 8f4f 	dsb	sy
 80065aa:	617b      	str	r3, [r7, #20]
}
 80065ac:	bf00      	nop
 80065ae:	e7fe      	b.n	80065ae <vTaskPlaceOnEventListRestricted+0x26>
=======
 8006508:	b580      	push	{r7, lr}
 800650a:	b086      	sub	sp, #24
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d10a      	bne.n	8006530 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800651a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800651e:	f383 8811 	msr	BASEPRI, r3
 8006522:	f3bf 8f6f 	isb	sy
 8006526:	f3bf 8f4f 	dsb	sy
 800652a:	617b      	str	r3, [r7, #20]
}
 800652c:	bf00      	nop
 800652e:	e7fe      	b.n	800652e <vTaskPlaceOnEventListRestricted+0x26>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
<<<<<<< HEAD
 80065b0:	4b0a      	ldr	r3, [pc, #40]	; (80065dc <vTaskPlaceOnEventListRestricted+0x54>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	3318      	adds	r3, #24
 80065b6:	4619      	mov	r1, r3
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	f7fe fe18 	bl	80051ee <vListInsertEnd>
=======
 8006530:	4b0a      	ldr	r3, [pc, #40]	; (800655c <vTaskPlaceOnEventListRestricted+0x54>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	3318      	adds	r3, #24
 8006536:	4619      	mov	r1, r3
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f7fe fe18 	bl	800516e <vListInsertEnd>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
<<<<<<< HEAD
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d002      	beq.n	80065ca <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80065c4:	f04f 33ff 	mov.w	r3, #4294967295
 80065c8:	60bb      	str	r3, [r7, #8]
=======
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d002      	beq.n	800654a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006544:	f04f 33ff 	mov.w	r3, #4294967295
 8006548:	60bb      	str	r3, [r7, #8]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
<<<<<<< HEAD
 80065ca:	6879      	ldr	r1, [r7, #4]
 80065cc:	68b8      	ldr	r0, [r7, #8]
 80065ce:	f000 fa55 	bl	8006a7c <prvAddCurrentTaskToDelayedList>
	}
 80065d2:	bf00      	nop
 80065d4:	3718      	adds	r7, #24
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	20000ef4 	.word	0x20000ef4

080065e0 <xTaskRemoveFromEventList>:
=======
 800654a:	6879      	ldr	r1, [r7, #4]
 800654c:	68b8      	ldr	r0, [r7, #8]
 800654e:	f000 fa55 	bl	80069fc <prvAddCurrentTaskToDelayedList>
	}
 8006552:	bf00      	nop
 8006554:	3718      	adds	r7, #24
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop
 800655c:	20000f30 	.word	0x20000f30

08006560 <xTaskRemoveFromEventList>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
<<<<<<< HEAD
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b086      	sub	sp, #24
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
=======
 8006560:	b580      	push	{r7, lr}
 8006562:	b086      	sub	sp, #24
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
<<<<<<< HEAD
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d10a      	bne.n	800660c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80065f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fa:	f383 8811 	msr	BASEPRI, r3
 80065fe:	f3bf 8f6f 	isb	sy
 8006602:	f3bf 8f4f 	dsb	sy
 8006606:	60fb      	str	r3, [r7, #12]
}
 8006608:	bf00      	nop
 800660a:	e7fe      	b.n	800660a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	3318      	adds	r3, #24
 8006610:	4618      	mov	r0, r3
 8006612:	f7fe fe49 	bl	80052a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006616:	4b1e      	ldr	r3, [pc, #120]	; (8006690 <xTaskRemoveFromEventList+0xb0>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d11d      	bne.n	800665a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	3304      	adds	r3, #4
 8006622:	4618      	mov	r0, r3
 8006624:	f7fe fe40 	bl	80052a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800662c:	4b19      	ldr	r3, [pc, #100]	; (8006694 <xTaskRemoveFromEventList+0xb4>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	429a      	cmp	r2, r3
 8006632:	d903      	bls.n	800663c <xTaskRemoveFromEventList+0x5c>
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006638:	4a16      	ldr	r2, [pc, #88]	; (8006694 <xTaskRemoveFromEventList+0xb4>)
 800663a:	6013      	str	r3, [r2, #0]
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006640:	4613      	mov	r3, r2
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	4413      	add	r3, r2
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	4a13      	ldr	r2, [pc, #76]	; (8006698 <xTaskRemoveFromEventList+0xb8>)
 800664a:	441a      	add	r2, r3
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	3304      	adds	r3, #4
 8006650:	4619      	mov	r1, r3
 8006652:	4610      	mov	r0, r2
 8006654:	f7fe fdcb 	bl	80051ee <vListInsertEnd>
 8006658:	e005      	b.n	8006666 <xTaskRemoveFromEventList+0x86>
=======
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d10a      	bne.n	800658c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657a:	f383 8811 	msr	BASEPRI, r3
 800657e:	f3bf 8f6f 	isb	sy
 8006582:	f3bf 8f4f 	dsb	sy
 8006586:	60fb      	str	r3, [r7, #12]
}
 8006588:	bf00      	nop
 800658a:	e7fe      	b.n	800658a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	3318      	adds	r3, #24
 8006590:	4618      	mov	r0, r3
 8006592:	f7fe fe49 	bl	8005228 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006596:	4b1e      	ldr	r3, [pc, #120]	; (8006610 <xTaskRemoveFromEventList+0xb0>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d11d      	bne.n	80065da <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	3304      	adds	r3, #4
 80065a2:	4618      	mov	r0, r3
 80065a4:	f7fe fe40 	bl	8005228 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065ac:	4b19      	ldr	r3, [pc, #100]	; (8006614 <xTaskRemoveFromEventList+0xb4>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d903      	bls.n	80065bc <xTaskRemoveFromEventList+0x5c>
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b8:	4a16      	ldr	r2, [pc, #88]	; (8006614 <xTaskRemoveFromEventList+0xb4>)
 80065ba:	6013      	str	r3, [r2, #0]
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065c0:	4613      	mov	r3, r2
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	4413      	add	r3, r2
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	4a13      	ldr	r2, [pc, #76]	; (8006618 <xTaskRemoveFromEventList+0xb8>)
 80065ca:	441a      	add	r2, r3
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	3304      	adds	r3, #4
 80065d0:	4619      	mov	r1, r3
 80065d2:	4610      	mov	r0, r2
 80065d4:	f7fe fdcb 	bl	800516e <vListInsertEnd>
 80065d8:	e005      	b.n	80065e6 <xTaskRemoveFromEventList+0x86>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
<<<<<<< HEAD
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	3318      	adds	r3, #24
 800665e:	4619      	mov	r1, r3
 8006660:	480e      	ldr	r0, [pc, #56]	; (800669c <xTaskRemoveFromEventList+0xbc>)
 8006662:	f7fe fdc4 	bl	80051ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800666a:	4b0d      	ldr	r3, [pc, #52]	; (80066a0 <xTaskRemoveFromEventList+0xc0>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006670:	429a      	cmp	r2, r3
 8006672:	d905      	bls.n	8006680 <xTaskRemoveFromEventList+0xa0>
=======
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	3318      	adds	r3, #24
 80065de:	4619      	mov	r1, r3
 80065e0:	480e      	ldr	r0, [pc, #56]	; (800661c <xTaskRemoveFromEventList+0xbc>)
 80065e2:	f7fe fdc4 	bl	800516e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065ea:	4b0d      	ldr	r3, [pc, #52]	; (8006620 <xTaskRemoveFromEventList+0xc0>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d905      	bls.n	8006600 <xTaskRemoveFromEventList+0xa0>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
<<<<<<< HEAD
 8006674:	2301      	movs	r3, #1
 8006676:	617b      	str	r3, [r7, #20]
=======
 80065f4:	2301      	movs	r3, #1
 80065f6:	617b      	str	r3, [r7, #20]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
<<<<<<< HEAD
 8006678:	4b0a      	ldr	r3, [pc, #40]	; (80066a4 <xTaskRemoveFromEventList+0xc4>)
 800667a:	2201      	movs	r2, #1
 800667c:	601a      	str	r2, [r3, #0]
 800667e:	e001      	b.n	8006684 <xTaskRemoveFromEventList+0xa4>
=======
 80065f8:	4b0a      	ldr	r3, [pc, #40]	; (8006624 <xTaskRemoveFromEventList+0xc4>)
 80065fa:	2201      	movs	r2, #1
 80065fc:	601a      	str	r2, [r3, #0]
 80065fe:	e001      	b.n	8006604 <xTaskRemoveFromEventList+0xa4>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	}
	else
	{
		xReturn = pdFALSE;
<<<<<<< HEAD
 8006680:	2300      	movs	r3, #0
 8006682:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006684:	697b      	ldr	r3, [r7, #20]
}
 8006686:	4618      	mov	r0, r3
 8006688:	3718      	adds	r7, #24
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	200013f0 	.word	0x200013f0
 8006694:	200013d0 	.word	0x200013d0
 8006698:	20000ef8 	.word	0x20000ef8
 800669c:	20001388 	.word	0x20001388
 80066a0:	20000ef4 	.word	0x20000ef4
 80066a4:	200013dc 	.word	0x200013dc

080066a8 <vTaskInternalSetTimeOutState>:
=======
 8006600:	2300      	movs	r3, #0
 8006602:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006604:	697b      	ldr	r3, [r7, #20]
}
 8006606:	4618      	mov	r0, r3
 8006608:	3718      	adds	r7, #24
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	2000142c 	.word	0x2000142c
 8006614:	2000140c 	.word	0x2000140c
 8006618:	20000f34 	.word	0x20000f34
 800661c:	200013c4 	.word	0x200013c4
 8006620:	20000f30 	.word	0x20000f30
 8006624:	20001418 	.word	0x20001418

08006628 <vTaskInternalSetTimeOutState>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
<<<<<<< HEAD
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80066b0:	4b06      	ldr	r3, [pc, #24]	; (80066cc <vTaskInternalSetTimeOutState+0x24>)
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80066b8:	4b05      	ldr	r3, [pc, #20]	; (80066d0 <vTaskInternalSetTimeOutState+0x28>)
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	605a      	str	r2, [r3, #4]
}
 80066c0:	bf00      	nop
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr
 80066cc:	200013e0 	.word	0x200013e0
 80066d0:	200013cc 	.word	0x200013cc

080066d4 <xTaskCheckForTimeOut>:
=======
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006630:	4b06      	ldr	r3, [pc, #24]	; (800664c <vTaskInternalSetTimeOutState+0x24>)
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006638:	4b05      	ldr	r3, [pc, #20]	; (8006650 <vTaskInternalSetTimeOutState+0x28>)
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	605a      	str	r2, [r3, #4]
}
 8006640:	bf00      	nop
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr
 800664c:	2000141c 	.word	0x2000141c
 8006650:	20001408 	.word	0x20001408

08006654 <xTaskCheckForTimeOut>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
<<<<<<< HEAD
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b088      	sub	sp, #32
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d10a      	bne.n	80066fa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80066e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e8:	f383 8811 	msr	BASEPRI, r3
 80066ec:	f3bf 8f6f 	isb	sy
 80066f0:	f3bf 8f4f 	dsb	sy
 80066f4:	613b      	str	r3, [r7, #16]
}
 80066f6:	bf00      	nop
 80066f8:	e7fe      	b.n	80066f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d10a      	bne.n	8006716 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006704:	f383 8811 	msr	BASEPRI, r3
 8006708:	f3bf 8f6f 	isb	sy
 800670c:	f3bf 8f4f 	dsb	sy
 8006710:	60fb      	str	r3, [r7, #12]
}
 8006712:	bf00      	nop
 8006714:	e7fe      	b.n	8006714 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006716:	f000 fe7d 	bl	8007414 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800671a:	4b1d      	ldr	r3, [pc, #116]	; (8006790 <xTaskCheckForTimeOut+0xbc>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	69ba      	ldr	r2, [r7, #24]
 8006726:	1ad3      	subs	r3, r2, r3
 8006728:	617b      	str	r3, [r7, #20]
=======
 8006654:	b580      	push	{r7, lr}
 8006656:	b088      	sub	sp, #32
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d10a      	bne.n	800667a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006668:	f383 8811 	msr	BASEPRI, r3
 800666c:	f3bf 8f6f 	isb	sy
 8006670:	f3bf 8f4f 	dsb	sy
 8006674:	613b      	str	r3, [r7, #16]
}
 8006676:	bf00      	nop
 8006678:	e7fe      	b.n	8006678 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d10a      	bne.n	8006696 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006684:	f383 8811 	msr	BASEPRI, r3
 8006688:	f3bf 8f6f 	isb	sy
 800668c:	f3bf 8f4f 	dsb	sy
 8006690:	60fb      	str	r3, [r7, #12]
}
 8006692:	bf00      	nop
 8006694:	e7fe      	b.n	8006694 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006696:	f000 fe7d 	bl	8007394 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800669a:	4b1d      	ldr	r3, [pc, #116]	; (8006710 <xTaskCheckForTimeOut+0xbc>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	69ba      	ldr	r2, [r7, #24]
 80066a6:	1ad3      	subs	r3, r2, r3
 80066a8:	617b      	str	r3, [r7, #20]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
<<<<<<< HEAD
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006732:	d102      	bne.n	800673a <xTaskCheckForTimeOut+0x66>
=======
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b2:	d102      	bne.n	80066ba <xTaskCheckForTimeOut+0x66>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
<<<<<<< HEAD
 8006734:	2300      	movs	r3, #0
 8006736:	61fb      	str	r3, [r7, #28]
 8006738:	e023      	b.n	8006782 <xTaskCheckForTimeOut+0xae>
=======
 80066b4:	2300      	movs	r3, #0
 80066b6:	61fb      	str	r3, [r7, #28]
 80066b8:	e023      	b.n	8006702 <xTaskCheckForTimeOut+0xae>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
<<<<<<< HEAD
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	4b15      	ldr	r3, [pc, #84]	; (8006794 <xTaskCheckForTimeOut+0xc0>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	429a      	cmp	r2, r3
 8006744:	d007      	beq.n	8006756 <xTaskCheckForTimeOut+0x82>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	69ba      	ldr	r2, [r7, #24]
 800674c:	429a      	cmp	r2, r3
 800674e:	d302      	bcc.n	8006756 <xTaskCheckForTimeOut+0x82>
=======
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	4b15      	ldr	r3, [pc, #84]	; (8006714 <xTaskCheckForTimeOut+0xc0>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d007      	beq.n	80066d6 <xTaskCheckForTimeOut+0x82>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	69ba      	ldr	r2, [r7, #24]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d302      	bcc.n	80066d6 <xTaskCheckForTimeOut+0x82>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
<<<<<<< HEAD
 8006750:	2301      	movs	r3, #1
 8006752:	61fb      	str	r3, [r7, #28]
 8006754:	e015      	b.n	8006782 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	429a      	cmp	r2, r3
 800675e:	d20b      	bcs.n	8006778 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	1ad2      	subs	r2, r2, r3
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f7ff ff9b 	bl	80066a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006772:	2300      	movs	r3, #0
 8006774:	61fb      	str	r3, [r7, #28]
 8006776:	e004      	b.n	8006782 <xTaskCheckForTimeOut+0xae>
=======
 80066d0:	2301      	movs	r3, #1
 80066d2:	61fb      	str	r3, [r7, #28]
 80066d4:	e015      	b.n	8006702 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	697a      	ldr	r2, [r7, #20]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d20b      	bcs.n	80066f8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	1ad2      	subs	r2, r2, r3
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f7ff ff9b 	bl	8006628 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80066f2:	2300      	movs	r3, #0
 80066f4:	61fb      	str	r3, [r7, #28]
 80066f6:	e004      	b.n	8006702 <xTaskCheckForTimeOut+0xae>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		}
		else
		{
			*pxTicksToWait = 0;
<<<<<<< HEAD
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	2200      	movs	r2, #0
 800677c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800677e:	2301      	movs	r3, #1
 8006780:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006782:	f000 fe77 	bl	8007474 <vPortExitCritical>

	return xReturn;
 8006786:	69fb      	ldr	r3, [r7, #28]
}
 8006788:	4618      	mov	r0, r3
 800678a:	3720      	adds	r7, #32
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}
 8006790:	200013cc 	.word	0x200013cc
 8006794:	200013e0 	.word	0x200013e0

08006798 <vTaskMissedYield>:
=======
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	2200      	movs	r2, #0
 80066fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80066fe:	2301      	movs	r3, #1
 8006700:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006702:	f000 fe77 	bl	80073f4 <vPortExitCritical>

	return xReturn;
 8006706:	69fb      	ldr	r3, [r7, #28]
}
 8006708:	4618      	mov	r0, r3
 800670a:	3720      	adds	r7, #32
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}
 8006710:	20001408 	.word	0x20001408
 8006714:	2000141c 	.word	0x2000141c

08006718 <vTaskMissedYield>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
<<<<<<< HEAD
 8006798:	b480      	push	{r7}
 800679a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800679c:	4b03      	ldr	r3, [pc, #12]	; (80067ac <vTaskMissedYield+0x14>)
 800679e:	2201      	movs	r2, #1
 80067a0:	601a      	str	r2, [r3, #0]
}
 80067a2:	bf00      	nop
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr
 80067ac:	200013dc 	.word	0x200013dc

080067b0 <prvIdleTask>:
=======
 8006718:	b480      	push	{r7}
 800671a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800671c:	4b03      	ldr	r3, [pc, #12]	; (800672c <vTaskMissedYield+0x14>)
 800671e:	2201      	movs	r2, #1
 8006720:	601a      	str	r2, [r3, #0]
}
 8006722:	bf00      	nop
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr
 800672c:	20001418 	.word	0x20001418

08006730 <prvIdleTask>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
<<<<<<< HEAD
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
=======
 8006730:	b580      	push	{r7, lr}
 8006732:	b082      	sub	sp, #8
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
<<<<<<< HEAD
 80067b8:	f000 f852 	bl	8006860 <prvCheckTasksWaitingTermination>
=======
 8006738:	f000 f852 	bl	80067e0 <prvCheckTasksWaitingTermination>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
<<<<<<< HEAD
 80067bc:	4b06      	ldr	r3, [pc, #24]	; (80067d8 <prvIdleTask+0x28>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d9f9      	bls.n	80067b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80067c4:	4b05      	ldr	r3, [pc, #20]	; (80067dc <prvIdleTask+0x2c>)
 80067c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067ca:	601a      	str	r2, [r3, #0]
 80067cc:	f3bf 8f4f 	dsb	sy
 80067d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80067d4:	e7f0      	b.n	80067b8 <prvIdleTask+0x8>
 80067d6:	bf00      	nop
 80067d8:	20000ef8 	.word	0x20000ef8
 80067dc:	e000ed04 	.word	0xe000ed04

080067e0 <prvInitialiseTaskLists>:
=======
 800673c:	4b06      	ldr	r3, [pc, #24]	; (8006758 <prvIdleTask+0x28>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	2b01      	cmp	r3, #1
 8006742:	d9f9      	bls.n	8006738 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006744:	4b05      	ldr	r3, [pc, #20]	; (800675c <prvIdleTask+0x2c>)
 8006746:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800674a:	601a      	str	r2, [r3, #0]
 800674c:	f3bf 8f4f 	dsb	sy
 8006750:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006754:	e7f0      	b.n	8006738 <prvIdleTask+0x8>
 8006756:	bf00      	nop
 8006758:	20000f34 	.word	0x20000f34
 800675c:	e000ed04 	.word	0xe000ed04

08006760 <prvInitialiseTaskLists>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
<<<<<<< HEAD
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80067e6:	2300      	movs	r3, #0
 80067e8:	607b      	str	r3, [r7, #4]
 80067ea:	e00c      	b.n	8006806 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	4613      	mov	r3, r2
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	4413      	add	r3, r2
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	4a12      	ldr	r2, [pc, #72]	; (8006840 <prvInitialiseTaskLists+0x60>)
 80067f8:	4413      	add	r3, r2
 80067fa:	4618      	mov	r0, r3
 80067fc:	f7fe fcca 	bl	8005194 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	3301      	adds	r3, #1
 8006804:	607b      	str	r3, [r7, #4]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2b37      	cmp	r3, #55	; 0x37
 800680a:	d9ef      	bls.n	80067ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800680c:	480d      	ldr	r0, [pc, #52]	; (8006844 <prvInitialiseTaskLists+0x64>)
 800680e:	f7fe fcc1 	bl	8005194 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006812:	480d      	ldr	r0, [pc, #52]	; (8006848 <prvInitialiseTaskLists+0x68>)
 8006814:	f7fe fcbe 	bl	8005194 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006818:	480c      	ldr	r0, [pc, #48]	; (800684c <prvInitialiseTaskLists+0x6c>)
 800681a:	f7fe fcbb 	bl	8005194 <vListInitialise>
=======
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006766:	2300      	movs	r3, #0
 8006768:	607b      	str	r3, [r7, #4]
 800676a:	e00c      	b.n	8006786 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	4613      	mov	r3, r2
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	4413      	add	r3, r2
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	4a12      	ldr	r2, [pc, #72]	; (80067c0 <prvInitialiseTaskLists+0x60>)
 8006778:	4413      	add	r3, r2
 800677a:	4618      	mov	r0, r3
 800677c:	f7fe fcca 	bl	8005114 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	3301      	adds	r3, #1
 8006784:	607b      	str	r3, [r7, #4]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2b37      	cmp	r3, #55	; 0x37
 800678a:	d9ef      	bls.n	800676c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800678c:	480d      	ldr	r0, [pc, #52]	; (80067c4 <prvInitialiseTaskLists+0x64>)
 800678e:	f7fe fcc1 	bl	8005114 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006792:	480d      	ldr	r0, [pc, #52]	; (80067c8 <prvInitialiseTaskLists+0x68>)
 8006794:	f7fe fcbe 	bl	8005114 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006798:	480c      	ldr	r0, [pc, #48]	; (80067cc <prvInitialiseTaskLists+0x6c>)
 800679a:	f7fe fcbb 	bl	8005114 <vListInitialise>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
<<<<<<< HEAD
 800681e:	480c      	ldr	r0, [pc, #48]	; (8006850 <prvInitialiseTaskLists+0x70>)
 8006820:	f7fe fcb8 	bl	8005194 <vListInitialise>
=======
 800679e:	480c      	ldr	r0, [pc, #48]	; (80067d0 <prvInitialiseTaskLists+0x70>)
 80067a0:	f7fe fcb8 	bl	8005114 <vListInitialise>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
<<<<<<< HEAD
 8006824:	480b      	ldr	r0, [pc, #44]	; (8006854 <prvInitialiseTaskLists+0x74>)
 8006826:	f7fe fcb5 	bl	8005194 <vListInitialise>
=======
 80067a4:	480b      	ldr	r0, [pc, #44]	; (80067d4 <prvInitialiseTaskLists+0x74>)
 80067a6:	f7fe fcb5 	bl	8005114 <vListInitialise>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
<<<<<<< HEAD
 800682a:	4b0b      	ldr	r3, [pc, #44]	; (8006858 <prvInitialiseTaskLists+0x78>)
 800682c:	4a05      	ldr	r2, [pc, #20]	; (8006844 <prvInitialiseTaskLists+0x64>)
 800682e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006830:	4b0a      	ldr	r3, [pc, #40]	; (800685c <prvInitialiseTaskLists+0x7c>)
 8006832:	4a05      	ldr	r2, [pc, #20]	; (8006848 <prvInitialiseTaskLists+0x68>)
 8006834:	601a      	str	r2, [r3, #0]
}
 8006836:	bf00      	nop
 8006838:	3708      	adds	r7, #8
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	20000ef8 	.word	0x20000ef8
 8006844:	20001358 	.word	0x20001358
 8006848:	2000136c 	.word	0x2000136c
 800684c:	20001388 	.word	0x20001388
 8006850:	2000139c 	.word	0x2000139c
 8006854:	200013b4 	.word	0x200013b4
 8006858:	20001380 	.word	0x20001380
 800685c:	20001384 	.word	0x20001384

08006860 <prvCheckTasksWaitingTermination>:
=======
 80067aa:	4b0b      	ldr	r3, [pc, #44]	; (80067d8 <prvInitialiseTaskLists+0x78>)
 80067ac:	4a05      	ldr	r2, [pc, #20]	; (80067c4 <prvInitialiseTaskLists+0x64>)
 80067ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80067b0:	4b0a      	ldr	r3, [pc, #40]	; (80067dc <prvInitialiseTaskLists+0x7c>)
 80067b2:	4a05      	ldr	r2, [pc, #20]	; (80067c8 <prvInitialiseTaskLists+0x68>)
 80067b4:	601a      	str	r2, [r3, #0]
}
 80067b6:	bf00      	nop
 80067b8:	3708      	adds	r7, #8
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	20000f34 	.word	0x20000f34
 80067c4:	20001394 	.word	0x20001394
 80067c8:	200013a8 	.word	0x200013a8
 80067cc:	200013c4 	.word	0x200013c4
 80067d0:	200013d8 	.word	0x200013d8
 80067d4:	200013f0 	.word	0x200013f0
 80067d8:	200013bc 	.word	0x200013bc
 80067dc:	200013c0 	.word	0x200013c0

080067e0 <prvCheckTasksWaitingTermination>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
<<<<<<< HEAD
 8006860:	b580      	push	{r7, lr}
 8006862:	b082      	sub	sp, #8
 8006864:	af00      	add	r7, sp, #0
=======
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
<<<<<<< HEAD
 8006866:	e019      	b.n	800689c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006868:	f000 fdd4 	bl	8007414 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800686c:	4b10      	ldr	r3, [pc, #64]	; (80068b0 <prvCheckTasksWaitingTermination+0x50>)
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	3304      	adds	r3, #4
 8006878:	4618      	mov	r0, r3
 800687a:	f7fe fd15 	bl	80052a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800687e:	4b0d      	ldr	r3, [pc, #52]	; (80068b4 <prvCheckTasksWaitingTermination+0x54>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	3b01      	subs	r3, #1
 8006884:	4a0b      	ldr	r2, [pc, #44]	; (80068b4 <prvCheckTasksWaitingTermination+0x54>)
 8006886:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006888:	4b0b      	ldr	r3, [pc, #44]	; (80068b8 <prvCheckTasksWaitingTermination+0x58>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	3b01      	subs	r3, #1
 800688e:	4a0a      	ldr	r2, [pc, #40]	; (80068b8 <prvCheckTasksWaitingTermination+0x58>)
 8006890:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006892:	f000 fdef 	bl	8007474 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 f810 	bl	80068bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800689c:	4b06      	ldr	r3, [pc, #24]	; (80068b8 <prvCheckTasksWaitingTermination+0x58>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d1e1      	bne.n	8006868 <prvCheckTasksWaitingTermination+0x8>
=======
 80067e6:	e019      	b.n	800681c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80067e8:	f000 fdd4 	bl	8007394 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067ec:	4b10      	ldr	r3, [pc, #64]	; (8006830 <prvCheckTasksWaitingTermination+0x50>)
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	3304      	adds	r3, #4
 80067f8:	4618      	mov	r0, r3
 80067fa:	f7fe fd15 	bl	8005228 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80067fe:	4b0d      	ldr	r3, [pc, #52]	; (8006834 <prvCheckTasksWaitingTermination+0x54>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	3b01      	subs	r3, #1
 8006804:	4a0b      	ldr	r2, [pc, #44]	; (8006834 <prvCheckTasksWaitingTermination+0x54>)
 8006806:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006808:	4b0b      	ldr	r3, [pc, #44]	; (8006838 <prvCheckTasksWaitingTermination+0x58>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	3b01      	subs	r3, #1
 800680e:	4a0a      	ldr	r2, [pc, #40]	; (8006838 <prvCheckTasksWaitingTermination+0x58>)
 8006810:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006812:	f000 fdef 	bl	80073f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 f810 	bl	800683c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800681c:	4b06      	ldr	r3, [pc, #24]	; (8006838 <prvCheckTasksWaitingTermination+0x58>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d1e1      	bne.n	80067e8 <prvCheckTasksWaitingTermination+0x8>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
<<<<<<< HEAD
 80068a4:	bf00      	nop
 80068a6:	bf00      	nop
 80068a8:	3708      	adds	r7, #8
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	2000139c 	.word	0x2000139c
 80068b4:	200013c8 	.word	0x200013c8
 80068b8:	200013b0 	.word	0x200013b0

080068bc <prvDeleteTCB>:
=======
 8006824:	bf00      	nop
 8006826:	bf00      	nop
 8006828:	3708      	adds	r7, #8
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	200013d8 	.word	0x200013d8
 8006834:	20001404 	.word	0x20001404
 8006838:	200013ec 	.word	0x200013ec

0800683c <prvDeleteTCB>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
<<<<<<< HEAD
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
=======
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
<<<<<<< HEAD
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	3354      	adds	r3, #84	; 0x54
 80068c8:	4618      	mov	r0, r3
 80068ca:	f001 f8b7 	bl	8007a3c <_reclaim_reent>
=======
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	3354      	adds	r3, #84	; 0x54
 8006848:	4618      	mov	r0, r3
 800684a:	f001 f8f9 	bl	8007a40 <_reclaim_reent>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
<<<<<<< HEAD
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d108      	bne.n	80068ea <prvDeleteTCB+0x2e>
=======
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006854:	2b00      	cmp	r3, #0
 8006856:	d108      	bne.n	800686a <prvDeleteTCB+0x2e>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
<<<<<<< HEAD
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068dc:	4618      	mov	r0, r3
 80068de:	f000 ff87 	bl	80077f0 <vPortFree>
				vPortFree( pxTCB );
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 ff84 	bl	80077f0 <vPortFree>
=======
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800685c:	4618      	mov	r0, r3
 800685e:	f000 ff87 	bl	8007770 <vPortFree>
				vPortFree( pxTCB );
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 ff84 	bl	8007770 <vPortFree>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
<<<<<<< HEAD
 80068e8:	e018      	b.n	800691c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d103      	bne.n	80068fc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 ff7b 	bl	80077f0 <vPortFree>
	}
 80068fa:	e00f      	b.n	800691c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006902:	2b02      	cmp	r3, #2
 8006904:	d00a      	beq.n	800691c <prvDeleteTCB+0x60>
	__asm volatile
 8006906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690a:	f383 8811 	msr	BASEPRI, r3
 800690e:	f3bf 8f6f 	isb	sy
 8006912:	f3bf 8f4f 	dsb	sy
 8006916:	60fb      	str	r3, [r7, #12]
}
 8006918:	bf00      	nop
 800691a:	e7fe      	b.n	800691a <prvDeleteTCB+0x5e>
	}
 800691c:	bf00      	nop
 800691e:	3710      	adds	r7, #16
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <prvResetNextTaskUnblockTime>:
=======
 8006868:	e018      	b.n	800689c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006870:	2b01      	cmp	r3, #1
 8006872:	d103      	bne.n	800687c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 ff7b 	bl	8007770 <vPortFree>
	}
 800687a:	e00f      	b.n	800689c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006882:	2b02      	cmp	r3, #2
 8006884:	d00a      	beq.n	800689c <prvDeleteTCB+0x60>
	__asm volatile
 8006886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800688a:	f383 8811 	msr	BASEPRI, r3
 800688e:	f3bf 8f6f 	isb	sy
 8006892:	f3bf 8f4f 	dsb	sy
 8006896:	60fb      	str	r3, [r7, #12]
}
 8006898:	bf00      	nop
 800689a:	e7fe      	b.n	800689a <prvDeleteTCB+0x5e>
	}
 800689c:	bf00      	nop
 800689e:	3710      	adds	r7, #16
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <prvResetNextTaskUnblockTime>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
<<<<<<< HEAD
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800692a:	4b0c      	ldr	r3, [pc, #48]	; (800695c <prvResetNextTaskUnblockTime+0x38>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d104      	bne.n	800693e <prvResetNextTaskUnblockTime+0x1a>
=======
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068aa:	4b0c      	ldr	r3, [pc, #48]	; (80068dc <prvResetNextTaskUnblockTime+0x38>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d104      	bne.n	80068be <prvResetNextTaskUnblockTime+0x1a>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
<<<<<<< HEAD
 8006934:	4b0a      	ldr	r3, [pc, #40]	; (8006960 <prvResetNextTaskUnblockTime+0x3c>)
 8006936:	f04f 32ff 	mov.w	r2, #4294967295
 800693a:	601a      	str	r2, [r3, #0]
=======
 80068b4:	4b0a      	ldr	r3, [pc, #40]	; (80068e0 <prvResetNextTaskUnblockTime+0x3c>)
 80068b6:	f04f 32ff 	mov.w	r2, #4294967295
 80068ba:	601a      	str	r2, [r3, #0]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
<<<<<<< HEAD
 800693c:	e008      	b.n	8006950 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800693e:	4b07      	ldr	r3, [pc, #28]	; (800695c <prvResetNextTaskUnblockTime+0x38>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	4a04      	ldr	r2, [pc, #16]	; (8006960 <prvResetNextTaskUnblockTime+0x3c>)
 800694e:	6013      	str	r3, [r2, #0]
}
 8006950:	bf00      	nop
 8006952:	370c      	adds	r7, #12
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr
 800695c:	20001380 	.word	0x20001380
 8006960:	200013e8 	.word	0x200013e8

08006964 <xTaskGetSchedulerState>:
=======
 80068bc:	e008      	b.n	80068d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068be:	4b07      	ldr	r3, [pc, #28]	; (80068dc <prvResetNextTaskUnblockTime+0x38>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	68db      	ldr	r3, [r3, #12]
 80068c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	4a04      	ldr	r2, [pc, #16]	; (80068e0 <prvResetNextTaskUnblockTime+0x3c>)
 80068ce:	6013      	str	r3, [r2, #0]
}
 80068d0:	bf00      	nop
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr
 80068dc:	200013bc 	.word	0x200013bc
 80068e0:	20001424 	.word	0x20001424

080068e4 <xTaskGetSchedulerState>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
<<<<<<< HEAD
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800696a:	4b0b      	ldr	r3, [pc, #44]	; (8006998 <xTaskGetSchedulerState+0x34>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d102      	bne.n	8006978 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006972:	2301      	movs	r3, #1
 8006974:	607b      	str	r3, [r7, #4]
 8006976:	e008      	b.n	800698a <xTaskGetSchedulerState+0x26>
=======
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80068ea:	4b0b      	ldr	r3, [pc, #44]	; (8006918 <xTaskGetSchedulerState+0x34>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d102      	bne.n	80068f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80068f2:	2301      	movs	r3, #1
 80068f4:	607b      	str	r3, [r7, #4]
 80068f6:	e008      	b.n	800690a <xTaskGetSchedulerState+0x26>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
<<<<<<< HEAD
 8006978:	4b08      	ldr	r3, [pc, #32]	; (800699c <xTaskGetSchedulerState+0x38>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d102      	bne.n	8006986 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006980:	2302      	movs	r3, #2
 8006982:	607b      	str	r3, [r7, #4]
 8006984:	e001      	b.n	800698a <xTaskGetSchedulerState+0x26>
=======
 80068f8:	4b08      	ldr	r3, [pc, #32]	; (800691c <xTaskGetSchedulerState+0x38>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d102      	bne.n	8006906 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006900:	2302      	movs	r3, #2
 8006902:	607b      	str	r3, [r7, #4]
 8006904:	e001      	b.n	800690a <xTaskGetSchedulerState+0x26>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
<<<<<<< HEAD
 8006986:	2300      	movs	r3, #0
 8006988:	607b      	str	r3, [r7, #4]
=======
 8006906:	2300      	movs	r3, #0
 8006908:	607b      	str	r3, [r7, #4]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
			}
		}

		return xReturn;
<<<<<<< HEAD
 800698a:	687b      	ldr	r3, [r7, #4]
	}
 800698c:	4618      	mov	r0, r3
 800698e:	370c      	adds	r7, #12
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr
 8006998:	200013d4 	.word	0x200013d4
 800699c:	200013f0 	.word	0x200013f0

080069a0 <xTaskPriorityDisinherit>:
=======
 800690a:	687b      	ldr	r3, [r7, #4]
	}
 800690c:	4618      	mov	r0, r3
 800690e:	370c      	adds	r7, #12
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr
 8006918:	20001410 	.word	0x20001410
 800691c:	2000142c 	.word	0x2000142c

08006920 <xTaskPriorityDisinherit>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
<<<<<<< HEAD
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b086      	sub	sp, #24
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80069ac:	2300      	movs	r3, #0
 80069ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d056      	beq.n	8006a64 <xTaskPriorityDisinherit+0xc4>
=======
 8006920:	b580      	push	{r7, lr}
 8006922:	b086      	sub	sp, #24
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800692c:	2300      	movs	r3, #0
 800692e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d056      	beq.n	80069e4 <xTaskPriorityDisinherit+0xc4>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
<<<<<<< HEAD
 80069b6:	4b2e      	ldr	r3, [pc, #184]	; (8006a70 <xTaskPriorityDisinherit+0xd0>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	693a      	ldr	r2, [r7, #16]
 80069bc:	429a      	cmp	r2, r3
 80069be:	d00a      	beq.n	80069d6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80069c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c4:	f383 8811 	msr	BASEPRI, r3
 80069c8:	f3bf 8f6f 	isb	sy
 80069cc:	f3bf 8f4f 	dsb	sy
 80069d0:	60fb      	str	r3, [r7, #12]
}
 80069d2:	bf00      	nop
 80069d4:	e7fe      	b.n	80069d4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d10a      	bne.n	80069f4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80069de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e2:	f383 8811 	msr	BASEPRI, r3
 80069e6:	f3bf 8f6f 	isb	sy
 80069ea:	f3bf 8f4f 	dsb	sy
 80069ee:	60bb      	str	r3, [r7, #8]
}
 80069f0:	bf00      	nop
 80069f2:	e7fe      	b.n	80069f2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069f8:	1e5a      	subs	r2, r3, #1
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	651a      	str	r2, [r3, #80]	; 0x50
=======
 8006936:	4b2e      	ldr	r3, [pc, #184]	; (80069f0 <xTaskPriorityDisinherit+0xd0>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	693a      	ldr	r2, [r7, #16]
 800693c:	429a      	cmp	r2, r3
 800693e:	d00a      	beq.n	8006956 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006944:	f383 8811 	msr	BASEPRI, r3
 8006948:	f3bf 8f6f 	isb	sy
 800694c:	f3bf 8f4f 	dsb	sy
 8006950:	60fb      	str	r3, [r7, #12]
}
 8006952:	bf00      	nop
 8006954:	e7fe      	b.n	8006954 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800695a:	2b00      	cmp	r3, #0
 800695c:	d10a      	bne.n	8006974 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800695e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006962:	f383 8811 	msr	BASEPRI, r3
 8006966:	f3bf 8f6f 	isb	sy
 800696a:	f3bf 8f4f 	dsb	sy
 800696e:	60bb      	str	r3, [r7, #8]
}
 8006970:	bf00      	nop
 8006972:	e7fe      	b.n	8006972 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006978:	1e5a      	subs	r2, r3, #1
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	651a      	str	r2, [r3, #80]	; 0x50
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
<<<<<<< HEAD
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d02c      	beq.n	8006a64 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d128      	bne.n	8006a64 <xTaskPriorityDisinherit+0xc4>
=======
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006986:	429a      	cmp	r2, r3
 8006988:	d02c      	beq.n	80069e4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800698e:	2b00      	cmp	r3, #0
 8006990:	d128      	bne.n	80069e4 <xTaskPriorityDisinherit+0xc4>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
<<<<<<< HEAD
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	3304      	adds	r3, #4
 8006a16:	4618      	mov	r0, r3
 8006a18:	f7fe fc46 	bl	80052a8 <uxListRemove>
=======
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	3304      	adds	r3, #4
 8006996:	4618      	mov	r0, r3
 8006998:	f7fe fc46 	bl	8005228 <uxListRemove>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
<<<<<<< HEAD
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< HEAD
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a28:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a34:	4b0f      	ldr	r3, [pc, #60]	; (8006a74 <xTaskPriorityDisinherit+0xd4>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d903      	bls.n	8006a44 <xTaskPriorityDisinherit+0xa4>
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a40:	4a0c      	ldr	r2, [pc, #48]	; (8006a74 <xTaskPriorityDisinherit+0xd4>)
 8006a42:	6013      	str	r3, [r2, #0]
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a48:	4613      	mov	r3, r2
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	4413      	add	r3, r2
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	4a09      	ldr	r2, [pc, #36]	; (8006a78 <xTaskPriorityDisinherit+0xd8>)
 8006a52:	441a      	add	r2, r3
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	3304      	adds	r3, #4
 8006a58:	4619      	mov	r1, r3
 8006a5a:	4610      	mov	r0, r2
 8006a5c:	f7fe fbc7 	bl	80051ee <vListInsertEnd>
=======
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069b4:	4b0f      	ldr	r3, [pc, #60]	; (80069f4 <xTaskPriorityDisinherit+0xd4>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d903      	bls.n	80069c4 <xTaskPriorityDisinherit+0xa4>
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c0:	4a0c      	ldr	r2, [pc, #48]	; (80069f4 <xTaskPriorityDisinherit+0xd4>)
 80069c2:	6013      	str	r3, [r2, #0]
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069c8:	4613      	mov	r3, r2
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	4413      	add	r3, r2
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	4a09      	ldr	r2, [pc, #36]	; (80069f8 <xTaskPriorityDisinherit+0xd8>)
 80069d2:	441a      	add	r2, r3
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	3304      	adds	r3, #4
 80069d8:	4619      	mov	r1, r3
 80069da:	4610      	mov	r0, r2
 80069dc:	f7fe fbc7 	bl	800516e <vListInsertEnd>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
<<<<<<< HEAD
 8006a60:	2301      	movs	r3, #1
 8006a62:	617b      	str	r3, [r7, #20]
=======
 80069e0:	2301      	movs	r3, #1
 80069e2:	617b      	str	r3, [r7, #20]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
<<<<<<< HEAD
 8006a64:	697b      	ldr	r3, [r7, #20]
	}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3718      	adds	r7, #24
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	20000ef4 	.word	0x20000ef4
 8006a74:	200013d0 	.word	0x200013d0
 8006a78:	20000ef8 	.word	0x20000ef8

08006a7c <prvAddCurrentTaskToDelayedList>:
=======
 80069e4:	697b      	ldr	r3, [r7, #20]
	}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3718      	adds	r7, #24
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
 80069ee:	bf00      	nop
 80069f0:	20000f30 	.word	0x20000f30
 80069f4:	2000140c 	.word	0x2000140c
 80069f8:	20000f34 	.word	0x20000f34

080069fc <prvAddCurrentTaskToDelayedList>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
<<<<<<< HEAD
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006a86:	4b21      	ldr	r3, [pc, #132]	; (8006b0c <prvAddCurrentTaskToDelayedList+0x90>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	60fb      	str	r3, [r7, #12]
=======
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006a06:	4b21      	ldr	r3, [pc, #132]	; (8006a8c <prvAddCurrentTaskToDelayedList+0x90>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	60fb      	str	r3, [r7, #12]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
<<<<<<< HEAD
 8006a8c:	4b20      	ldr	r3, [pc, #128]	; (8006b10 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	3304      	adds	r3, #4
 8006a92:	4618      	mov	r0, r3
 8006a94:	f7fe fc08 	bl	80052a8 <uxListRemove>
=======
 8006a0c:	4b20      	ldr	r3, [pc, #128]	; (8006a90 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	3304      	adds	r3, #4
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7fe fc08 	bl	8005228 <uxListRemove>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
<<<<<<< HEAD
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a9e:	d10a      	bne.n	8006ab6 <prvAddCurrentTaskToDelayedList+0x3a>
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d007      	beq.n	8006ab6 <prvAddCurrentTaskToDelayedList+0x3a>
=======
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a1e:	d10a      	bne.n	8006a36 <prvAddCurrentTaskToDelayedList+0x3a>
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d007      	beq.n	8006a36 <prvAddCurrentTaskToDelayedList+0x3a>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
<<<<<<< HEAD
 8006aa6:	4b1a      	ldr	r3, [pc, #104]	; (8006b10 <prvAddCurrentTaskToDelayedList+0x94>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	3304      	adds	r3, #4
 8006aac:	4619      	mov	r1, r3
 8006aae:	4819      	ldr	r0, [pc, #100]	; (8006b14 <prvAddCurrentTaskToDelayedList+0x98>)
 8006ab0:	f7fe fb9d 	bl	80051ee <vListInsertEnd>
=======
 8006a26:	4b1a      	ldr	r3, [pc, #104]	; (8006a90 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	3304      	adds	r3, #4
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	4819      	ldr	r0, [pc, #100]	; (8006a94 <prvAddCurrentTaskToDelayedList+0x98>)
 8006a30:	f7fe fb9d 	bl	800516e <vListInsertEnd>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
<<<<<<< HEAD
 8006ab4:	e026      	b.n	8006b04 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4413      	add	r3, r2
 8006abc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006abe:	4b14      	ldr	r3, [pc, #80]	; (8006b10 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	68ba      	ldr	r2, [r7, #8]
 8006ac4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006ac6:	68ba      	ldr	r2, [r7, #8]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d209      	bcs.n	8006ae2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ace:	4b12      	ldr	r3, [pc, #72]	; (8006b18 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	4b0f      	ldr	r3, [pc, #60]	; (8006b10 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	3304      	adds	r3, #4
 8006ad8:	4619      	mov	r1, r3
 8006ada:	4610      	mov	r0, r2
 8006adc:	f7fe fbab 	bl	8005236 <vListInsert>
}
 8006ae0:	e010      	b.n	8006b04 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ae2:	4b0e      	ldr	r3, [pc, #56]	; (8006b1c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	4b0a      	ldr	r3, [pc, #40]	; (8006b10 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	3304      	adds	r3, #4
 8006aec:	4619      	mov	r1, r3
 8006aee:	4610      	mov	r0, r2
 8006af0:	f7fe fba1 	bl	8005236 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006af4:	4b0a      	ldr	r3, [pc, #40]	; (8006b20 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	68ba      	ldr	r2, [r7, #8]
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d202      	bcs.n	8006b04 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006afe:	4a08      	ldr	r2, [pc, #32]	; (8006b20 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	6013      	str	r3, [r2, #0]
}
 8006b04:	bf00      	nop
 8006b06:	3710      	adds	r7, #16
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}
 8006b0c:	200013cc 	.word	0x200013cc
 8006b10:	20000ef4 	.word	0x20000ef4
 8006b14:	200013b4 	.word	0x200013b4
 8006b18:	20001384 	.word	0x20001384
 8006b1c:	20001380 	.word	0x20001380
 8006b20:	200013e8 	.word	0x200013e8

08006b24 <xTimerCreateTimerTask>:
=======
 8006a34:	e026      	b.n	8006a84 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006a36:	68fa      	ldr	r2, [r7, #12]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	4413      	add	r3, r2
 8006a3c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006a3e:	4b14      	ldr	r3, [pc, #80]	; (8006a90 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68ba      	ldr	r2, [r7, #8]
 8006a44:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006a46:	68ba      	ldr	r2, [r7, #8]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d209      	bcs.n	8006a62 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a4e:	4b12      	ldr	r3, [pc, #72]	; (8006a98 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	4b0f      	ldr	r3, [pc, #60]	; (8006a90 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	3304      	adds	r3, #4
 8006a58:	4619      	mov	r1, r3
 8006a5a:	4610      	mov	r0, r2
 8006a5c:	f7fe fbab 	bl	80051b6 <vListInsert>
}
 8006a60:	e010      	b.n	8006a84 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a62:	4b0e      	ldr	r3, [pc, #56]	; (8006a9c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	4b0a      	ldr	r3, [pc, #40]	; (8006a90 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	3304      	adds	r3, #4
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	4610      	mov	r0, r2
 8006a70:	f7fe fba1 	bl	80051b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006a74:	4b0a      	ldr	r3, [pc, #40]	; (8006aa0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	68ba      	ldr	r2, [r7, #8]
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d202      	bcs.n	8006a84 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006a7e:	4a08      	ldr	r2, [pc, #32]	; (8006aa0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	6013      	str	r3, [r2, #0]
}
 8006a84:	bf00      	nop
 8006a86:	3710      	adds	r7, #16
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}
 8006a8c:	20001408 	.word	0x20001408
 8006a90:	20000f30 	.word	0x20000f30
 8006a94:	200013f0 	.word	0x200013f0
 8006a98:	200013c0 	.word	0x200013c0
 8006a9c:	200013bc 	.word	0x200013bc
 8006aa0:	20001424 	.word	0x20001424

08006aa4 <xTimerCreateTimerTask>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
<<<<<<< HEAD
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b08a      	sub	sp, #40	; 0x28
 8006b28:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	617b      	str	r3, [r7, #20]
=======
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b08a      	sub	sp, #40	; 0x28
 8006aa8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	617b      	str	r3, [r7, #20]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
<<<<<<< HEAD
 8006b2e:	f000 fb07 	bl	8007140 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006b32:	4b1c      	ldr	r3, [pc, #112]	; (8006ba4 <xTimerCreateTimerTask+0x80>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d021      	beq.n	8006b7e <xTimerCreateTimerTask+0x5a>
=======
 8006aae:	f000 fb07 	bl	80070c0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006ab2:	4b1c      	ldr	r3, [pc, #112]	; (8006b24 <xTimerCreateTimerTask+0x80>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d021      	beq.n	8006afe <xTimerCreateTimerTask+0x5a>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
<<<<<<< HEAD
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006b42:	1d3a      	adds	r2, r7, #4
 8006b44:	f107 0108 	add.w	r1, r7, #8
 8006b48:	f107 030c 	add.w	r3, r7, #12
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f7fe fb07 	bl	8005160 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006b52:	6879      	ldr	r1, [r7, #4]
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	9202      	str	r2, [sp, #8]
 8006b5a:	9301      	str	r3, [sp, #4]
 8006b5c:	2302      	movs	r3, #2
 8006b5e:	9300      	str	r3, [sp, #0]
 8006b60:	2300      	movs	r3, #0
 8006b62:	460a      	mov	r2, r1
 8006b64:	4910      	ldr	r1, [pc, #64]	; (8006ba8 <xTimerCreateTimerTask+0x84>)
 8006b66:	4811      	ldr	r0, [pc, #68]	; (8006bac <xTimerCreateTimerTask+0x88>)
 8006b68:	f7ff f8b4 	bl	8005cd4 <xTaskCreateStatic>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	4a10      	ldr	r2, [pc, #64]	; (8006bb0 <xTimerCreateTimerTask+0x8c>)
 8006b70:	6013      	str	r3, [r2, #0]
=======
 8006aba:	2300      	movs	r3, #0
 8006abc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006ac2:	1d3a      	adds	r2, r7, #4
 8006ac4:	f107 0108 	add.w	r1, r7, #8
 8006ac8:	f107 030c 	add.w	r3, r7, #12
 8006acc:	4618      	mov	r0, r3
 8006ace:	f7fe fb07 	bl	80050e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006ad2:	6879      	ldr	r1, [r7, #4]
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	68fa      	ldr	r2, [r7, #12]
 8006ad8:	9202      	str	r2, [sp, #8]
 8006ada:	9301      	str	r3, [sp, #4]
 8006adc:	2302      	movs	r3, #2
 8006ade:	9300      	str	r3, [sp, #0]
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	460a      	mov	r2, r1
 8006ae4:	4910      	ldr	r1, [pc, #64]	; (8006b28 <xTimerCreateTimerTask+0x84>)
 8006ae6:	4811      	ldr	r0, [pc, #68]	; (8006b2c <xTimerCreateTimerTask+0x88>)
 8006ae8:	f7ff f8b4 	bl	8005c54 <xTaskCreateStatic>
 8006aec:	4603      	mov	r3, r0
 8006aee:	4a10      	ldr	r2, [pc, #64]	; (8006b30 <xTimerCreateTimerTask+0x8c>)
 8006af0:	6013      	str	r3, [r2, #0]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
<<<<<<< HEAD
 8006b72:	4b0f      	ldr	r3, [pc, #60]	; (8006bb0 <xTimerCreateTimerTask+0x8c>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d001      	beq.n	8006b7e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	617b      	str	r3, [r7, #20]
=======
 8006af2:	4b0f      	ldr	r3, [pc, #60]	; (8006b30 <xTimerCreateTimerTask+0x8c>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d001      	beq.n	8006afe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006afa:	2301      	movs	r3, #1
 8006afc:	617b      	str	r3, [r7, #20]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
<<<<<<< HEAD
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d10a      	bne.n	8006b9a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b88:	f383 8811 	msr	BASEPRI, r3
 8006b8c:	f3bf 8f6f 	isb	sy
 8006b90:	f3bf 8f4f 	dsb	sy
 8006b94:	613b      	str	r3, [r7, #16]
}
 8006b96:	bf00      	nop
 8006b98:	e7fe      	b.n	8006b98 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006b9a:	697b      	ldr	r3, [r7, #20]
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3718      	adds	r7, #24
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	20001424 	.word	0x20001424
 8006ba8:	08007c60 	.word	0x08007c60
 8006bac:	08006ce9 	.word	0x08006ce9
 8006bb0:	20001428 	.word	0x20001428

08006bb4 <xTimerGenericCommand>:
=======
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d10a      	bne.n	8006b1a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b08:	f383 8811 	msr	BASEPRI, r3
 8006b0c:	f3bf 8f6f 	isb	sy
 8006b10:	f3bf 8f4f 	dsb	sy
 8006b14:	613b      	str	r3, [r7, #16]
}
 8006b16:	bf00      	nop
 8006b18:	e7fe      	b.n	8006b18 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006b1a:	697b      	ldr	r3, [r7, #20]
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3718      	adds	r7, #24
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	20001460 	.word	0x20001460
 8006b28:	08007c08 	.word	0x08007c08
 8006b2c:	08006c69 	.word	0x08006c69
 8006b30:	20001464 	.word	0x20001464

08006b34 <xTimerGenericCommand>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
<<<<<<< HEAD
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b08a      	sub	sp, #40	; 0x28
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	60b9      	str	r1, [r7, #8]
 8006bbe:	607a      	str	r2, [r7, #4]
 8006bc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d10a      	bne.n	8006be2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd0:	f383 8811 	msr	BASEPRI, r3
 8006bd4:	f3bf 8f6f 	isb	sy
 8006bd8:	f3bf 8f4f 	dsb	sy
 8006bdc:	623b      	str	r3, [r7, #32]
}
 8006bde:	bf00      	nop
 8006be0:	e7fe      	b.n	8006be0 <xTimerGenericCommand+0x2c>
=======
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b08a      	sub	sp, #40	; 0x28
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	607a      	str	r2, [r7, #4]
 8006b40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006b42:	2300      	movs	r3, #0
 8006b44:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d10a      	bne.n	8006b62 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b50:	f383 8811 	msr	BASEPRI, r3
 8006b54:	f3bf 8f6f 	isb	sy
 8006b58:	f3bf 8f4f 	dsb	sy
 8006b5c:	623b      	str	r3, [r7, #32]
}
 8006b5e:	bf00      	nop
 8006b60:	e7fe      	b.n	8006b60 <xTimerGenericCommand+0x2c>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
<<<<<<< HEAD
 8006be2:	4b1a      	ldr	r3, [pc, #104]	; (8006c4c <xTimerGenericCommand+0x98>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d02a      	beq.n	8006c40 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	2b05      	cmp	r3, #5
 8006bfa:	dc18      	bgt.n	8006c2e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006bfc:	f7ff feb2 	bl	8006964 <xTaskGetSchedulerState>
 8006c00:	4603      	mov	r3, r0
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	d109      	bne.n	8006c1a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006c06:	4b11      	ldr	r3, [pc, #68]	; (8006c4c <xTimerGenericCommand+0x98>)
 8006c08:	6818      	ldr	r0, [r3, #0]
 8006c0a:	f107 0110 	add.w	r1, r7, #16
 8006c0e:	2300      	movs	r3, #0
 8006c10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c12:	f7fe fc77 	bl	8005504 <xQueueGenericSend>
 8006c16:	6278      	str	r0, [r7, #36]	; 0x24
 8006c18:	e012      	b.n	8006c40 <xTimerGenericCommand+0x8c>
=======
 8006b62:	4b1a      	ldr	r3, [pc, #104]	; (8006bcc <xTimerGenericCommand+0x98>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d02a      	beq.n	8006bc0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	2b05      	cmp	r3, #5
 8006b7a:	dc18      	bgt.n	8006bae <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006b7c:	f7ff feb2 	bl	80068e4 <xTaskGetSchedulerState>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d109      	bne.n	8006b9a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006b86:	4b11      	ldr	r3, [pc, #68]	; (8006bcc <xTimerGenericCommand+0x98>)
 8006b88:	6818      	ldr	r0, [r3, #0]
 8006b8a:	f107 0110 	add.w	r1, r7, #16
 8006b8e:	2300      	movs	r3, #0
 8006b90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b92:	f7fe fc77 	bl	8005484 <xQueueGenericSend>
 8006b96:	6278      	str	r0, [r7, #36]	; 0x24
 8006b98:	e012      	b.n	8006bc0 <xTimerGenericCommand+0x8c>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
<<<<<<< HEAD
 8006c1a:	4b0c      	ldr	r3, [pc, #48]	; (8006c4c <xTimerGenericCommand+0x98>)
 8006c1c:	6818      	ldr	r0, [r3, #0]
 8006c1e:	f107 0110 	add.w	r1, r7, #16
 8006c22:	2300      	movs	r3, #0
 8006c24:	2200      	movs	r2, #0
 8006c26:	f7fe fc6d 	bl	8005504 <xQueueGenericSend>
 8006c2a:	6278      	str	r0, [r7, #36]	; 0x24
 8006c2c:	e008      	b.n	8006c40 <xTimerGenericCommand+0x8c>
=======
 8006b9a:	4b0c      	ldr	r3, [pc, #48]	; (8006bcc <xTimerGenericCommand+0x98>)
 8006b9c:	6818      	ldr	r0, [r3, #0]
 8006b9e:	f107 0110 	add.w	r1, r7, #16
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f7fe fc6d 	bl	8005484 <xQueueGenericSend>
 8006baa:	6278      	str	r0, [r7, #36]	; 0x24
 8006bac:	e008      	b.n	8006bc0 <xTimerGenericCommand+0x8c>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
<<<<<<< HEAD
 8006c2e:	4b07      	ldr	r3, [pc, #28]	; (8006c4c <xTimerGenericCommand+0x98>)
 8006c30:	6818      	ldr	r0, [r3, #0]
 8006c32:	f107 0110 	add.w	r1, r7, #16
 8006c36:	2300      	movs	r3, #0
 8006c38:	683a      	ldr	r2, [r7, #0]
 8006c3a:	f7fe fd61 	bl	8005700 <xQueueGenericSendFromISR>
 8006c3e:	6278      	str	r0, [r7, #36]	; 0x24
=======
 8006bae:	4b07      	ldr	r3, [pc, #28]	; (8006bcc <xTimerGenericCommand+0x98>)
 8006bb0:	6818      	ldr	r0, [r3, #0]
 8006bb2:	f107 0110 	add.w	r1, r7, #16
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	683a      	ldr	r2, [r7, #0]
 8006bba:	f7fe fd61 	bl	8005680 <xQueueGenericSendFromISR>
 8006bbe:	6278      	str	r0, [r7, #36]	; 0x24
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
<<<<<<< HEAD
 8006c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3728      	adds	r7, #40	; 0x28
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	20001424 	.word	0x20001424

08006c50 <prvProcessExpiredTimer>:
=======
 8006bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3728      	adds	r7, #40	; 0x28
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	20001460 	.word	0x20001460

08006bd0 <prvProcessExpiredTimer>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
<<<<<<< HEAD
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b088      	sub	sp, #32
 8006c54:	af02      	add	r7, sp, #8
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c5a:	4b22      	ldr	r3, [pc, #136]	; (8006ce4 <prvProcessExpiredTimer+0x94>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	617b      	str	r3, [r7, #20]
=======
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b088      	sub	sp, #32
 8006bd4:	af02      	add	r7, sp, #8
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bda:	4b22      	ldr	r3, [pc, #136]	; (8006c64 <prvProcessExpiredTimer+0x94>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	617b      	str	r3, [r7, #20]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
<<<<<<< HEAD
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	3304      	adds	r3, #4
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f7fe fb1d 	bl	80052a8 <uxListRemove>
=======
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	3304      	adds	r3, #4
 8006be8:	4618      	mov	r0, r3
 8006bea:	f7fe fb1d 	bl	8005228 <uxListRemove>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
<<<<<<< HEAD
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c74:	f003 0304 	and.w	r3, r3, #4
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d022      	beq.n	8006cc2 <prvProcessExpiredTimer+0x72>
=======
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006bf4:	f003 0304 	and.w	r3, r3, #4
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d022      	beq.n	8006c42 <prvProcessExpiredTimer+0x72>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
<<<<<<< HEAD
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	699a      	ldr	r2, [r3, #24]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	18d1      	adds	r1, r2, r3
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	683a      	ldr	r2, [r7, #0]
 8006c88:	6978      	ldr	r0, [r7, #20]
 8006c8a:	f000 f8d1 	bl	8006e30 <prvInsertTimerInActiveList>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d01f      	beq.n	8006cd4 <prvProcessExpiredTimer+0x84>
=======
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	699a      	ldr	r2, [r3, #24]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	18d1      	adds	r1, r2, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	683a      	ldr	r2, [r7, #0]
 8006c08:	6978      	ldr	r0, [r7, #20]
 8006c0a:	f000 f8d1 	bl	8006db0 <prvInsertTimerInActiveList>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d01f      	beq.n	8006c54 <prvProcessExpiredTimer+0x84>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
<<<<<<< HEAD
 8006c94:	2300      	movs	r3, #0
 8006c96:	9300      	str	r3, [sp, #0]
 8006c98:	2300      	movs	r3, #0
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	2100      	movs	r1, #0
 8006c9e:	6978      	ldr	r0, [r7, #20]
 8006ca0:	f7ff ff88 	bl	8006bb4 <xTimerGenericCommand>
 8006ca4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d113      	bne.n	8006cd4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb0:	f383 8811 	msr	BASEPRI, r3
 8006cb4:	f3bf 8f6f 	isb	sy
 8006cb8:	f3bf 8f4f 	dsb	sy
 8006cbc:	60fb      	str	r3, [r7, #12]
}
 8006cbe:	bf00      	nop
 8006cc0:	e7fe      	b.n	8006cc0 <prvProcessExpiredTimer+0x70>
=======
 8006c14:	2300      	movs	r3, #0
 8006c16:	9300      	str	r3, [sp, #0]
 8006c18:	2300      	movs	r3, #0
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	2100      	movs	r1, #0
 8006c1e:	6978      	ldr	r0, [r7, #20]
 8006c20:	f7ff ff88 	bl	8006b34 <xTimerGenericCommand>
 8006c24:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d113      	bne.n	8006c54 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c30:	f383 8811 	msr	BASEPRI, r3
 8006c34:	f3bf 8f6f 	isb	sy
 8006c38:	f3bf 8f4f 	dsb	sy
 8006c3c:	60fb      	str	r3, [r7, #12]
}
 8006c3e:	bf00      	nop
 8006c40:	e7fe      	b.n	8006c40 <prvProcessExpiredTimer+0x70>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
<<<<<<< HEAD
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cc8:	f023 0301 	bic.w	r3, r3, #1
 8006ccc:	b2da      	uxtb	r2, r3
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
=======
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c48:	f023 0301 	bic.w	r3, r3, #1
 8006c4c:	b2da      	uxtb	r2, r3
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
<<<<<<< HEAD
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	6a1b      	ldr	r3, [r3, #32]
 8006cd8:	6978      	ldr	r0, [r7, #20]
 8006cda:	4798      	blx	r3
}
 8006cdc:	bf00      	nop
 8006cde:	3718      	adds	r7, #24
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	2000141c 	.word	0x2000141c

08006ce8 <prvTimerTask>:
=======
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	6a1b      	ldr	r3, [r3, #32]
 8006c58:	6978      	ldr	r0, [r7, #20]
 8006c5a:	4798      	blx	r3
}
 8006c5c:	bf00      	nop
 8006c5e:	3718      	adds	r7, #24
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}
 8006c64:	20001458 	.word	0x20001458

08006c68 <prvTimerTask>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
<<<<<<< HEAD
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
=======
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
<<<<<<< HEAD
 8006cf0:	f107 0308 	add.w	r3, r7, #8
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f000 f857 	bl	8006da8 <prvGetNextExpireTime>
 8006cfa:	60f8      	str	r0, [r7, #12]
=======
 8006c70:	f107 0308 	add.w	r3, r7, #8
 8006c74:	4618      	mov	r0, r3
 8006c76:	f000 f857 	bl	8006d28 <prvGetNextExpireTime>
 8006c7a:	60f8      	str	r0, [r7, #12]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
<<<<<<< HEAD
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	4619      	mov	r1, r3
 8006d00:	68f8      	ldr	r0, [r7, #12]
 8006d02:	f000 f803 	bl	8006d0c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006d06:	f000 f8d5 	bl	8006eb4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006d0a:	e7f1      	b.n	8006cf0 <prvTimerTask+0x8>

08006d0c <prvProcessTimerOrBlockTask>:
=======
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	4619      	mov	r1, r3
 8006c80:	68f8      	ldr	r0, [r7, #12]
 8006c82:	f000 f803 	bl	8006c8c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006c86:	f000 f8d5 	bl	8006e34 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006c8a:	e7f1      	b.n	8006c70 <prvTimerTask+0x8>

08006c8c <prvProcessTimerOrBlockTask>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
<<<<<<< HEAD
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
=======
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
<<<<<<< HEAD
 8006d16:	f7ff fa39 	bl	800618c <vTaskSuspendAll>
=======
 8006c96:	f7ff fa39 	bl	800610c <vTaskSuspendAll>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
<<<<<<< HEAD
 8006d1a:	f107 0308 	add.w	r3, r7, #8
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f000 f866 	bl	8006df0 <prvSampleTimeNow>
 8006d24:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d130      	bne.n	8006d8e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d10a      	bne.n	8006d48 <prvProcessTimerOrBlockTask+0x3c>
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d806      	bhi.n	8006d48 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006d3a:	f7ff fa35 	bl	80061a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006d3e:	68f9      	ldr	r1, [r7, #12]
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f7ff ff85 	bl	8006c50 <prvProcessExpiredTimer>
=======
 8006c9a:	f107 0308 	add.w	r3, r7, #8
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f000 f866 	bl	8006d70 <prvSampleTimeNow>
 8006ca4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d130      	bne.n	8006d0e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d10a      	bne.n	8006cc8 <prvProcessTimerOrBlockTask+0x3c>
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d806      	bhi.n	8006cc8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006cba:	f7ff fa35 	bl	8006128 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006cbe:	68f9      	ldr	r1, [r7, #12]
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f7ff ff85 	bl	8006bd0 <prvProcessExpiredTimer>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
<<<<<<< HEAD
 8006d46:	e024      	b.n	8006d92 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d008      	beq.n	8006d60 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006d4e:	4b13      	ldr	r3, [pc, #76]	; (8006d9c <prvProcessTimerOrBlockTask+0x90>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d101      	bne.n	8006d5c <prvProcessTimerOrBlockTask+0x50>
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e000      	b.n	8006d5e <prvProcessTimerOrBlockTask+0x52>
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006d60:	4b0f      	ldr	r3, [pc, #60]	; (8006da0 <prvProcessTimerOrBlockTask+0x94>)
 8006d62:	6818      	ldr	r0, [r3, #0]
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	1ad3      	subs	r3, r2, r3
 8006d6a:	683a      	ldr	r2, [r7, #0]
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	f7fe ff7d 	bl	8005c6c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006d72:	f7ff fa19 	bl	80061a8 <xTaskResumeAll>
 8006d76:	4603      	mov	r3, r0
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d10a      	bne.n	8006d92 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006d7c:	4b09      	ldr	r3, [pc, #36]	; (8006da4 <prvProcessTimerOrBlockTask+0x98>)
 8006d7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d82:	601a      	str	r2, [r3, #0]
 8006d84:	f3bf 8f4f 	dsb	sy
 8006d88:	f3bf 8f6f 	isb	sy
}
 8006d8c:	e001      	b.n	8006d92 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006d8e:	f7ff fa0b 	bl	80061a8 <xTaskResumeAll>
}
 8006d92:	bf00      	nop
 8006d94:	3710      	adds	r7, #16
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	bf00      	nop
 8006d9c:	20001420 	.word	0x20001420
 8006da0:	20001424 	.word	0x20001424
 8006da4:	e000ed04 	.word	0xe000ed04

08006da8 <prvGetNextExpireTime>:
=======
 8006cc6:	e024      	b.n	8006d12 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d008      	beq.n	8006ce0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006cce:	4b13      	ldr	r3, [pc, #76]	; (8006d1c <prvProcessTimerOrBlockTask+0x90>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d101      	bne.n	8006cdc <prvProcessTimerOrBlockTask+0x50>
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e000      	b.n	8006cde <prvProcessTimerOrBlockTask+0x52>
 8006cdc:	2300      	movs	r3, #0
 8006cde:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006ce0:	4b0f      	ldr	r3, [pc, #60]	; (8006d20 <prvProcessTimerOrBlockTask+0x94>)
 8006ce2:	6818      	ldr	r0, [r3, #0]
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	1ad3      	subs	r3, r2, r3
 8006cea:	683a      	ldr	r2, [r7, #0]
 8006cec:	4619      	mov	r1, r3
 8006cee:	f7fe ff7d 	bl	8005bec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006cf2:	f7ff fa19 	bl	8006128 <xTaskResumeAll>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d10a      	bne.n	8006d12 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006cfc:	4b09      	ldr	r3, [pc, #36]	; (8006d24 <prvProcessTimerOrBlockTask+0x98>)
 8006cfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d02:	601a      	str	r2, [r3, #0]
 8006d04:	f3bf 8f4f 	dsb	sy
 8006d08:	f3bf 8f6f 	isb	sy
}
 8006d0c:	e001      	b.n	8006d12 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006d0e:	f7ff fa0b 	bl	8006128 <xTaskResumeAll>
}
 8006d12:	bf00      	nop
 8006d14:	3710      	adds	r7, #16
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	2000145c 	.word	0x2000145c
 8006d20:	20001460 	.word	0x20001460
 8006d24:	e000ed04 	.word	0xe000ed04

08006d28 <prvGetNextExpireTime>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
<<<<<<< HEAD
 8006da8:	b480      	push	{r7}
 8006daa:	b085      	sub	sp, #20
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
=======
 8006d28:	b480      	push	{r7}
 8006d2a:	b085      	sub	sp, #20
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
<<<<<<< HEAD
 8006db0:	4b0e      	ldr	r3, [pc, #56]	; (8006dec <prvGetNextExpireTime+0x44>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d101      	bne.n	8006dbe <prvGetNextExpireTime+0x16>
 8006dba:	2201      	movs	r2, #1
 8006dbc:	e000      	b.n	8006dc0 <prvGetNextExpireTime+0x18>
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d105      	bne.n	8006dd8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006dcc:	4b07      	ldr	r3, [pc, #28]	; (8006dec <prvGetNextExpireTime+0x44>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	60fb      	str	r3, [r7, #12]
 8006dd6:	e001      	b.n	8006ddc <prvGetNextExpireTime+0x34>
=======
 8006d30:	4b0e      	ldr	r3, [pc, #56]	; (8006d6c <prvGetNextExpireTime+0x44>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d101      	bne.n	8006d3e <prvGetNextExpireTime+0x16>
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	e000      	b.n	8006d40 <prvGetNextExpireTime+0x18>
 8006d3e:	2200      	movs	r2, #0
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d105      	bne.n	8006d58 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d4c:	4b07      	ldr	r3, [pc, #28]	; (8006d6c <prvGetNextExpireTime+0x44>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	60fb      	str	r3, [r7, #12]
 8006d56:	e001      	b.n	8006d5c <prvGetNextExpireTime+0x34>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
<<<<<<< HEAD
 8006dd8:	2300      	movs	r3, #0
 8006dda:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3714      	adds	r7, #20
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr
 8006dea:	bf00      	nop
 8006dec:	2000141c 	.word	0x2000141c

08006df0 <prvSampleTimeNow>:
=======
 8006d58:	2300      	movs	r3, #0
 8006d5a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3714      	adds	r7, #20
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr
 8006d6a:	bf00      	nop
 8006d6c:	20001458 	.word	0x20001458

08006d70 <prvSampleTimeNow>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
<<<<<<< HEAD
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b084      	sub	sp, #16
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
=======
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
<<<<<<< HEAD
 8006df8:	f7ff fa74 	bl	80062e4 <xTaskGetTickCount>
 8006dfc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006dfe:	4b0b      	ldr	r3, [pc, #44]	; (8006e2c <prvSampleTimeNow+0x3c>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	68fa      	ldr	r2, [r7, #12]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d205      	bcs.n	8006e14 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006e08:	f000 f936 	bl	8007078 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	601a      	str	r2, [r3, #0]
 8006e12:	e002      	b.n	8006e1a <prvSampleTimeNow+0x2a>
=======
 8006d78:	f7ff fa74 	bl	8006264 <xTaskGetTickCount>
 8006d7c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006d7e:	4b0b      	ldr	r3, [pc, #44]	; (8006dac <prvSampleTimeNow+0x3c>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	68fa      	ldr	r2, [r7, #12]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d205      	bcs.n	8006d94 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006d88:	f000 f936 	bl	8006ff8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	601a      	str	r2, [r3, #0]
 8006d92:	e002      	b.n	8006d9a <prvSampleTimeNow+0x2a>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
<<<<<<< HEAD
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006e1a:	4a04      	ldr	r2, [pc, #16]	; (8006e2c <prvSampleTimeNow+0x3c>)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006e20:	68fb      	ldr	r3, [r7, #12]
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3710      	adds	r7, #16
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	2000142c 	.word	0x2000142c

08006e30 <prvInsertTimerInActiveList>:
=======
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006d9a:	4a04      	ldr	r2, [pc, #16]	; (8006dac <prvSampleTimeNow+0x3c>)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006da0:	68fb      	ldr	r3, [r7, #12]
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3710      	adds	r7, #16
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	20001468 	.word	0x20001468

08006db0 <prvInsertTimerInActiveList>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
<<<<<<< HEAD
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b086      	sub	sp, #24
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	607a      	str	r2, [r7, #4]
 8006e3c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	68ba      	ldr	r2, [r7, #8]
 8006e46:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	68fa      	ldr	r2, [r7, #12]
 8006e4c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006e4e:	68ba      	ldr	r2, [r7, #8]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d812      	bhi.n	8006e7c <prvInsertTimerInActiveList+0x4c>
=======
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b086      	sub	sp, #24
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	607a      	str	r2, [r7, #4]
 8006dbc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	68ba      	ldr	r2, [r7, #8]
 8006dc6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	68fa      	ldr	r2, [r7, #12]
 8006dcc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006dce:	68ba      	ldr	r2, [r7, #8]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d812      	bhi.n	8006dfc <prvInsertTimerInActiveList+0x4c>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< HEAD
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	1ad2      	subs	r2, r2, r3
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	699b      	ldr	r3, [r3, #24]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d302      	bcc.n	8006e6a <prvInsertTimerInActiveList+0x3a>
=======
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	1ad2      	subs	r2, r2, r3
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	699b      	ldr	r3, [r3, #24]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d302      	bcc.n	8006dea <prvInsertTimerInActiveList+0x3a>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
<<<<<<< HEAD
 8006e64:	2301      	movs	r3, #1
 8006e66:	617b      	str	r3, [r7, #20]
 8006e68:	e01b      	b.n	8006ea2 <prvInsertTimerInActiveList+0x72>
=======
 8006de4:	2301      	movs	r3, #1
 8006de6:	617b      	str	r3, [r7, #20]
 8006de8:	e01b      	b.n	8006e22 <prvInsertTimerInActiveList+0x72>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
<<<<<<< HEAD
 8006e6a:	4b10      	ldr	r3, [pc, #64]	; (8006eac <prvInsertTimerInActiveList+0x7c>)
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	3304      	adds	r3, #4
 8006e72:	4619      	mov	r1, r3
 8006e74:	4610      	mov	r0, r2
 8006e76:	f7fe f9de 	bl	8005236 <vListInsert>
 8006e7a:	e012      	b.n	8006ea2 <prvInsertTimerInActiveList+0x72>
=======
 8006dea:	4b10      	ldr	r3, [pc, #64]	; (8006e2c <prvInsertTimerInActiveList+0x7c>)
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	3304      	adds	r3, #4
 8006df2:	4619      	mov	r1, r3
 8006df4:	4610      	mov	r0, r2
 8006df6:	f7fe f9de 	bl	80051b6 <vListInsert>
 8006dfa:	e012      	b.n	8006e22 <prvInsertTimerInActiveList+0x72>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
<<<<<<< HEAD
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d206      	bcs.n	8006e92 <prvInsertTimerInActiveList+0x62>
 8006e84:	68ba      	ldr	r2, [r7, #8]
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d302      	bcc.n	8006e92 <prvInsertTimerInActiveList+0x62>
=======
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d206      	bcs.n	8006e12 <prvInsertTimerInActiveList+0x62>
 8006e04:	68ba      	ldr	r2, [r7, #8]
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d302      	bcc.n	8006e12 <prvInsertTimerInActiveList+0x62>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
<<<<<<< HEAD
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	617b      	str	r3, [r7, #20]
 8006e90:	e007      	b.n	8006ea2 <prvInsertTimerInActiveList+0x72>
=======
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	617b      	str	r3, [r7, #20]
 8006e10:	e007      	b.n	8006e22 <prvInsertTimerInActiveList+0x72>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
<<<<<<< HEAD
 8006e92:	4b07      	ldr	r3, [pc, #28]	; (8006eb0 <prvInsertTimerInActiveList+0x80>)
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	3304      	adds	r3, #4
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	4610      	mov	r0, r2
 8006e9e:	f7fe f9ca 	bl	8005236 <vListInsert>
=======
 8006e12:	4b07      	ldr	r3, [pc, #28]	; (8006e30 <prvInsertTimerInActiveList+0x80>)
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	3304      	adds	r3, #4
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	4610      	mov	r0, r2
 8006e1e:	f7fe f9ca 	bl	80051b6 <vListInsert>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		}
	}

	return xProcessTimerNow;
<<<<<<< HEAD
 8006ea2:	697b      	ldr	r3, [r7, #20]
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3718      	adds	r7, #24
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	20001420 	.word	0x20001420
 8006eb0:	2000141c 	.word	0x2000141c

08006eb4 <prvProcessReceivedCommands>:
=======
 8006e22:	697b      	ldr	r3, [r7, #20]
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3718      	adds	r7, #24
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}
 8006e2c:	2000145c 	.word	0x2000145c
 8006e30:	20001458 	.word	0x20001458

08006e34 <prvProcessReceivedCommands>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
<<<<<<< HEAD
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b08e      	sub	sp, #56	; 0x38
 8006eb8:	af02      	add	r7, sp, #8
=======
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b08e      	sub	sp, #56	; 0x38
 8006e38:	af02      	add	r7, sp, #8
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
<<<<<<< HEAD
 8006eba:	e0ca      	b.n	8007052 <prvProcessReceivedCommands+0x19e>
=======
 8006e3a:	e0ca      	b.n	8006fd2 <prvProcessReceivedCommands+0x19e>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
<<<<<<< HEAD
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	da18      	bge.n	8006ef4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006ec2:	1d3b      	adds	r3, r7, #4
 8006ec4:	3304      	adds	r3, #4
 8006ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	da18      	bge.n	8006e74 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006e42:	1d3b      	adds	r3, r7, #4
 8006e44:	3304      	adds	r3, #4
 8006e46:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
<<<<<<< HEAD
 8006ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d10a      	bne.n	8006ee4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed2:	f383 8811 	msr	BASEPRI, r3
 8006ed6:	f3bf 8f6f 	isb	sy
 8006eda:	f3bf 8f4f 	dsb	sy
 8006ede:	61fb      	str	r3, [r7, #28]
}
 8006ee0:	bf00      	nop
 8006ee2:	e7fe      	b.n	8006ee2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006eea:	6850      	ldr	r0, [r2, #4]
 8006eec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006eee:	6892      	ldr	r2, [r2, #8]
 8006ef0:	4611      	mov	r1, r2
 8006ef2:	4798      	blx	r3
=======
 8006e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d10a      	bne.n	8006e64 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e52:	f383 8811 	msr	BASEPRI, r3
 8006e56:	f3bf 8f6f 	isb	sy
 8006e5a:	f3bf 8f4f 	dsb	sy
 8006e5e:	61fb      	str	r3, [r7, #28]
}
 8006e60:	bf00      	nop
 8006e62:	e7fe      	b.n	8006e62 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e6a:	6850      	ldr	r0, [r2, #4]
 8006e6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e6e:	6892      	ldr	r2, [r2, #8]
 8006e70:	4611      	mov	r1, r2
 8006e72:	4798      	blx	r3
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
<<<<<<< HEAD
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	f2c0 80ab 	blt.w	8007052 <prvProcessReceivedCommands+0x19e>
=======
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	f2c0 80aa 	blt.w	8006fd0 <prvProcessReceivedCommands+0x19c>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
<<<<<<< HEAD
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f02:	695b      	ldr	r3, [r3, #20]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d004      	beq.n	8006f12 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f0a:	3304      	adds	r3, #4
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f7fe f9cb 	bl	80052a8 <uxListRemove>
=======
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e82:	695b      	ldr	r3, [r3, #20]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d004      	beq.n	8006e92 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e8a:	3304      	adds	r3, #4
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f7fe f9cb 	bl	8005228 <uxListRemove>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
<<<<<<< HEAD
 8006f12:	463b      	mov	r3, r7
 8006f14:	4618      	mov	r0, r3
 8006f16:	f7ff ff6b 	bl	8006df0 <prvSampleTimeNow>
 8006f1a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2b09      	cmp	r3, #9
 8006f20:	f200 8096 	bhi.w	8007050 <prvProcessReceivedCommands+0x19c>
 8006f24:	a201      	add	r2, pc, #4	; (adr r2, 8006f2c <prvProcessReceivedCommands+0x78>)
 8006f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f2a:	bf00      	nop
 8006f2c:	08006f55 	.word	0x08006f55
 8006f30:	08006f55 	.word	0x08006f55
 8006f34:	08006f55 	.word	0x08006f55
 8006f38:	08006fc9 	.word	0x08006fc9
 8006f3c:	08006fdd 	.word	0x08006fdd
 8006f40:	08007027 	.word	0x08007027
 8006f44:	08006f55 	.word	0x08006f55
 8006f48:	08006f55 	.word	0x08006f55
 8006f4c:	08006fc9 	.word	0x08006fc9
 8006f50:	08006fdd 	.word	0x08006fdd
=======
 8006e92:	463b      	mov	r3, r7
 8006e94:	4618      	mov	r0, r3
 8006e96:	f7ff ff6b 	bl	8006d70 <prvSampleTimeNow>
 8006e9a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2b09      	cmp	r3, #9
 8006ea0:	f200 8097 	bhi.w	8006fd2 <prvProcessReceivedCommands+0x19e>
 8006ea4:	a201      	add	r2, pc, #4	; (adr r2, 8006eac <prvProcessReceivedCommands+0x78>)
 8006ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eaa:	bf00      	nop
 8006eac:	08006ed5 	.word	0x08006ed5
 8006eb0:	08006ed5 	.word	0x08006ed5
 8006eb4:	08006ed5 	.word	0x08006ed5
 8006eb8:	08006f49 	.word	0x08006f49
 8006ebc:	08006f5d 	.word	0x08006f5d
 8006ec0:	08006fa7 	.word	0x08006fa7
 8006ec4:	08006ed5 	.word	0x08006ed5
 8006ec8:	08006ed5 	.word	0x08006ed5
 8006ecc:	08006f49 	.word	0x08006f49
 8006ed0:	08006f5d 	.word	0x08006f5d
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
<<<<<<< HEAD
 8006f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f5a:	f043 0301 	orr.w	r3, r3, #1
 8006f5e:	b2da      	uxtb	r2, r3
 8006f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006f66:	68ba      	ldr	r2, [r7, #8]
 8006f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6a:	699b      	ldr	r3, [r3, #24]
 8006f6c:	18d1      	adds	r1, r2, r3
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f74:	f7ff ff5c 	bl	8006e30 <prvInsertTimerInActiveList>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d069      	beq.n	8007052 <prvProcessReceivedCommands+0x19e>
=======
 8006ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006eda:	f043 0301 	orr.w	r3, r3, #1
 8006ede:	b2da      	uxtb	r2, r3
 8006ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006ee6:	68ba      	ldr	r2, [r7, #8]
 8006ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eea:	699b      	ldr	r3, [r3, #24]
 8006eec:	18d1      	adds	r1, r2, r3
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ef2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ef4:	f7ff ff5c 	bl	8006db0 <prvInsertTimerInActiveList>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d069      	beq.n	8006fd2 <prvProcessReceivedCommands+0x19e>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
<<<<<<< HEAD
 8006f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f80:	6a1b      	ldr	r3, [r3, #32]
 8006f82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f84:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f8c:	f003 0304 	and.w	r3, r3, #4
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d05e      	beq.n	8007052 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006f94:	68ba      	ldr	r2, [r7, #8]
 8006f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f98:	699b      	ldr	r3, [r3, #24]
 8006f9a:	441a      	add	r2, r3
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	9300      	str	r3, [sp, #0]
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	2100      	movs	r1, #0
 8006fa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fa6:	f7ff fe05 	bl	8006bb4 <xTimerGenericCommand>
 8006faa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006fac:	6a3b      	ldr	r3, [r7, #32]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d14f      	bne.n	8007052 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb6:	f383 8811 	msr	BASEPRI, r3
 8006fba:	f3bf 8f6f 	isb	sy
 8006fbe:	f3bf 8f4f 	dsb	sy
 8006fc2:	61bb      	str	r3, [r7, #24]
}
 8006fc4:	bf00      	nop
 8006fc6:	e7fe      	b.n	8006fc6 <prvProcessReceivedCommands+0x112>
=======
 8006efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f00:	6a1b      	ldr	r3, [r3, #32]
 8006f02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f04:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f0c:	f003 0304 	and.w	r3, r3, #4
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d05e      	beq.n	8006fd2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006f14:	68ba      	ldr	r2, [r7, #8]
 8006f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f18:	699b      	ldr	r3, [r3, #24]
 8006f1a:	441a      	add	r2, r3
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	9300      	str	r3, [sp, #0]
 8006f20:	2300      	movs	r3, #0
 8006f22:	2100      	movs	r1, #0
 8006f24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f26:	f7ff fe05 	bl	8006b34 <xTimerGenericCommand>
 8006f2a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006f2c:	6a3b      	ldr	r3, [r7, #32]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d14f      	bne.n	8006fd2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f36:	f383 8811 	msr	BASEPRI, r3
 8006f3a:	f3bf 8f6f 	isb	sy
 8006f3e:	f3bf 8f4f 	dsb	sy
 8006f42:	61bb      	str	r3, [r7, #24]
}
 8006f44:	bf00      	nop
 8006f46:	e7fe      	b.n	8006f46 <prvProcessReceivedCommands+0x112>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
<<<<<<< HEAD
 8006fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006fce:	f023 0301 	bic.w	r3, r3, #1
 8006fd2:	b2da      	uxtb	r2, r3
 8006fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006fda:	e03a      	b.n	8007052 <prvProcessReceivedCommands+0x19e>
=======
 8006f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f4e:	f023 0301 	bic.w	r3, r3, #1
 8006f52:	b2da      	uxtb	r2, r3
 8006f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006f5a:	e03a      	b.n	8006fd2 <prvProcessReceivedCommands+0x19e>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
<<<<<<< HEAD
 8006fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006fe2:	f043 0301 	orr.w	r3, r3, #1
 8006fe6:	b2da      	uxtb	r2, r3
 8006fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006fee:	68ba      	ldr	r2, [r7, #8]
 8006ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff6:	699b      	ldr	r3, [r3, #24]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d10a      	bne.n	8007012 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007000:	f383 8811 	msr	BASEPRI, r3
 8007004:	f3bf 8f6f 	isb	sy
 8007008:	f3bf 8f4f 	dsb	sy
 800700c:	617b      	str	r3, [r7, #20]
}
 800700e:	bf00      	nop
 8007010:	e7fe      	b.n	8007010 <prvProcessReceivedCommands+0x15c>
=======
 8006f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f62:	f043 0301 	orr.w	r3, r3, #1
 8006f66:	b2da      	uxtb	r2, r3
 8006f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006f6e:	68ba      	ldr	r2, [r7, #8]
 8006f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f72:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f76:	699b      	ldr	r3, [r3, #24]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d10a      	bne.n	8006f92 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f80:	f383 8811 	msr	BASEPRI, r3
 8006f84:	f3bf 8f6f 	isb	sy
 8006f88:	f3bf 8f4f 	dsb	sy
 8006f8c:	617b      	str	r3, [r7, #20]
}
 8006f8e:	bf00      	nop
 8006f90:	e7fe      	b.n	8006f90 <prvProcessReceivedCommands+0x15c>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
<<<<<<< HEAD
 8007012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007014:	699a      	ldr	r2, [r3, #24]
 8007016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007018:	18d1      	adds	r1, r2, r3
 800701a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800701e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007020:	f7ff ff06 	bl	8006e30 <prvInsertTimerInActiveList>
					break;
 8007024:	e015      	b.n	8007052 <prvProcessReceivedCommands+0x19e>
=======
 8006f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f94:	699a      	ldr	r2, [r3, #24]
 8006f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f98:	18d1      	adds	r1, r2, r3
 8006f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fa0:	f7ff ff06 	bl	8006db0 <prvInsertTimerInActiveList>
					break;
 8006fa4:	e015      	b.n	8006fd2 <prvProcessReceivedCommands+0x19e>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
<<<<<<< HEAD
 8007026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007028:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800702c:	f003 0302 	and.w	r3, r3, #2
 8007030:	2b00      	cmp	r3, #0
 8007032:	d103      	bne.n	800703c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007034:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007036:	f000 fbdb 	bl	80077f0 <vPortFree>
 800703a:	e00a      	b.n	8007052 <prvProcessReceivedCommands+0x19e>
=======
 8006fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006fac:	f003 0302 	and.w	r3, r3, #2
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d103      	bne.n	8006fbc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006fb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fb6:	f000 fbdb 	bl	8007770 <vPortFree>
 8006fba:	e00a      	b.n	8006fd2 <prvProcessReceivedCommands+0x19e>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
<<<<<<< HEAD
 800703c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800703e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007042:	f023 0301 	bic.w	r3, r3, #1
 8007046:	b2da      	uxtb	r2, r3
 8007048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800704a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
=======
 8006fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006fc2:	f023 0301 	bic.w	r3, r3, #1
 8006fc6:	b2da      	uxtb	r2, r3
 8006fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
<<<<<<< HEAD
 800704e:	e000      	b.n	8007052 <prvProcessReceivedCommands+0x19e>
=======
 8006fce:	e000      	b.n	8006fd2 <prvProcessReceivedCommands+0x19e>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

				default	:
					/* Don't expect to get here. */
					break;
<<<<<<< HEAD
 8007050:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007052:	4b08      	ldr	r3, [pc, #32]	; (8007074 <prvProcessReceivedCommands+0x1c0>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	1d39      	adds	r1, r7, #4
 8007058:	2200      	movs	r2, #0
 800705a:	4618      	mov	r0, r3
 800705c:	f7fe fbec 	bl	8005838 <xQueueReceive>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	f47f af2a 	bne.w	8006ebc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007068:	bf00      	nop
 800706a:	bf00      	nop
 800706c:	3730      	adds	r7, #48	; 0x30
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	20001424 	.word	0x20001424

08007078 <prvSwitchTimerLists>:
=======
			}
		}
 8006fd0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006fd2:	4b08      	ldr	r3, [pc, #32]	; (8006ff4 <prvProcessReceivedCommands+0x1c0>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	1d39      	adds	r1, r7, #4
 8006fd8:	2200      	movs	r2, #0
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7fe fbec 	bl	80057b8 <xQueueReceive>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	f47f af2a 	bne.w	8006e3c <prvProcessReceivedCommands+0x8>
	}
}
 8006fe8:	bf00      	nop
 8006fea:	bf00      	nop
 8006fec:	3730      	adds	r7, #48	; 0x30
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	20001460 	.word	0x20001460

08006ff8 <prvSwitchTimerLists>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
<<<<<<< HEAD
 8007078:	b580      	push	{r7, lr}
 800707a:	b088      	sub	sp, #32
 800707c:	af02      	add	r7, sp, #8
=======
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b088      	sub	sp, #32
 8006ffc:	af02      	add	r7, sp, #8
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
<<<<<<< HEAD
 800707e:	e048      	b.n	8007112 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007080:	4b2d      	ldr	r3, [pc, #180]	; (8007138 <prvSwitchTimerLists+0xc0>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800708a:	4b2b      	ldr	r3, [pc, #172]	; (8007138 <prvSwitchTimerLists+0xc0>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	3304      	adds	r3, #4
 8007098:	4618      	mov	r0, r3
 800709a:	f7fe f905 	bl	80052a8 <uxListRemove>
=======
 8006ffe:	e048      	b.n	8007092 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007000:	4b2d      	ldr	r3, [pc, #180]	; (80070b8 <prvSwitchTimerLists+0xc0>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68db      	ldr	r3, [r3, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800700a:	4b2b      	ldr	r3, [pc, #172]	; (80070b8 <prvSwitchTimerLists+0xc0>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	3304      	adds	r3, #4
 8007018:	4618      	mov	r0, r3
 800701a:	f7fe f905 	bl	8005228 <uxListRemove>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
<<<<<<< HEAD
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	6a1b      	ldr	r3, [r3, #32]
 80070a2:	68f8      	ldr	r0, [r7, #12]
 80070a4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070ac:	f003 0304 	and.w	r3, r3, #4
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d02e      	beq.n	8007112 <prvSwitchTimerLists+0x9a>
=======
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	6a1b      	ldr	r3, [r3, #32]
 8007022:	68f8      	ldr	r0, [r7, #12]
 8007024:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800702c:	f003 0304 	and.w	r3, r3, #4
 8007030:	2b00      	cmp	r3, #0
 8007032:	d02e      	beq.n	8007092 <prvSwitchTimerLists+0x9a>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
<<<<<<< HEAD
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	699b      	ldr	r3, [r3, #24]
 80070b8:	693a      	ldr	r2, [r7, #16]
 80070ba:	4413      	add	r3, r2
 80070bc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80070be:	68ba      	ldr	r2, [r7, #8]
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d90e      	bls.n	80070e4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	68ba      	ldr	r2, [r7, #8]
 80070ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	68fa      	ldr	r2, [r7, #12]
 80070d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80070d2:	4b19      	ldr	r3, [pc, #100]	; (8007138 <prvSwitchTimerLists+0xc0>)
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	3304      	adds	r3, #4
 80070da:	4619      	mov	r1, r3
 80070dc:	4610      	mov	r0, r2
 80070de:	f7fe f8aa 	bl	8005236 <vListInsert>
 80070e2:	e016      	b.n	8007112 <prvSwitchTimerLists+0x9a>
=======
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	699b      	ldr	r3, [r3, #24]
 8007038:	693a      	ldr	r2, [r7, #16]
 800703a:	4413      	add	r3, r2
 800703c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800703e:	68ba      	ldr	r2, [r7, #8]
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	429a      	cmp	r2, r3
 8007044:	d90e      	bls.n	8007064 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	68ba      	ldr	r2, [r7, #8]
 800704a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007052:	4b19      	ldr	r3, [pc, #100]	; (80070b8 <prvSwitchTimerLists+0xc0>)
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	3304      	adds	r3, #4
 800705a:	4619      	mov	r1, r3
 800705c:	4610      	mov	r0, r2
 800705e:	f7fe f8aa 	bl	80051b6 <vListInsert>
 8007062:	e016      	b.n	8007092 <prvSwitchTimerLists+0x9a>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
<<<<<<< HEAD
 80070e4:	2300      	movs	r3, #0
 80070e6:	9300      	str	r3, [sp, #0]
 80070e8:	2300      	movs	r3, #0
 80070ea:	693a      	ldr	r2, [r7, #16]
 80070ec:	2100      	movs	r1, #0
 80070ee:	68f8      	ldr	r0, [r7, #12]
 80070f0:	f7ff fd60 	bl	8006bb4 <xTimerGenericCommand>
 80070f4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d10a      	bne.n	8007112 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80070fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007100:	f383 8811 	msr	BASEPRI, r3
 8007104:	f3bf 8f6f 	isb	sy
 8007108:	f3bf 8f4f 	dsb	sy
 800710c:	603b      	str	r3, [r7, #0]
}
 800710e:	bf00      	nop
 8007110:	e7fe      	b.n	8007110 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007112:	4b09      	ldr	r3, [pc, #36]	; (8007138 <prvSwitchTimerLists+0xc0>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d1b1      	bne.n	8007080 <prvSwitchTimerLists+0x8>
=======
 8007064:	2300      	movs	r3, #0
 8007066:	9300      	str	r3, [sp, #0]
 8007068:	2300      	movs	r3, #0
 800706a:	693a      	ldr	r2, [r7, #16]
 800706c:	2100      	movs	r1, #0
 800706e:	68f8      	ldr	r0, [r7, #12]
 8007070:	f7ff fd60 	bl	8006b34 <xTimerGenericCommand>
 8007074:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d10a      	bne.n	8007092 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800707c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007080:	f383 8811 	msr	BASEPRI, r3
 8007084:	f3bf 8f6f 	isb	sy
 8007088:	f3bf 8f4f 	dsb	sy
 800708c:	603b      	str	r3, [r7, #0]
}
 800708e:	bf00      	nop
 8007090:	e7fe      	b.n	8007090 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007092:	4b09      	ldr	r3, [pc, #36]	; (80070b8 <prvSwitchTimerLists+0xc0>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d1b1      	bne.n	8007000 <prvSwitchTimerLists+0x8>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
<<<<<<< HEAD
 800711c:	4b06      	ldr	r3, [pc, #24]	; (8007138 <prvSwitchTimerLists+0xc0>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007122:	4b06      	ldr	r3, [pc, #24]	; (800713c <prvSwitchTimerLists+0xc4>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a04      	ldr	r2, [pc, #16]	; (8007138 <prvSwitchTimerLists+0xc0>)
 8007128:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800712a:	4a04      	ldr	r2, [pc, #16]	; (800713c <prvSwitchTimerLists+0xc4>)
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	6013      	str	r3, [r2, #0]
}
 8007130:	bf00      	nop
 8007132:	3718      	adds	r7, #24
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}
 8007138:	2000141c 	.word	0x2000141c
 800713c:	20001420 	.word	0x20001420

08007140 <prvCheckForValidListAndQueue>:
=======
 800709c:	4b06      	ldr	r3, [pc, #24]	; (80070b8 <prvSwitchTimerLists+0xc0>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80070a2:	4b06      	ldr	r3, [pc, #24]	; (80070bc <prvSwitchTimerLists+0xc4>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a04      	ldr	r2, [pc, #16]	; (80070b8 <prvSwitchTimerLists+0xc0>)
 80070a8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80070aa:	4a04      	ldr	r2, [pc, #16]	; (80070bc <prvSwitchTimerLists+0xc4>)
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	6013      	str	r3, [r2, #0]
}
 80070b0:	bf00      	nop
 80070b2:	3718      	adds	r7, #24
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	20001458 	.word	0x20001458
 80070bc:	2000145c 	.word	0x2000145c

080070c0 <prvCheckForValidListAndQueue>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
<<<<<<< HEAD
 8007140:	b580      	push	{r7, lr}
 8007142:	b082      	sub	sp, #8
 8007144:	af02      	add	r7, sp, #8
=======
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b082      	sub	sp, #8
 80070c4:	af02      	add	r7, sp, #8
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
<<<<<<< HEAD
 8007146:	f000 f965 	bl	8007414 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800714a:	4b15      	ldr	r3, [pc, #84]	; (80071a0 <prvCheckForValidListAndQueue+0x60>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d120      	bne.n	8007194 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007152:	4814      	ldr	r0, [pc, #80]	; (80071a4 <prvCheckForValidListAndQueue+0x64>)
 8007154:	f7fe f81e 	bl	8005194 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007158:	4813      	ldr	r0, [pc, #76]	; (80071a8 <prvCheckForValidListAndQueue+0x68>)
 800715a:	f7fe f81b 	bl	8005194 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800715e:	4b13      	ldr	r3, [pc, #76]	; (80071ac <prvCheckForValidListAndQueue+0x6c>)
 8007160:	4a10      	ldr	r2, [pc, #64]	; (80071a4 <prvCheckForValidListAndQueue+0x64>)
 8007162:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007164:	4b12      	ldr	r3, [pc, #72]	; (80071b0 <prvCheckForValidListAndQueue+0x70>)
 8007166:	4a10      	ldr	r2, [pc, #64]	; (80071a8 <prvCheckForValidListAndQueue+0x68>)
 8007168:	601a      	str	r2, [r3, #0]
=======
 80070c6:	f000 f965 	bl	8007394 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80070ca:	4b15      	ldr	r3, [pc, #84]	; (8007120 <prvCheckForValidListAndQueue+0x60>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d120      	bne.n	8007114 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80070d2:	4814      	ldr	r0, [pc, #80]	; (8007124 <prvCheckForValidListAndQueue+0x64>)
 80070d4:	f7fe f81e 	bl	8005114 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80070d8:	4813      	ldr	r0, [pc, #76]	; (8007128 <prvCheckForValidListAndQueue+0x68>)
 80070da:	f7fe f81b 	bl	8005114 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80070de:	4b13      	ldr	r3, [pc, #76]	; (800712c <prvCheckForValidListAndQueue+0x6c>)
 80070e0:	4a10      	ldr	r2, [pc, #64]	; (8007124 <prvCheckForValidListAndQueue+0x64>)
 80070e2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80070e4:	4b12      	ldr	r3, [pc, #72]	; (8007130 <prvCheckForValidListAndQueue+0x70>)
 80070e6:	4a10      	ldr	r2, [pc, #64]	; (8007128 <prvCheckForValidListAndQueue+0x68>)
 80070e8:	601a      	str	r2, [r3, #0]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
<<<<<<< HEAD
 800716a:	2300      	movs	r3, #0
 800716c:	9300      	str	r3, [sp, #0]
 800716e:	4b11      	ldr	r3, [pc, #68]	; (80071b4 <prvCheckForValidListAndQueue+0x74>)
 8007170:	4a11      	ldr	r2, [pc, #68]	; (80071b8 <prvCheckForValidListAndQueue+0x78>)
 8007172:	2110      	movs	r1, #16
 8007174:	200a      	movs	r0, #10
 8007176:	f7fe f929 	bl	80053cc <xQueueGenericCreateStatic>
 800717a:	4603      	mov	r3, r0
 800717c:	4a08      	ldr	r2, [pc, #32]	; (80071a0 <prvCheckForValidListAndQueue+0x60>)
 800717e:	6013      	str	r3, [r2, #0]
=======
 80070ea:	2300      	movs	r3, #0
 80070ec:	9300      	str	r3, [sp, #0]
 80070ee:	4b11      	ldr	r3, [pc, #68]	; (8007134 <prvCheckForValidListAndQueue+0x74>)
 80070f0:	4a11      	ldr	r2, [pc, #68]	; (8007138 <prvCheckForValidListAndQueue+0x78>)
 80070f2:	2110      	movs	r1, #16
 80070f4:	200a      	movs	r0, #10
 80070f6:	f7fe f929 	bl	800534c <xQueueGenericCreateStatic>
 80070fa:	4603      	mov	r3, r0
 80070fc:	4a08      	ldr	r2, [pc, #32]	; (8007120 <prvCheckForValidListAndQueue+0x60>)
 80070fe:	6013      	str	r3, [r2, #0]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
<<<<<<< HEAD
 8007180:	4b07      	ldr	r3, [pc, #28]	; (80071a0 <prvCheckForValidListAndQueue+0x60>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d005      	beq.n	8007194 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007188:	4b05      	ldr	r3, [pc, #20]	; (80071a0 <prvCheckForValidListAndQueue+0x60>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	490b      	ldr	r1, [pc, #44]	; (80071bc <prvCheckForValidListAndQueue+0x7c>)
 800718e:	4618      	mov	r0, r3
 8007190:	f7fe fd42 	bl	8005c18 <vQueueAddToRegistry>
=======
 8007100:	4b07      	ldr	r3, [pc, #28]	; (8007120 <prvCheckForValidListAndQueue+0x60>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d005      	beq.n	8007114 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007108:	4b05      	ldr	r3, [pc, #20]	; (8007120 <prvCheckForValidListAndQueue+0x60>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	490b      	ldr	r1, [pc, #44]	; (800713c <prvCheckForValidListAndQueue+0x7c>)
 800710e:	4618      	mov	r0, r3
 8007110:	f7fe fd42 	bl	8005b98 <vQueueAddToRegistry>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
 8007194:	f000 f96e 	bl	8007474 <vPortExitCritical>
}
 8007198:	bf00      	nop
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	20001424 	.word	0x20001424
 80071a4:	200013f4 	.word	0x200013f4
 80071a8:	20001408 	.word	0x20001408
 80071ac:	2000141c 	.word	0x2000141c
 80071b0:	20001420 	.word	0x20001420
 80071b4:	200014d0 	.word	0x200014d0
 80071b8:	20001430 	.word	0x20001430
 80071bc:	08007c68 	.word	0x08007c68

080071c0 <pxPortInitialiseStack>:
=======
 8007114:	f000 f96e 	bl	80073f4 <vPortExitCritical>
}
 8007118:	bf00      	nop
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	20001460 	.word	0x20001460
 8007124:	20001430 	.word	0x20001430
 8007128:	20001444 	.word	0x20001444
 800712c:	20001458 	.word	0x20001458
 8007130:	2000145c 	.word	0x2000145c
 8007134:	2000150c 	.word	0x2000150c
 8007138:	2000146c 	.word	0x2000146c
 800713c:	08007c10 	.word	0x08007c10

08007140 <pxPortInitialiseStack>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
<<<<<<< HEAD
 80071c0:	b480      	push	{r7}
 80071c2:	b085      	sub	sp, #20
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	60b9      	str	r1, [r7, #8]
 80071ca:	607a      	str	r2, [r7, #4]
=======
 8007140:	b480      	push	{r7}
 8007142:	b085      	sub	sp, #20
 8007144:	af00      	add	r7, sp, #0
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	607a      	str	r2, [r7, #4]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
<<<<<<< HEAD
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	3b04      	subs	r3, #4
 80071d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80071d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	3b04      	subs	r3, #4
 80071de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	f023 0201 	bic.w	r2, r3, #1
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	3b04      	subs	r3, #4
 80071ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80071f0:	4a0c      	ldr	r2, [pc, #48]	; (8007224 <pxPortInitialiseStack+0x64>)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	3b14      	subs	r3, #20
 80071fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	601a      	str	r2, [r3, #0]
=======
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	3b04      	subs	r3, #4
 8007150:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007158:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	3b04      	subs	r3, #4
 800715e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	f023 0201 	bic.w	r2, r3, #1
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	3b04      	subs	r3, #4
 800716e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007170:	4a0c      	ldr	r2, [pc, #48]	; (80071a4 <pxPortInitialiseStack+0x64>)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	3b14      	subs	r3, #20
 800717a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	601a      	str	r2, [r3, #0]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
<<<<<<< HEAD
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	3b04      	subs	r3, #4
 8007206:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f06f 0202 	mvn.w	r2, #2
 800720e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	3b20      	subs	r3, #32
 8007214:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007216:	68fb      	ldr	r3, [r7, #12]
}
 8007218:	4618      	mov	r0, r3
 800721a:	3714      	adds	r7, #20
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr
 8007224:	08007229 	.word	0x08007229

08007228 <prvTaskExitError>:
=======
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	3b04      	subs	r3, #4
 8007186:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f06f 0202 	mvn.w	r2, #2
 800718e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	3b20      	subs	r3, #32
 8007194:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007196:	68fb      	ldr	r3, [r7, #12]
}
 8007198:	4618      	mov	r0, r3
 800719a:	3714      	adds	r7, #20
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr
 80071a4:	080071a9 	.word	0x080071a9

080071a8 <prvTaskExitError>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
<<<<<<< HEAD
 8007228:	b480      	push	{r7}
 800722a:	b085      	sub	sp, #20
 800722c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800722e:	2300      	movs	r3, #0
 8007230:	607b      	str	r3, [r7, #4]
=======
 80071a8:	b480      	push	{r7}
 80071aa:	b085      	sub	sp, #20
 80071ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80071ae:	2300      	movs	r3, #0
 80071b0:	607b      	str	r3, [r7, #4]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
<<<<<<< HEAD
 8007232:	4b12      	ldr	r3, [pc, #72]	; (800727c <prvTaskExitError+0x54>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800723a:	d00a      	beq.n	8007252 <prvTaskExitError+0x2a>
	__asm volatile
 800723c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007240:	f383 8811 	msr	BASEPRI, r3
 8007244:	f3bf 8f6f 	isb	sy
 8007248:	f3bf 8f4f 	dsb	sy
 800724c:	60fb      	str	r3, [r7, #12]
}
 800724e:	bf00      	nop
 8007250:	e7fe      	b.n	8007250 <prvTaskExitError+0x28>
	__asm volatile
 8007252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007256:	f383 8811 	msr	BASEPRI, r3
 800725a:	f3bf 8f6f 	isb	sy
 800725e:	f3bf 8f4f 	dsb	sy
 8007262:	60bb      	str	r3, [r7, #8]
}
 8007264:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007266:	bf00      	nop
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d0fc      	beq.n	8007268 <prvTaskExitError+0x40>
=======
 80071b2:	4b12      	ldr	r3, [pc, #72]	; (80071fc <prvTaskExitError+0x54>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ba:	d00a      	beq.n	80071d2 <prvTaskExitError+0x2a>
	__asm volatile
 80071bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c0:	f383 8811 	msr	BASEPRI, r3
 80071c4:	f3bf 8f6f 	isb	sy
 80071c8:	f3bf 8f4f 	dsb	sy
 80071cc:	60fb      	str	r3, [r7, #12]
}
 80071ce:	bf00      	nop
 80071d0:	e7fe      	b.n	80071d0 <prvTaskExitError+0x28>
	__asm volatile
 80071d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d6:	f383 8811 	msr	BASEPRI, r3
 80071da:	f3bf 8f6f 	isb	sy
 80071de:	f3bf 8f4f 	dsb	sy
 80071e2:	60bb      	str	r3, [r7, #8]
}
 80071e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80071e6:	bf00      	nop
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d0fc      	beq.n	80071e8 <prvTaskExitError+0x40>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
<<<<<<< HEAD
 800726e:	bf00      	nop
 8007270:	bf00      	nop
 8007272:	3714      	adds	r7, #20
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr
 800727c:	2000000c 	.word	0x2000000c

08007280 <SVC_Handler>:
=======
 80071ee:	bf00      	nop
 80071f0:	bf00      	nop
 80071f2:	3714      	adds	r7, #20
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr
 80071fc:	2000000c 	.word	0x2000000c

08007200 <SVC_Handler>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
<<<<<<< HEAD
 8007280:	4b07      	ldr	r3, [pc, #28]	; (80072a0 <pxCurrentTCBConst2>)
 8007282:	6819      	ldr	r1, [r3, #0]
 8007284:	6808      	ldr	r0, [r1, #0]
 8007286:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800728a:	f380 8809 	msr	PSP, r0
 800728e:	f3bf 8f6f 	isb	sy
 8007292:	f04f 0000 	mov.w	r0, #0
 8007296:	f380 8811 	msr	BASEPRI, r0
 800729a:	4770      	bx	lr
 800729c:	f3af 8000 	nop.w

080072a0 <pxCurrentTCBConst2>:
 80072a0:	20000ef4 	.word	0x20000ef4
=======
 8007200:	4b07      	ldr	r3, [pc, #28]	; (8007220 <pxCurrentTCBConst2>)
 8007202:	6819      	ldr	r1, [r3, #0]
 8007204:	6808      	ldr	r0, [r1, #0]
 8007206:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800720a:	f380 8809 	msr	PSP, r0
 800720e:	f3bf 8f6f 	isb	sy
 8007212:	f04f 0000 	mov.w	r0, #0
 8007216:	f380 8811 	msr	BASEPRI, r0
 800721a:	4770      	bx	lr
 800721c:	f3af 8000 	nop.w

08007220 <pxCurrentTCBConst2>:
 8007220:	20000f30 	.word	0x20000f30
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
<<<<<<< HEAD
 80072a4:	bf00      	nop
 80072a6:	bf00      	nop

080072a8 <prvPortStartFirstTask>:
=======
 8007224:	bf00      	nop
 8007226:	bf00      	nop

08007228 <prvPortStartFirstTask>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
<<<<<<< HEAD
 80072a8:	4808      	ldr	r0, [pc, #32]	; (80072cc <prvPortStartFirstTask+0x24>)
 80072aa:	6800      	ldr	r0, [r0, #0]
 80072ac:	6800      	ldr	r0, [r0, #0]
 80072ae:	f380 8808 	msr	MSP, r0
 80072b2:	f04f 0000 	mov.w	r0, #0
 80072b6:	f380 8814 	msr	CONTROL, r0
 80072ba:	b662      	cpsie	i
 80072bc:	b661      	cpsie	f
 80072be:	f3bf 8f4f 	dsb	sy
 80072c2:	f3bf 8f6f 	isb	sy
 80072c6:	df00      	svc	0
 80072c8:	bf00      	nop
=======
 8007228:	4808      	ldr	r0, [pc, #32]	; (800724c <prvPortStartFirstTask+0x24>)
 800722a:	6800      	ldr	r0, [r0, #0]
 800722c:	6800      	ldr	r0, [r0, #0]
 800722e:	f380 8808 	msr	MSP, r0
 8007232:	f04f 0000 	mov.w	r0, #0
 8007236:	f380 8814 	msr	CONTROL, r0
 800723a:	b662      	cpsie	i
 800723c:	b661      	cpsie	f
 800723e:	f3bf 8f4f 	dsb	sy
 8007242:	f3bf 8f6f 	isb	sy
 8007246:	df00      	svc	0
 8007248:	bf00      	nop
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
<<<<<<< HEAD
 80072ca:	bf00      	nop
 80072cc:	e000ed08 	.word	0xe000ed08

080072d0 <xPortStartScheduler>:
=======
 800724a:	bf00      	nop
 800724c:	e000ed08 	.word	0xe000ed08

08007250 <xPortStartScheduler>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
<<<<<<< HEAD
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b086      	sub	sp, #24
 80072d4:	af00      	add	r7, sp, #0
=======
 8007250:	b580      	push	{r7, lr}
 8007252:	b086      	sub	sp, #24
 8007254:	af00      	add	r7, sp, #0
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
<<<<<<< HEAD
 80072d6:	4b46      	ldr	r3, [pc, #280]	; (80073f0 <xPortStartScheduler+0x120>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a46      	ldr	r2, [pc, #280]	; (80073f4 <xPortStartScheduler+0x124>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d10a      	bne.n	80072f6 <xPortStartScheduler+0x26>
	__asm volatile
 80072e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e4:	f383 8811 	msr	BASEPRI, r3
 80072e8:	f3bf 8f6f 	isb	sy
 80072ec:	f3bf 8f4f 	dsb	sy
 80072f0:	613b      	str	r3, [r7, #16]
}
 80072f2:	bf00      	nop
 80072f4:	e7fe      	b.n	80072f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80072f6:	4b3e      	ldr	r3, [pc, #248]	; (80073f0 <xPortStartScheduler+0x120>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a3f      	ldr	r2, [pc, #252]	; (80073f8 <xPortStartScheduler+0x128>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d10a      	bne.n	8007316 <xPortStartScheduler+0x46>
	__asm volatile
 8007300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007304:	f383 8811 	msr	BASEPRI, r3
 8007308:	f3bf 8f6f 	isb	sy
 800730c:	f3bf 8f4f 	dsb	sy
 8007310:	60fb      	str	r3, [r7, #12]
}
 8007312:	bf00      	nop
 8007314:	e7fe      	b.n	8007314 <xPortStartScheduler+0x44>
=======
 8007256:	4b46      	ldr	r3, [pc, #280]	; (8007370 <xPortStartScheduler+0x120>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a46      	ldr	r2, [pc, #280]	; (8007374 <xPortStartScheduler+0x124>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d10a      	bne.n	8007276 <xPortStartScheduler+0x26>
	__asm volatile
 8007260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007264:	f383 8811 	msr	BASEPRI, r3
 8007268:	f3bf 8f6f 	isb	sy
 800726c:	f3bf 8f4f 	dsb	sy
 8007270:	613b      	str	r3, [r7, #16]
}
 8007272:	bf00      	nop
 8007274:	e7fe      	b.n	8007274 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007276:	4b3e      	ldr	r3, [pc, #248]	; (8007370 <xPortStartScheduler+0x120>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a3f      	ldr	r2, [pc, #252]	; (8007378 <xPortStartScheduler+0x128>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d10a      	bne.n	8007296 <xPortStartScheduler+0x46>
	__asm volatile
 8007280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007284:	f383 8811 	msr	BASEPRI, r3
 8007288:	f3bf 8f6f 	isb	sy
 800728c:	f3bf 8f4f 	dsb	sy
 8007290:	60fb      	str	r3, [r7, #12]
}
 8007292:	bf00      	nop
 8007294:	e7fe      	b.n	8007294 <xPortStartScheduler+0x44>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
<<<<<<< HEAD
 8007316:	4b39      	ldr	r3, [pc, #228]	; (80073fc <xPortStartScheduler+0x12c>)
 8007318:	617b      	str	r3, [r7, #20]
=======
 8007296:	4b39      	ldr	r3, [pc, #228]	; (800737c <xPortStartScheduler+0x12c>)
 8007298:	617b      	str	r3, [r7, #20]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
<<<<<<< HEAD
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	b2db      	uxtb	r3, r3
 8007320:	607b      	str	r3, [r7, #4]
=======
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	607b      	str	r3, [r7, #4]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
<<<<<<< HEAD
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	22ff      	movs	r2, #255	; 0xff
 8007326:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	b2db      	uxtb	r3, r3
 800732e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007330:	78fb      	ldrb	r3, [r7, #3]
 8007332:	b2db      	uxtb	r3, r3
 8007334:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007338:	b2da      	uxtb	r2, r3
 800733a:	4b31      	ldr	r3, [pc, #196]	; (8007400 <xPortStartScheduler+0x130>)
 800733c:	701a      	strb	r2, [r3, #0]
=======
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	22ff      	movs	r2, #255	; 0xff
 80072a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80072b0:	78fb      	ldrb	r3, [r7, #3]
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80072b8:	b2da      	uxtb	r2, r3
 80072ba:	4b31      	ldr	r3, [pc, #196]	; (8007380 <xPortStartScheduler+0x130>)
 80072bc:	701a      	strb	r2, [r3, #0]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
<<<<<<< HEAD
 800733e:	4b31      	ldr	r3, [pc, #196]	; (8007404 <xPortStartScheduler+0x134>)
 8007340:	2207      	movs	r2, #7
 8007342:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007344:	e009      	b.n	800735a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007346:	4b2f      	ldr	r3, [pc, #188]	; (8007404 <xPortStartScheduler+0x134>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	3b01      	subs	r3, #1
 800734c:	4a2d      	ldr	r2, [pc, #180]	; (8007404 <xPortStartScheduler+0x134>)
 800734e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007350:	78fb      	ldrb	r3, [r7, #3]
 8007352:	b2db      	uxtb	r3, r3
 8007354:	005b      	lsls	r3, r3, #1
 8007356:	b2db      	uxtb	r3, r3
 8007358:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800735a:	78fb      	ldrb	r3, [r7, #3]
 800735c:	b2db      	uxtb	r3, r3
 800735e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007362:	2b80      	cmp	r3, #128	; 0x80
 8007364:	d0ef      	beq.n	8007346 <xPortStartScheduler+0x76>
=======
 80072be:	4b31      	ldr	r3, [pc, #196]	; (8007384 <xPortStartScheduler+0x134>)
 80072c0:	2207      	movs	r2, #7
 80072c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80072c4:	e009      	b.n	80072da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80072c6:	4b2f      	ldr	r3, [pc, #188]	; (8007384 <xPortStartScheduler+0x134>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	3b01      	subs	r3, #1
 80072cc:	4a2d      	ldr	r2, [pc, #180]	; (8007384 <xPortStartScheduler+0x134>)
 80072ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80072d0:	78fb      	ldrb	r3, [r7, #3]
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	005b      	lsls	r3, r3, #1
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80072da:	78fb      	ldrb	r3, [r7, #3]
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072e2:	2b80      	cmp	r3, #128	; 0x80
 80072e4:	d0ef      	beq.n	80072c6 <xPortStartScheduler+0x76>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
<<<<<<< HEAD
 8007366:	4b27      	ldr	r3, [pc, #156]	; (8007404 <xPortStartScheduler+0x134>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f1c3 0307 	rsb	r3, r3, #7
 800736e:	2b04      	cmp	r3, #4
 8007370:	d00a      	beq.n	8007388 <xPortStartScheduler+0xb8>
	__asm volatile
 8007372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007376:	f383 8811 	msr	BASEPRI, r3
 800737a:	f3bf 8f6f 	isb	sy
 800737e:	f3bf 8f4f 	dsb	sy
 8007382:	60bb      	str	r3, [r7, #8]
}
 8007384:	bf00      	nop
 8007386:	e7fe      	b.n	8007386 <xPortStartScheduler+0xb6>
=======
 80072e6:	4b27      	ldr	r3, [pc, #156]	; (8007384 <xPortStartScheduler+0x134>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f1c3 0307 	rsb	r3, r3, #7
 80072ee:	2b04      	cmp	r3, #4
 80072f0:	d00a      	beq.n	8007308 <xPortStartScheduler+0xb8>
	__asm volatile
 80072f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f6:	f383 8811 	msr	BASEPRI, r3
 80072fa:	f3bf 8f6f 	isb	sy
 80072fe:	f3bf 8f4f 	dsb	sy
 8007302:	60bb      	str	r3, [r7, #8]
}
 8007304:	bf00      	nop
 8007306:	e7fe      	b.n	8007306 <xPortStartScheduler+0xb6>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
<<<<<<< HEAD
 8007388:	4b1e      	ldr	r3, [pc, #120]	; (8007404 <xPortStartScheduler+0x134>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	021b      	lsls	r3, r3, #8
 800738e:	4a1d      	ldr	r2, [pc, #116]	; (8007404 <xPortStartScheduler+0x134>)
 8007390:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007392:	4b1c      	ldr	r3, [pc, #112]	; (8007404 <xPortStartScheduler+0x134>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800739a:	4a1a      	ldr	r2, [pc, #104]	; (8007404 <xPortStartScheduler+0x134>)
 800739c:	6013      	str	r3, [r2, #0]
=======
 8007308:	4b1e      	ldr	r3, [pc, #120]	; (8007384 <xPortStartScheduler+0x134>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	021b      	lsls	r3, r3, #8
 800730e:	4a1d      	ldr	r2, [pc, #116]	; (8007384 <xPortStartScheduler+0x134>)
 8007310:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007312:	4b1c      	ldr	r3, [pc, #112]	; (8007384 <xPortStartScheduler+0x134>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800731a:	4a1a      	ldr	r2, [pc, #104]	; (8007384 <xPortStartScheduler+0x134>)
 800731c:	6013      	str	r3, [r2, #0]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
<<<<<<< HEAD
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	b2da      	uxtb	r2, r3
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	701a      	strb	r2, [r3, #0]
=======
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	b2da      	uxtb	r2, r3
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	701a      	strb	r2, [r3, #0]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
<<<<<<< HEAD
 80073a6:	4b18      	ldr	r3, [pc, #96]	; (8007408 <xPortStartScheduler+0x138>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a17      	ldr	r2, [pc, #92]	; (8007408 <xPortStartScheduler+0x138>)
 80073ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80073b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80073b2:	4b15      	ldr	r3, [pc, #84]	; (8007408 <xPortStartScheduler+0x138>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a14      	ldr	r2, [pc, #80]	; (8007408 <xPortStartScheduler+0x138>)
 80073b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80073bc:	6013      	str	r3, [r2, #0]
=======
 8007326:	4b18      	ldr	r3, [pc, #96]	; (8007388 <xPortStartScheduler+0x138>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a17      	ldr	r2, [pc, #92]	; (8007388 <xPortStartScheduler+0x138>)
 800732c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007330:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007332:	4b15      	ldr	r3, [pc, #84]	; (8007388 <xPortStartScheduler+0x138>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a14      	ldr	r2, [pc, #80]	; (8007388 <xPortStartScheduler+0x138>)
 8007338:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800733c:	6013      	str	r3, [r2, #0]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
<<<<<<< HEAD
 80073be:	f000 f8dd 	bl	800757c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80073c2:	4b12      	ldr	r3, [pc, #72]	; (800740c <xPortStartScheduler+0x13c>)
 80073c4:	2200      	movs	r2, #0
 80073c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80073c8:	f000 f8fc 	bl	80075c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80073cc:	4b10      	ldr	r3, [pc, #64]	; (8007410 <xPortStartScheduler+0x140>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a0f      	ldr	r2, [pc, #60]	; (8007410 <xPortStartScheduler+0x140>)
 80073d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80073d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80073d8:	f7ff ff66 	bl	80072a8 <prvPortStartFirstTask>
=======
 800733e:	f000 f8dd 	bl	80074fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007342:	4b12      	ldr	r3, [pc, #72]	; (800738c <xPortStartScheduler+0x13c>)
 8007344:	2200      	movs	r2, #0
 8007346:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007348:	f000 f8fc 	bl	8007544 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800734c:	4b10      	ldr	r3, [pc, #64]	; (8007390 <xPortStartScheduler+0x140>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a0f      	ldr	r2, [pc, #60]	; (8007390 <xPortStartScheduler+0x140>)
 8007352:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007356:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007358:	f7ff ff66 	bl	8007228 <prvPortStartFirstTask>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
<<<<<<< HEAD
 80073dc:	f7ff f84c 	bl	8006478 <vTaskSwitchContext>
	prvTaskExitError();
 80073e0:	f7ff ff22 	bl	8007228 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80073e4:	2300      	movs	r3, #0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3718      	adds	r7, #24
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	e000ed00 	.word	0xe000ed00
 80073f4:	410fc271 	.word	0x410fc271
 80073f8:	410fc270 	.word	0x410fc270
 80073fc:	e000e400 	.word	0xe000e400
 8007400:	20001520 	.word	0x20001520
 8007404:	20001524 	.word	0x20001524
 8007408:	e000ed20 	.word	0xe000ed20
 800740c:	2000000c 	.word	0x2000000c
 8007410:	e000ef34 	.word	0xe000ef34

08007414 <vPortEnterCritical>:
=======
 800735c:	f7ff f84c 	bl	80063f8 <vTaskSwitchContext>
	prvTaskExitError();
 8007360:	f7ff ff22 	bl	80071a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3718      	adds	r7, #24
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop
 8007370:	e000ed00 	.word	0xe000ed00
 8007374:	410fc271 	.word	0x410fc271
 8007378:	410fc270 	.word	0x410fc270
 800737c:	e000e400 	.word	0xe000e400
 8007380:	2000155c 	.word	0x2000155c
 8007384:	20001560 	.word	0x20001560
 8007388:	e000ed20 	.word	0xe000ed20
 800738c:	2000000c 	.word	0x2000000c
 8007390:	e000ef34 	.word	0xe000ef34

08007394 <vPortEnterCritical>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
<<<<<<< HEAD
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
	__asm volatile
 800741a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800741e:	f383 8811 	msr	BASEPRI, r3
 8007422:	f3bf 8f6f 	isb	sy
 8007426:	f3bf 8f4f 	dsb	sy
 800742a:	607b      	str	r3, [r7, #4]
}
 800742c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800742e:	4b0f      	ldr	r3, [pc, #60]	; (800746c <vPortEnterCritical+0x58>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	3301      	adds	r3, #1
 8007434:	4a0d      	ldr	r2, [pc, #52]	; (800746c <vPortEnterCritical+0x58>)
 8007436:	6013      	str	r3, [r2, #0]
=======
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
	__asm volatile
 800739a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739e:	f383 8811 	msr	BASEPRI, r3
 80073a2:	f3bf 8f6f 	isb	sy
 80073a6:	f3bf 8f4f 	dsb	sy
 80073aa:	607b      	str	r3, [r7, #4]
}
 80073ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80073ae:	4b0f      	ldr	r3, [pc, #60]	; (80073ec <vPortEnterCritical+0x58>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	3301      	adds	r3, #1
 80073b4:	4a0d      	ldr	r2, [pc, #52]	; (80073ec <vPortEnterCritical+0x58>)
 80073b6:	6013      	str	r3, [r2, #0]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
<<<<<<< HEAD
 8007438:	4b0c      	ldr	r3, [pc, #48]	; (800746c <vPortEnterCritical+0x58>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2b01      	cmp	r3, #1
 800743e:	d10f      	bne.n	8007460 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007440:	4b0b      	ldr	r3, [pc, #44]	; (8007470 <vPortEnterCritical+0x5c>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	b2db      	uxtb	r3, r3
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00a      	beq.n	8007460 <vPortEnterCritical+0x4c>
	__asm volatile
 800744a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800744e:	f383 8811 	msr	BASEPRI, r3
 8007452:	f3bf 8f6f 	isb	sy
 8007456:	f3bf 8f4f 	dsb	sy
 800745a:	603b      	str	r3, [r7, #0]
}
 800745c:	bf00      	nop
 800745e:	e7fe      	b.n	800745e <vPortEnterCritical+0x4a>
	}
}
 8007460:	bf00      	nop
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr
 800746c:	2000000c 	.word	0x2000000c
 8007470:	e000ed04 	.word	0xe000ed04

08007474 <vPortExitCritical>:
=======
 80073b8:	4b0c      	ldr	r3, [pc, #48]	; (80073ec <vPortEnterCritical+0x58>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d10f      	bne.n	80073e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80073c0:	4b0b      	ldr	r3, [pc, #44]	; (80073f0 <vPortEnterCritical+0x5c>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d00a      	beq.n	80073e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80073ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ce:	f383 8811 	msr	BASEPRI, r3
 80073d2:	f3bf 8f6f 	isb	sy
 80073d6:	f3bf 8f4f 	dsb	sy
 80073da:	603b      	str	r3, [r7, #0]
}
 80073dc:	bf00      	nop
 80073de:	e7fe      	b.n	80073de <vPortEnterCritical+0x4a>
	}
}
 80073e0:	bf00      	nop
 80073e2:	370c      	adds	r7, #12
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr
 80073ec:	2000000c 	.word	0x2000000c
 80073f0:	e000ed04 	.word	0xe000ed04

080073f4 <vPortExitCritical>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
<<<<<<< HEAD
 8007474:	b480      	push	{r7}
 8007476:	b083      	sub	sp, #12
 8007478:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800747a:	4b12      	ldr	r3, [pc, #72]	; (80074c4 <vPortExitCritical+0x50>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d10a      	bne.n	8007498 <vPortExitCritical+0x24>
	__asm volatile
 8007482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007486:	f383 8811 	msr	BASEPRI, r3
 800748a:	f3bf 8f6f 	isb	sy
 800748e:	f3bf 8f4f 	dsb	sy
 8007492:	607b      	str	r3, [r7, #4]
}
 8007494:	bf00      	nop
 8007496:	e7fe      	b.n	8007496 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007498:	4b0a      	ldr	r3, [pc, #40]	; (80074c4 <vPortExitCritical+0x50>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	3b01      	subs	r3, #1
 800749e:	4a09      	ldr	r2, [pc, #36]	; (80074c4 <vPortExitCritical+0x50>)
 80074a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80074a2:	4b08      	ldr	r3, [pc, #32]	; (80074c4 <vPortExitCritical+0x50>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d105      	bne.n	80074b6 <vPortExitCritical+0x42>
 80074aa:	2300      	movs	r3, #0
 80074ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	f383 8811 	msr	BASEPRI, r3
}
 80074b4:	bf00      	nop
=======
 80073f4:	b480      	push	{r7}
 80073f6:	b083      	sub	sp, #12
 80073f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80073fa:	4b12      	ldr	r3, [pc, #72]	; (8007444 <vPortExitCritical+0x50>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d10a      	bne.n	8007418 <vPortExitCritical+0x24>
	__asm volatile
 8007402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007406:	f383 8811 	msr	BASEPRI, r3
 800740a:	f3bf 8f6f 	isb	sy
 800740e:	f3bf 8f4f 	dsb	sy
 8007412:	607b      	str	r3, [r7, #4]
}
 8007414:	bf00      	nop
 8007416:	e7fe      	b.n	8007416 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007418:	4b0a      	ldr	r3, [pc, #40]	; (8007444 <vPortExitCritical+0x50>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	3b01      	subs	r3, #1
 800741e:	4a09      	ldr	r2, [pc, #36]	; (8007444 <vPortExitCritical+0x50>)
 8007420:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007422:	4b08      	ldr	r3, [pc, #32]	; (8007444 <vPortExitCritical+0x50>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d105      	bne.n	8007436 <vPortExitCritical+0x42>
 800742a:	2300      	movs	r3, #0
 800742c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	f383 8811 	msr	BASEPRI, r3
}
 8007434:	bf00      	nop
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	{
		portENABLE_INTERRUPTS();
	}
}
<<<<<<< HEAD
 80074b6:	bf00      	nop
 80074b8:	370c      	adds	r7, #12
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr
 80074c2:	bf00      	nop
 80074c4:	2000000c 	.word	0x2000000c
	...

080074d0 <PendSV_Handler>:
=======
 8007436:	bf00      	nop
 8007438:	370c      	adds	r7, #12
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr
 8007442:	bf00      	nop
 8007444:	2000000c 	.word	0x2000000c
	...

08007450 <PendSV_Handler>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
<<<<<<< HEAD
 80074d0:	f3ef 8009 	mrs	r0, PSP
 80074d4:	f3bf 8f6f 	isb	sy
 80074d8:	4b15      	ldr	r3, [pc, #84]	; (8007530 <pxCurrentTCBConst>)
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	f01e 0f10 	tst.w	lr, #16
 80074e0:	bf08      	it	eq
 80074e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80074e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ea:	6010      	str	r0, [r2, #0]
 80074ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80074f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80074f4:	f380 8811 	msr	BASEPRI, r0
 80074f8:	f3bf 8f4f 	dsb	sy
 80074fc:	f3bf 8f6f 	isb	sy
 8007500:	f7fe ffba 	bl	8006478 <vTaskSwitchContext>
 8007504:	f04f 0000 	mov.w	r0, #0
 8007508:	f380 8811 	msr	BASEPRI, r0
 800750c:	bc09      	pop	{r0, r3}
 800750e:	6819      	ldr	r1, [r3, #0]
 8007510:	6808      	ldr	r0, [r1, #0]
 8007512:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007516:	f01e 0f10 	tst.w	lr, #16
 800751a:	bf08      	it	eq
 800751c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007520:	f380 8809 	msr	PSP, r0
 8007524:	f3bf 8f6f 	isb	sy
 8007528:	4770      	bx	lr
 800752a:	bf00      	nop
 800752c:	f3af 8000 	nop.w

08007530 <pxCurrentTCBConst>:
 8007530:	20000ef4 	.word	0x20000ef4
=======
 8007450:	f3ef 8009 	mrs	r0, PSP
 8007454:	f3bf 8f6f 	isb	sy
 8007458:	4b15      	ldr	r3, [pc, #84]	; (80074b0 <pxCurrentTCBConst>)
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	f01e 0f10 	tst.w	lr, #16
 8007460:	bf08      	it	eq
 8007462:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007466:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800746a:	6010      	str	r0, [r2, #0]
 800746c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007470:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007474:	f380 8811 	msr	BASEPRI, r0
 8007478:	f3bf 8f4f 	dsb	sy
 800747c:	f3bf 8f6f 	isb	sy
 8007480:	f7fe ffba 	bl	80063f8 <vTaskSwitchContext>
 8007484:	f04f 0000 	mov.w	r0, #0
 8007488:	f380 8811 	msr	BASEPRI, r0
 800748c:	bc09      	pop	{r0, r3}
 800748e:	6819      	ldr	r1, [r3, #0]
 8007490:	6808      	ldr	r0, [r1, #0]
 8007492:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007496:	f01e 0f10 	tst.w	lr, #16
 800749a:	bf08      	it	eq
 800749c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80074a0:	f380 8809 	msr	PSP, r0
 80074a4:	f3bf 8f6f 	isb	sy
 80074a8:	4770      	bx	lr
 80074aa:	bf00      	nop
 80074ac:	f3af 8000 	nop.w

080074b0 <pxCurrentTCBConst>:
 80074b0:	20000f30 	.word	0x20000f30
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
<<<<<<< HEAD
 8007534:	bf00      	nop
 8007536:	bf00      	nop

08007538 <xPortSysTickHandler>:
=======
 80074b4:	bf00      	nop
 80074b6:	bf00      	nop

080074b8 <xPortSysTickHandler>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
<<<<<<< HEAD
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
	__asm volatile
 800753e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007542:	f383 8811 	msr	BASEPRI, r3
 8007546:	f3bf 8f6f 	isb	sy
 800754a:	f3bf 8f4f 	dsb	sy
 800754e:	607b      	str	r3, [r7, #4]
}
 8007550:	bf00      	nop
=======
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b082      	sub	sp, #8
 80074bc:	af00      	add	r7, sp, #0
	__asm volatile
 80074be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c2:	f383 8811 	msr	BASEPRI, r3
 80074c6:	f3bf 8f6f 	isb	sy
 80074ca:	f3bf 8f4f 	dsb	sy
 80074ce:	607b      	str	r3, [r7, #4]
}
 80074d0:	bf00      	nop
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
<<<<<<< HEAD
 8007552:	f7fe fed7 	bl	8006304 <xTaskIncrementTick>
 8007556:	4603      	mov	r3, r0
 8007558:	2b00      	cmp	r3, #0
 800755a:	d003      	beq.n	8007564 <xPortSysTickHandler+0x2c>
=======
 80074d2:	f7fe fed7 	bl	8006284 <xTaskIncrementTick>
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d003      	beq.n	80074e4 <xPortSysTickHandler+0x2c>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
<<<<<<< HEAD
 800755c:	4b06      	ldr	r3, [pc, #24]	; (8007578 <xPortSysTickHandler+0x40>)
 800755e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007562:	601a      	str	r2, [r3, #0]
 8007564:	2300      	movs	r3, #0
 8007566:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	f383 8811 	msr	BASEPRI, r3
}
 800756e:	bf00      	nop
=======
 80074dc:	4b06      	ldr	r3, [pc, #24]	; (80074f8 <xPortSysTickHandler+0x40>)
 80074de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074e2:	601a      	str	r2, [r3, #0]
 80074e4:	2300      	movs	r3, #0
 80074e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	f383 8811 	msr	BASEPRI, r3
}
 80074ee:	bf00      	nop
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		}
	}
	portENABLE_INTERRUPTS();
}
<<<<<<< HEAD
 8007570:	bf00      	nop
 8007572:	3708      	adds	r7, #8
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}
 8007578:	e000ed04 	.word	0xe000ed04

0800757c <vPortSetupTimerInterrupt>:
=======
 80074f0:	bf00      	nop
 80074f2:	3708      	adds	r7, #8
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	e000ed04 	.word	0xe000ed04

080074fc <vPortSetupTimerInterrupt>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
<<<<<<< HEAD
 800757c:	b480      	push	{r7}
 800757e:	af00      	add	r7, sp, #0
=======
 80074fc:	b480      	push	{r7}
 80074fe:	af00      	add	r7, sp, #0
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
<<<<<<< HEAD
 8007580:	4b0b      	ldr	r3, [pc, #44]	; (80075b0 <vPortSetupTimerInterrupt+0x34>)
 8007582:	2200      	movs	r2, #0
 8007584:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007586:	4b0b      	ldr	r3, [pc, #44]	; (80075b4 <vPortSetupTimerInterrupt+0x38>)
 8007588:	2200      	movs	r2, #0
 800758a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800758c:	4b0a      	ldr	r3, [pc, #40]	; (80075b8 <vPortSetupTimerInterrupt+0x3c>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a0a      	ldr	r2, [pc, #40]	; (80075bc <vPortSetupTimerInterrupt+0x40>)
 8007592:	fba2 2303 	umull	r2, r3, r2, r3
 8007596:	099b      	lsrs	r3, r3, #6
 8007598:	4a09      	ldr	r2, [pc, #36]	; (80075c0 <vPortSetupTimerInterrupt+0x44>)
 800759a:	3b01      	subs	r3, #1
 800759c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800759e:	4b04      	ldr	r3, [pc, #16]	; (80075b0 <vPortSetupTimerInterrupt+0x34>)
 80075a0:	2207      	movs	r2, #7
 80075a2:	601a      	str	r2, [r3, #0]
}
 80075a4:	bf00      	nop
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr
 80075ae:	bf00      	nop
 80075b0:	e000e010 	.word	0xe000e010
 80075b4:	e000e018 	.word	0xe000e018
 80075b8:	20000000 	.word	0x20000000
 80075bc:	10624dd3 	.word	0x10624dd3
 80075c0:	e000e014 	.word	0xe000e014

080075c4 <vPortEnableVFP>:
=======
 8007500:	4b0b      	ldr	r3, [pc, #44]	; (8007530 <vPortSetupTimerInterrupt+0x34>)
 8007502:	2200      	movs	r2, #0
 8007504:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007506:	4b0b      	ldr	r3, [pc, #44]	; (8007534 <vPortSetupTimerInterrupt+0x38>)
 8007508:	2200      	movs	r2, #0
 800750a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800750c:	4b0a      	ldr	r3, [pc, #40]	; (8007538 <vPortSetupTimerInterrupt+0x3c>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a0a      	ldr	r2, [pc, #40]	; (800753c <vPortSetupTimerInterrupt+0x40>)
 8007512:	fba2 2303 	umull	r2, r3, r2, r3
 8007516:	099b      	lsrs	r3, r3, #6
 8007518:	4a09      	ldr	r2, [pc, #36]	; (8007540 <vPortSetupTimerInterrupt+0x44>)
 800751a:	3b01      	subs	r3, #1
 800751c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800751e:	4b04      	ldr	r3, [pc, #16]	; (8007530 <vPortSetupTimerInterrupt+0x34>)
 8007520:	2207      	movs	r2, #7
 8007522:	601a      	str	r2, [r3, #0]
}
 8007524:	bf00      	nop
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr
 800752e:	bf00      	nop
 8007530:	e000e010 	.word	0xe000e010
 8007534:	e000e018 	.word	0xe000e018
 8007538:	20000000 	.word	0x20000000
 800753c:	10624dd3 	.word	0x10624dd3
 8007540:	e000e014 	.word	0xe000e014

08007544 <vPortEnableVFP>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
<<<<<<< HEAD
 80075c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80075d4 <vPortEnableVFP+0x10>
 80075c8:	6801      	ldr	r1, [r0, #0]
 80075ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80075ce:	6001      	str	r1, [r0, #0]
 80075d0:	4770      	bx	lr
=======
 8007544:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007554 <vPortEnableVFP+0x10>
 8007548:	6801      	ldr	r1, [r0, #0]
 800754a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800754e:	6001      	str	r1, [r0, #0]
 8007550:	4770      	bx	lr
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
<<<<<<< HEAD
 80075d2:	bf00      	nop
 80075d4:	e000ed88 	.word	0xe000ed88

080075d8 <vPortValidateInterruptPriority>:
=======
 8007552:	bf00      	nop
 8007554:	e000ed88 	.word	0xe000ed88

08007558 <vPortValidateInterruptPriority>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
<<<<<<< HEAD
 80075d8:	b480      	push	{r7}
 80075da:	b085      	sub	sp, #20
 80075dc:	af00      	add	r7, sp, #0
=======
 8007558:	b480      	push	{r7}
 800755a:	b085      	sub	sp, #20
 800755c:	af00      	add	r7, sp, #0
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
<<<<<<< HEAD
 80075de:	f3ef 8305 	mrs	r3, IPSR
 80075e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2b0f      	cmp	r3, #15
 80075e8:	d914      	bls.n	8007614 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80075ea:	4a17      	ldr	r2, [pc, #92]	; (8007648 <vPortValidateInterruptPriority+0x70>)
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	4413      	add	r3, r2
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	72fb      	strb	r3, [r7, #11]
=======
 800755e:	f3ef 8305 	mrs	r3, IPSR
 8007562:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2b0f      	cmp	r3, #15
 8007568:	d914      	bls.n	8007594 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800756a:	4a17      	ldr	r2, [pc, #92]	; (80075c8 <vPortValidateInterruptPriority+0x70>)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	4413      	add	r3, r2
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	72fb      	strb	r3, [r7, #11]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
<<<<<<< HEAD
 80075f4:	4b15      	ldr	r3, [pc, #84]	; (800764c <vPortValidateInterruptPriority+0x74>)
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	7afa      	ldrb	r2, [r7, #11]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d20a      	bcs.n	8007614 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80075fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007602:	f383 8811 	msr	BASEPRI, r3
 8007606:	f3bf 8f6f 	isb	sy
 800760a:	f3bf 8f4f 	dsb	sy
 800760e:	607b      	str	r3, [r7, #4]
}
 8007610:	bf00      	nop
 8007612:	e7fe      	b.n	8007612 <vPortValidateInterruptPriority+0x3a>
=======
 8007574:	4b15      	ldr	r3, [pc, #84]	; (80075cc <vPortValidateInterruptPriority+0x74>)
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	7afa      	ldrb	r2, [r7, #11]
 800757a:	429a      	cmp	r2, r3
 800757c:	d20a      	bcs.n	8007594 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800757e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007582:	f383 8811 	msr	BASEPRI, r3
 8007586:	f3bf 8f6f 	isb	sy
 800758a:	f3bf 8f4f 	dsb	sy
 800758e:	607b      	str	r3, [r7, #4]
}
 8007590:	bf00      	nop
 8007592:	e7fe      	b.n	8007592 <vPortValidateInterruptPriority+0x3a>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
<<<<<<< HEAD
 8007614:	4b0e      	ldr	r3, [pc, #56]	; (8007650 <vPortValidateInterruptPriority+0x78>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800761c:	4b0d      	ldr	r3, [pc, #52]	; (8007654 <vPortValidateInterruptPriority+0x7c>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	429a      	cmp	r2, r3
 8007622:	d90a      	bls.n	800763a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007628:	f383 8811 	msr	BASEPRI, r3
 800762c:	f3bf 8f6f 	isb	sy
 8007630:	f3bf 8f4f 	dsb	sy
 8007634:	603b      	str	r3, [r7, #0]
}
 8007636:	bf00      	nop
 8007638:	e7fe      	b.n	8007638 <vPortValidateInterruptPriority+0x60>
	}
 800763a:	bf00      	nop
 800763c:	3714      	adds	r7, #20
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr
 8007646:	bf00      	nop
 8007648:	e000e3f0 	.word	0xe000e3f0
 800764c:	20001520 	.word	0x20001520
 8007650:	e000ed0c 	.word	0xe000ed0c
 8007654:	20001524 	.word	0x20001524

08007658 <pvPortMalloc>:
=======
 8007594:	4b0e      	ldr	r3, [pc, #56]	; (80075d0 <vPortValidateInterruptPriority+0x78>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800759c:	4b0d      	ldr	r3, [pc, #52]	; (80075d4 <vPortValidateInterruptPriority+0x7c>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d90a      	bls.n	80075ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80075a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a8:	f383 8811 	msr	BASEPRI, r3
 80075ac:	f3bf 8f6f 	isb	sy
 80075b0:	f3bf 8f4f 	dsb	sy
 80075b4:	603b      	str	r3, [r7, #0]
}
 80075b6:	bf00      	nop
 80075b8:	e7fe      	b.n	80075b8 <vPortValidateInterruptPriority+0x60>
	}
 80075ba:	bf00      	nop
 80075bc:	3714      	adds	r7, #20
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr
 80075c6:	bf00      	nop
 80075c8:	e000e3f0 	.word	0xe000e3f0
 80075cc:	2000155c 	.word	0x2000155c
 80075d0:	e000ed0c 	.word	0xe000ed0c
 80075d4:	20001560 	.word	0x20001560

080075d8 <pvPortMalloc>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
<<<<<<< HEAD
 8007658:	b580      	push	{r7, lr}
 800765a:	b08a      	sub	sp, #40	; 0x28
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007660:	2300      	movs	r3, #0
 8007662:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007664:	f7fe fd92 	bl	800618c <vTaskSuspendAll>
=======
 80075d8:	b580      	push	{r7, lr}
 80075da:	b08a      	sub	sp, #40	; 0x28
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80075e0:	2300      	movs	r3, #0
 80075e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80075e4:	f7fe fd92 	bl	800610c <vTaskSuspendAll>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
<<<<<<< HEAD
 8007668:	4b5b      	ldr	r3, [pc, #364]	; (80077d8 <pvPortMalloc+0x180>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d101      	bne.n	8007674 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007670:	f000 f920 	bl	80078b4 <prvHeapInit>
=======
 80075e8:	4b5b      	ldr	r3, [pc, #364]	; (8007758 <pvPortMalloc+0x180>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d101      	bne.n	80075f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80075f0:	f000 f920 	bl	8007834 <prvHeapInit>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
<<<<<<< HEAD
 8007674:	4b59      	ldr	r3, [pc, #356]	; (80077dc <pvPortMalloc+0x184>)
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	4013      	ands	r3, r2
 800767c:	2b00      	cmp	r3, #0
 800767e:	f040 8093 	bne.w	80077a8 <pvPortMalloc+0x150>
=======
 80075f4:	4b59      	ldr	r3, [pc, #356]	; (800775c <pvPortMalloc+0x184>)
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	4013      	ands	r3, r2
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	f040 8093 	bne.w	8007728 <pvPortMalloc+0x150>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
<<<<<<< HEAD
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d01d      	beq.n	80076c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007688:	2208      	movs	r2, #8
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4413      	add	r3, r2
 800768e:	607b      	str	r3, [r7, #4]
=======
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d01d      	beq.n	8007644 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007608:	2208      	movs	r2, #8
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4413      	add	r3, r2
 800760e:	607b      	str	r3, [r7, #4]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
<<<<<<< HEAD
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f003 0307 	and.w	r3, r3, #7
 8007696:	2b00      	cmp	r3, #0
 8007698:	d014      	beq.n	80076c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f023 0307 	bic.w	r3, r3, #7
 80076a0:	3308      	adds	r3, #8
 80076a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f003 0307 	and.w	r3, r3, #7
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00a      	beq.n	80076c4 <pvPortMalloc+0x6c>
	__asm volatile
 80076ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b2:	f383 8811 	msr	BASEPRI, r3
 80076b6:	f3bf 8f6f 	isb	sy
 80076ba:	f3bf 8f4f 	dsb	sy
 80076be:	617b      	str	r3, [r7, #20]
}
 80076c0:	bf00      	nop
 80076c2:	e7fe      	b.n	80076c2 <pvPortMalloc+0x6a>
=======
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f003 0307 	and.w	r3, r3, #7
 8007616:	2b00      	cmp	r3, #0
 8007618:	d014      	beq.n	8007644 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f023 0307 	bic.w	r3, r3, #7
 8007620:	3308      	adds	r3, #8
 8007622:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f003 0307 	and.w	r3, r3, #7
 800762a:	2b00      	cmp	r3, #0
 800762c:	d00a      	beq.n	8007644 <pvPortMalloc+0x6c>
	__asm volatile
 800762e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007632:	f383 8811 	msr	BASEPRI, r3
 8007636:	f3bf 8f6f 	isb	sy
 800763a:	f3bf 8f4f 	dsb	sy
 800763e:	617b      	str	r3, [r7, #20]
}
 8007640:	bf00      	nop
 8007642:	e7fe      	b.n	8007642 <pvPortMalloc+0x6a>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
<<<<<<< HEAD
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d06e      	beq.n	80077a8 <pvPortMalloc+0x150>
 80076ca:	4b45      	ldr	r3, [pc, #276]	; (80077e0 <pvPortMalloc+0x188>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d869      	bhi.n	80077a8 <pvPortMalloc+0x150>
=======
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d06e      	beq.n	8007728 <pvPortMalloc+0x150>
 800764a:	4b45      	ldr	r3, [pc, #276]	; (8007760 <pvPortMalloc+0x188>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	429a      	cmp	r2, r3
 8007652:	d869      	bhi.n	8007728 <pvPortMalloc+0x150>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
<<<<<<< HEAD
 80076d4:	4b43      	ldr	r3, [pc, #268]	; (80077e4 <pvPortMalloc+0x18c>)
 80076d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80076d8:	4b42      	ldr	r3, [pc, #264]	; (80077e4 <pvPortMalloc+0x18c>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80076de:	e004      	b.n	80076ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80076e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80076e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80076ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d903      	bls.n	80076fc <pvPortMalloc+0xa4>
 80076f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d1f1      	bne.n	80076e0 <pvPortMalloc+0x88>
=======
 8007654:	4b43      	ldr	r3, [pc, #268]	; (8007764 <pvPortMalloc+0x18c>)
 8007656:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007658:	4b42      	ldr	r3, [pc, #264]	; (8007764 <pvPortMalloc+0x18c>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800765e:	e004      	b.n	800766a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007662:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800766a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	429a      	cmp	r2, r3
 8007672:	d903      	bls.n	800767c <pvPortMalloc+0xa4>
 8007674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d1f1      	bne.n	8007660 <pvPortMalloc+0x88>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
<<<<<<< HEAD
 80076fc:	4b36      	ldr	r3, [pc, #216]	; (80077d8 <pvPortMalloc+0x180>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007702:	429a      	cmp	r2, r3
 8007704:	d050      	beq.n	80077a8 <pvPortMalloc+0x150>
=======
 800767c:	4b36      	ldr	r3, [pc, #216]	; (8007758 <pvPortMalloc+0x180>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007682:	429a      	cmp	r2, r3
 8007684:	d050      	beq.n	8007728 <pvPortMalloc+0x150>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
<<<<<<< HEAD
 8007706:	6a3b      	ldr	r3, [r7, #32]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	2208      	movs	r2, #8
 800770c:	4413      	add	r3, r2
 800770e:	61fb      	str	r3, [r7, #28]
=======
 8007686:	6a3b      	ldr	r3, [r7, #32]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	2208      	movs	r2, #8
 800768c:	4413      	add	r3, r2
 800768e:	61fb      	str	r3, [r7, #28]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
<<<<<<< HEAD
 8007710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	6a3b      	ldr	r3, [r7, #32]
 8007716:	601a      	str	r2, [r3, #0]
=======
 8007690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	6a3b      	ldr	r3, [r7, #32]
 8007696:	601a      	str	r2, [r3, #0]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
<<<<<<< HEAD
 8007718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771a:	685a      	ldr	r2, [r3, #4]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	1ad2      	subs	r2, r2, r3
 8007720:	2308      	movs	r3, #8
 8007722:	005b      	lsls	r3, r3, #1
 8007724:	429a      	cmp	r2, r3
 8007726:	d91f      	bls.n	8007768 <pvPortMalloc+0x110>
=======
 8007698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769a:	685a      	ldr	r2, [r3, #4]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	1ad2      	subs	r2, r2, r3
 80076a0:	2308      	movs	r3, #8
 80076a2:	005b      	lsls	r3, r3, #1
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d91f      	bls.n	80076e8 <pvPortMalloc+0x110>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
<<<<<<< HEAD
 8007728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4413      	add	r3, r2
 800772e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007730:	69bb      	ldr	r3, [r7, #24]
 8007732:	f003 0307 	and.w	r3, r3, #7
 8007736:	2b00      	cmp	r3, #0
 8007738:	d00a      	beq.n	8007750 <pvPortMalloc+0xf8>
	__asm volatile
 800773a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800773e:	f383 8811 	msr	BASEPRI, r3
 8007742:	f3bf 8f6f 	isb	sy
 8007746:	f3bf 8f4f 	dsb	sy
 800774a:	613b      	str	r3, [r7, #16]
}
 800774c:	bf00      	nop
 800774e:	e7fe      	b.n	800774e <pvPortMalloc+0xf6>
=======
 80076a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4413      	add	r3, r2
 80076ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80076b0:	69bb      	ldr	r3, [r7, #24]
 80076b2:	f003 0307 	and.w	r3, r3, #7
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d00a      	beq.n	80076d0 <pvPortMalloc+0xf8>
	__asm volatile
 80076ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076be:	f383 8811 	msr	BASEPRI, r3
 80076c2:	f3bf 8f6f 	isb	sy
 80076c6:	f3bf 8f4f 	dsb	sy
 80076ca:	613b      	str	r3, [r7, #16]
}
 80076cc:	bf00      	nop
 80076ce:	e7fe      	b.n	80076ce <pvPortMalloc+0xf6>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
<<<<<<< HEAD
 8007750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007752:	685a      	ldr	r2, [r3, #4]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	1ad2      	subs	r2, r2, r3
 8007758:	69bb      	ldr	r3, [r7, #24]
 800775a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800775c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007762:	69b8      	ldr	r0, [r7, #24]
 8007764:	f000 f908 	bl	8007978 <prvInsertBlockIntoFreeList>
=======
 80076d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d2:	685a      	ldr	r2, [r3, #4]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	1ad2      	subs	r2, r2, r3
 80076d8:	69bb      	ldr	r3, [r7, #24]
 80076da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80076dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076de:	687a      	ldr	r2, [r7, #4]
 80076e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80076e2:	69b8      	ldr	r0, [r7, #24]
 80076e4:	f000 f908 	bl	80078f8 <prvInsertBlockIntoFreeList>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
<<<<<<< HEAD
 8007768:	4b1d      	ldr	r3, [pc, #116]	; (80077e0 <pvPortMalloc+0x188>)
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	1ad3      	subs	r3, r2, r3
 8007772:	4a1b      	ldr	r2, [pc, #108]	; (80077e0 <pvPortMalloc+0x188>)
 8007774:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007776:	4b1a      	ldr	r3, [pc, #104]	; (80077e0 <pvPortMalloc+0x188>)
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	4b1b      	ldr	r3, [pc, #108]	; (80077e8 <pvPortMalloc+0x190>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	429a      	cmp	r2, r3
 8007780:	d203      	bcs.n	800778a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007782:	4b17      	ldr	r3, [pc, #92]	; (80077e0 <pvPortMalloc+0x188>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a18      	ldr	r2, [pc, #96]	; (80077e8 <pvPortMalloc+0x190>)
 8007788:	6013      	str	r3, [r2, #0]
=======
 80076e8:	4b1d      	ldr	r3, [pc, #116]	; (8007760 <pvPortMalloc+0x188>)
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	1ad3      	subs	r3, r2, r3
 80076f2:	4a1b      	ldr	r2, [pc, #108]	; (8007760 <pvPortMalloc+0x188>)
 80076f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80076f6:	4b1a      	ldr	r3, [pc, #104]	; (8007760 <pvPortMalloc+0x188>)
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	4b1b      	ldr	r3, [pc, #108]	; (8007768 <pvPortMalloc+0x190>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	429a      	cmp	r2, r3
 8007700:	d203      	bcs.n	800770a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007702:	4b17      	ldr	r3, [pc, #92]	; (8007760 <pvPortMalloc+0x188>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a18      	ldr	r2, [pc, #96]	; (8007768 <pvPortMalloc+0x190>)
 8007708:	6013      	str	r3, [r2, #0]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
<<<<<<< HEAD
 800778a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778c:	685a      	ldr	r2, [r3, #4]
 800778e:	4b13      	ldr	r3, [pc, #76]	; (80077dc <pvPortMalloc+0x184>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	431a      	orrs	r2, r3
 8007794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007796:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779a:	2200      	movs	r2, #0
 800779c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800779e:	4b13      	ldr	r3, [pc, #76]	; (80077ec <pvPortMalloc+0x194>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	3301      	adds	r3, #1
 80077a4:	4a11      	ldr	r2, [pc, #68]	; (80077ec <pvPortMalloc+0x194>)
 80077a6:	6013      	str	r3, [r2, #0]
=======
 800770a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770c:	685a      	ldr	r2, [r3, #4]
 800770e:	4b13      	ldr	r3, [pc, #76]	; (800775c <pvPortMalloc+0x184>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	431a      	orrs	r2, r3
 8007714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007716:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771a:	2200      	movs	r2, #0
 800771c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800771e:	4b13      	ldr	r3, [pc, #76]	; (800776c <pvPortMalloc+0x194>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	3301      	adds	r3, #1
 8007724:	4a11      	ldr	r2, [pc, #68]	; (800776c <pvPortMalloc+0x194>)
 8007726:	6013      	str	r3, [r2, #0]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
<<<<<<< HEAD
 80077a8:	f7fe fcfe 	bl	80061a8 <xTaskResumeAll>
=======
 8007728:	f7fe fcfe 	bl	8006128 <xTaskResumeAll>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
<<<<<<< HEAD
 80077ac:	69fb      	ldr	r3, [r7, #28]
 80077ae:	f003 0307 	and.w	r3, r3, #7
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d00a      	beq.n	80077cc <pvPortMalloc+0x174>
	__asm volatile
 80077b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ba:	f383 8811 	msr	BASEPRI, r3
 80077be:	f3bf 8f6f 	isb	sy
 80077c2:	f3bf 8f4f 	dsb	sy
 80077c6:	60fb      	str	r3, [r7, #12]
}
 80077c8:	bf00      	nop
 80077ca:	e7fe      	b.n	80077ca <pvPortMalloc+0x172>
	return pvReturn;
 80077cc:	69fb      	ldr	r3, [r7, #28]
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3728      	adds	r7, #40	; 0x28
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop
 80077d8:	200024d0 	.word	0x200024d0
 80077dc:	200024e4 	.word	0x200024e4
 80077e0:	200024d4 	.word	0x200024d4
 80077e4:	200024c8 	.word	0x200024c8
 80077e8:	200024d8 	.word	0x200024d8
 80077ec:	200024dc 	.word	0x200024dc

080077f0 <vPortFree>:
=======
 800772c:	69fb      	ldr	r3, [r7, #28]
 800772e:	f003 0307 	and.w	r3, r3, #7
 8007732:	2b00      	cmp	r3, #0
 8007734:	d00a      	beq.n	800774c <pvPortMalloc+0x174>
	__asm volatile
 8007736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800773a:	f383 8811 	msr	BASEPRI, r3
 800773e:	f3bf 8f6f 	isb	sy
 8007742:	f3bf 8f4f 	dsb	sy
 8007746:	60fb      	str	r3, [r7, #12]
}
 8007748:	bf00      	nop
 800774a:	e7fe      	b.n	800774a <pvPortMalloc+0x172>
	return pvReturn;
 800774c:	69fb      	ldr	r3, [r7, #28]
}
 800774e:	4618      	mov	r0, r3
 8007750:	3728      	adds	r7, #40	; 0x28
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop
 8007758:	2000250c 	.word	0x2000250c
 800775c:	20002520 	.word	0x20002520
 8007760:	20002510 	.word	0x20002510
 8007764:	20002504 	.word	0x20002504
 8007768:	20002514 	.word	0x20002514
 800776c:	20002518 	.word	0x20002518

08007770 <vPortFree>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
<<<<<<< HEAD
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b086      	sub	sp, #24
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d04d      	beq.n	800789e <vPortFree+0xae>
=======
 8007770:	b580      	push	{r7, lr}
 8007772:	b086      	sub	sp, #24
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d04d      	beq.n	800781e <vPortFree+0xae>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
<<<<<<< HEAD
 8007802:	2308      	movs	r3, #8
 8007804:	425b      	negs	r3, r3
 8007806:	697a      	ldr	r2, [r7, #20]
 8007808:	4413      	add	r3, r2
 800780a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	685a      	ldr	r2, [r3, #4]
 8007814:	4b24      	ldr	r3, [pc, #144]	; (80078a8 <vPortFree+0xb8>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4013      	ands	r3, r2
 800781a:	2b00      	cmp	r3, #0
 800781c:	d10a      	bne.n	8007834 <vPortFree+0x44>
	__asm volatile
 800781e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007822:	f383 8811 	msr	BASEPRI, r3
 8007826:	f3bf 8f6f 	isb	sy
 800782a:	f3bf 8f4f 	dsb	sy
 800782e:	60fb      	str	r3, [r7, #12]
}
 8007830:	bf00      	nop
 8007832:	e7fe      	b.n	8007832 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d00a      	beq.n	8007852 <vPortFree+0x62>
	__asm volatile
 800783c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007840:	f383 8811 	msr	BASEPRI, r3
 8007844:	f3bf 8f6f 	isb	sy
 8007848:	f3bf 8f4f 	dsb	sy
 800784c:	60bb      	str	r3, [r7, #8]
}
 800784e:	bf00      	nop
 8007850:	e7fe      	b.n	8007850 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	685a      	ldr	r2, [r3, #4]
 8007856:	4b14      	ldr	r3, [pc, #80]	; (80078a8 <vPortFree+0xb8>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4013      	ands	r3, r2
 800785c:	2b00      	cmp	r3, #0
 800785e:	d01e      	beq.n	800789e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d11a      	bne.n	800789e <vPortFree+0xae>
=======
 8007782:	2308      	movs	r3, #8
 8007784:	425b      	negs	r3, r3
 8007786:	697a      	ldr	r2, [r7, #20]
 8007788:	4413      	add	r3, r2
 800778a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	685a      	ldr	r2, [r3, #4]
 8007794:	4b24      	ldr	r3, [pc, #144]	; (8007828 <vPortFree+0xb8>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4013      	ands	r3, r2
 800779a:	2b00      	cmp	r3, #0
 800779c:	d10a      	bne.n	80077b4 <vPortFree+0x44>
	__asm volatile
 800779e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a2:	f383 8811 	msr	BASEPRI, r3
 80077a6:	f3bf 8f6f 	isb	sy
 80077aa:	f3bf 8f4f 	dsb	sy
 80077ae:	60fb      	str	r3, [r7, #12]
}
 80077b0:	bf00      	nop
 80077b2:	e7fe      	b.n	80077b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d00a      	beq.n	80077d2 <vPortFree+0x62>
	__asm volatile
 80077bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c0:	f383 8811 	msr	BASEPRI, r3
 80077c4:	f3bf 8f6f 	isb	sy
 80077c8:	f3bf 8f4f 	dsb	sy
 80077cc:	60bb      	str	r3, [r7, #8]
}
 80077ce:	bf00      	nop
 80077d0:	e7fe      	b.n	80077d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	685a      	ldr	r2, [r3, #4]
 80077d6:	4b14      	ldr	r3, [pc, #80]	; (8007828 <vPortFree+0xb8>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4013      	ands	r3, r2
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d01e      	beq.n	800781e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d11a      	bne.n	800781e <vPortFree+0xae>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
<<<<<<< HEAD
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	685a      	ldr	r2, [r3, #4]
 800786c:	4b0e      	ldr	r3, [pc, #56]	; (80078a8 <vPortFree+0xb8>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	43db      	mvns	r3, r3
 8007872:	401a      	ands	r2, r3
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007878:	f7fe fc88 	bl	800618c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	685a      	ldr	r2, [r3, #4]
 8007880:	4b0a      	ldr	r3, [pc, #40]	; (80078ac <vPortFree+0xbc>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4413      	add	r3, r2
 8007886:	4a09      	ldr	r2, [pc, #36]	; (80078ac <vPortFree+0xbc>)
 8007888:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800788a:	6938      	ldr	r0, [r7, #16]
 800788c:	f000 f874 	bl	8007978 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007890:	4b07      	ldr	r3, [pc, #28]	; (80078b0 <vPortFree+0xc0>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	3301      	adds	r3, #1
 8007896:	4a06      	ldr	r2, [pc, #24]	; (80078b0 <vPortFree+0xc0>)
 8007898:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800789a:	f7fe fc85 	bl	80061a8 <xTaskResumeAll>
=======
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	685a      	ldr	r2, [r3, #4]
 80077ec:	4b0e      	ldr	r3, [pc, #56]	; (8007828 <vPortFree+0xb8>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	43db      	mvns	r3, r3
 80077f2:	401a      	ands	r2, r3
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80077f8:	f7fe fc88 	bl	800610c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	685a      	ldr	r2, [r3, #4]
 8007800:	4b0a      	ldr	r3, [pc, #40]	; (800782c <vPortFree+0xbc>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4413      	add	r3, r2
 8007806:	4a09      	ldr	r2, [pc, #36]	; (800782c <vPortFree+0xbc>)
 8007808:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800780a:	6938      	ldr	r0, [r7, #16]
 800780c:	f000 f874 	bl	80078f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007810:	4b07      	ldr	r3, [pc, #28]	; (8007830 <vPortFree+0xc0>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	3301      	adds	r3, #1
 8007816:	4a06      	ldr	r2, [pc, #24]	; (8007830 <vPortFree+0xc0>)
 8007818:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800781a:	f7fe fc85 	bl	8006128 <xTaskResumeAll>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
<<<<<<< HEAD
 800789e:	bf00      	nop
 80078a0:	3718      	adds	r7, #24
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	200024e4 	.word	0x200024e4
 80078ac:	200024d4 	.word	0x200024d4
 80078b0:	200024e0 	.word	0x200024e0

080078b4 <prvHeapInit>:
=======
 800781e:	bf00      	nop
 8007820:	3718      	adds	r7, #24
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop
 8007828:	20002520 	.word	0x20002520
 800782c:	20002510 	.word	0x20002510
 8007830:	2000251c 	.word	0x2000251c

08007834 <prvHeapInit>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
<<<<<<< HEAD
 80078b4:	b480      	push	{r7}
 80078b6:	b085      	sub	sp, #20
 80078b8:	af00      	add	r7, sp, #0
=======
 8007834:	b480      	push	{r7}
 8007836:	b085      	sub	sp, #20
 8007838:	af00      	add	r7, sp, #0
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
<<<<<<< HEAD
 80078ba:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80078be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80078c0:	4b27      	ldr	r3, [pc, #156]	; (8007960 <prvHeapInit+0xac>)
 80078c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f003 0307 	and.w	r3, r3, #7
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d00c      	beq.n	80078e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	3307      	adds	r3, #7
 80078d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f023 0307 	bic.w	r3, r3, #7
 80078da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80078dc:	68ba      	ldr	r2, [r7, #8]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	1ad3      	subs	r3, r2, r3
 80078e2:	4a1f      	ldr	r2, [pc, #124]	; (8007960 <prvHeapInit+0xac>)
 80078e4:	4413      	add	r3, r2
 80078e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	607b      	str	r3, [r7, #4]
=======
 800783a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800783e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007840:	4b27      	ldr	r3, [pc, #156]	; (80078e0 <prvHeapInit+0xac>)
 8007842:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f003 0307 	and.w	r3, r3, #7
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00c      	beq.n	8007868 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	3307      	adds	r3, #7
 8007852:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f023 0307 	bic.w	r3, r3, #7
 800785a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800785c:	68ba      	ldr	r2, [r7, #8]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	1ad3      	subs	r3, r2, r3
 8007862:	4a1f      	ldr	r2, [pc, #124]	; (80078e0 <prvHeapInit+0xac>)
 8007864:	4413      	add	r3, r2
 8007866:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	607b      	str	r3, [r7, #4]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
<<<<<<< HEAD
 80078ec:	4a1d      	ldr	r2, [pc, #116]	; (8007964 <prvHeapInit+0xb0>)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80078f2:	4b1c      	ldr	r3, [pc, #112]	; (8007964 <prvHeapInit+0xb0>)
 80078f4:	2200      	movs	r2, #0
 80078f6:	605a      	str	r2, [r3, #4]
=======
 800786c:	4a1d      	ldr	r2, [pc, #116]	; (80078e4 <prvHeapInit+0xb0>)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007872:	4b1c      	ldr	r3, [pc, #112]	; (80078e4 <prvHeapInit+0xb0>)
 8007874:	2200      	movs	r2, #0
 8007876:	605a      	str	r2, [r3, #4]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
<<<<<<< HEAD
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	68ba      	ldr	r2, [r7, #8]
 80078fc:	4413      	add	r3, r2
 80078fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007900:	2208      	movs	r2, #8
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	1a9b      	subs	r3, r3, r2
 8007906:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f023 0307 	bic.w	r3, r3, #7
 800790e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	4a15      	ldr	r2, [pc, #84]	; (8007968 <prvHeapInit+0xb4>)
 8007914:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007916:	4b14      	ldr	r3, [pc, #80]	; (8007968 <prvHeapInit+0xb4>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	2200      	movs	r2, #0
 800791c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800791e:	4b12      	ldr	r3, [pc, #72]	; (8007968 <prvHeapInit+0xb4>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	2200      	movs	r2, #0
 8007924:	601a      	str	r2, [r3, #0]
=======
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	68ba      	ldr	r2, [r7, #8]
 800787c:	4413      	add	r3, r2
 800787e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007880:	2208      	movs	r2, #8
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	1a9b      	subs	r3, r3, r2
 8007886:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f023 0307 	bic.w	r3, r3, #7
 800788e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	4a15      	ldr	r2, [pc, #84]	; (80078e8 <prvHeapInit+0xb4>)
 8007894:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007896:	4b14      	ldr	r3, [pc, #80]	; (80078e8 <prvHeapInit+0xb4>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	2200      	movs	r2, #0
 800789c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800789e:	4b12      	ldr	r3, [pc, #72]	; (80078e8 <prvHeapInit+0xb4>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	2200      	movs	r2, #0
 80078a4:	601a      	str	r2, [r3, #0]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
<<<<<<< HEAD
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	68fa      	ldr	r2, [r7, #12]
 800792e:	1ad2      	subs	r2, r2, r3
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007934:	4b0c      	ldr	r3, [pc, #48]	; (8007968 <prvHeapInit+0xb4>)
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	4a0a      	ldr	r2, [pc, #40]	; (800796c <prvHeapInit+0xb8>)
 8007942:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	4a09      	ldr	r2, [pc, #36]	; (8007970 <prvHeapInit+0xbc>)
 800794a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800794c:	4b09      	ldr	r3, [pc, #36]	; (8007974 <prvHeapInit+0xc0>)
 800794e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007952:	601a      	str	r2, [r3, #0]
}
 8007954:	bf00      	nop
 8007956:	3714      	adds	r7, #20
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr
 8007960:	20001528 	.word	0x20001528
 8007964:	200024c8 	.word	0x200024c8
 8007968:	200024d0 	.word	0x200024d0
 800796c:	200024d8 	.word	0x200024d8
 8007970:	200024d4 	.word	0x200024d4
 8007974:	200024e4 	.word	0x200024e4

08007978 <prvInsertBlockIntoFreeList>:
=======
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	68fa      	ldr	r2, [r7, #12]
 80078ae:	1ad2      	subs	r2, r2, r3
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80078b4:	4b0c      	ldr	r3, [pc, #48]	; (80078e8 <prvHeapInit+0xb4>)
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	4a0a      	ldr	r2, [pc, #40]	; (80078ec <prvHeapInit+0xb8>)
 80078c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	4a09      	ldr	r2, [pc, #36]	; (80078f0 <prvHeapInit+0xbc>)
 80078ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80078cc:	4b09      	ldr	r3, [pc, #36]	; (80078f4 <prvHeapInit+0xc0>)
 80078ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80078d2:	601a      	str	r2, [r3, #0]
}
 80078d4:	bf00      	nop
 80078d6:	3714      	adds	r7, #20
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr
 80078e0:	20001564 	.word	0x20001564
 80078e4:	20002504 	.word	0x20002504
 80078e8:	2000250c 	.word	0x2000250c
 80078ec:	20002514 	.word	0x20002514
 80078f0:	20002510 	.word	0x20002510
 80078f4:	20002520 	.word	0x20002520

080078f8 <prvInsertBlockIntoFreeList>:
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
<<<<<<< HEAD
 8007978:	b480      	push	{r7}
 800797a:	b085      	sub	sp, #20
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
=======
 80078f8:	b480      	push	{r7}
 80078fa:	b085      	sub	sp, #20
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
<<<<<<< HEAD
 8007980:	4b28      	ldr	r3, [pc, #160]	; (8007a24 <prvInsertBlockIntoFreeList+0xac>)
 8007982:	60fb      	str	r3, [r7, #12]
 8007984:	e002      	b.n	800798c <prvInsertBlockIntoFreeList+0x14>
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	60fb      	str	r3, [r7, #12]
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	429a      	cmp	r2, r3
 8007994:	d8f7      	bhi.n	8007986 <prvInsertBlockIntoFreeList+0xe>
=======
 8007900:	4b28      	ldr	r3, [pc, #160]	; (80079a4 <prvInsertBlockIntoFreeList+0xac>)
 8007902:	60fb      	str	r3, [r7, #12]
 8007904:	e002      	b.n	800790c <prvInsertBlockIntoFreeList+0x14>
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	60fb      	str	r3, [r7, #12]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	429a      	cmp	r2, r3
 8007914:	d8f7      	bhi.n	8007906 <prvInsertBlockIntoFreeList+0xe>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
<<<<<<< HEAD
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	68ba      	ldr	r2, [r7, #8]
 80079a0:	4413      	add	r3, r2
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d108      	bne.n	80079ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	685a      	ldr	r2, [r3, #4]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	441a      	add	r2, r3
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	607b      	str	r3, [r7, #4]
=======
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	68ba      	ldr	r2, [r7, #8]
 8007920:	4413      	add	r3, r2
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	429a      	cmp	r2, r3
 8007926:	d108      	bne.n	800793a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	685a      	ldr	r2, [r3, #4]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	441a      	add	r2, r3
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	607b      	str	r3, [r7, #4]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
<<<<<<< HEAD
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	68ba      	ldr	r2, [r7, #8]
 80079c4:	441a      	add	r2, r3
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d118      	bne.n	8007a00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681a      	ldr	r2, [r3, #0]
 80079d2:	4b15      	ldr	r3, [pc, #84]	; (8007a28 <prvInsertBlockIntoFreeList+0xb0>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d00d      	beq.n	80079f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	685a      	ldr	r2, [r3, #4]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	441a      	add	r2, r3
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	681a      	ldr	r2, [r3, #0]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	601a      	str	r2, [r3, #0]
 80079f4:	e008      	b.n	8007a08 <prvInsertBlockIntoFreeList+0x90>
=======
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	68ba      	ldr	r2, [r7, #8]
 8007944:	441a      	add	r2, r3
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	429a      	cmp	r2, r3
 800794c:	d118      	bne.n	8007980 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681a      	ldr	r2, [r3, #0]
 8007952:	4b15      	ldr	r3, [pc, #84]	; (80079a8 <prvInsertBlockIntoFreeList+0xb0>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	429a      	cmp	r2, r3
 8007958:	d00d      	beq.n	8007976 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	685a      	ldr	r2, [r3, #4]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	441a      	add	r2, r3
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	601a      	str	r2, [r3, #0]
 8007974:	e008      	b.n	8007988 <prvInsertBlockIntoFreeList+0x90>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
<<<<<<< HEAD
 80079f6:	4b0c      	ldr	r3, [pc, #48]	; (8007a28 <prvInsertBlockIntoFreeList+0xb0>)
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	601a      	str	r2, [r3, #0]
 80079fe:	e003      	b.n	8007a08 <prvInsertBlockIntoFreeList+0x90>
=======
 8007976:	4b0c      	ldr	r3, [pc, #48]	; (80079a8 <prvInsertBlockIntoFreeList+0xb0>)
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	601a      	str	r2, [r3, #0]
 800797e:	e003      	b.n	8007988 <prvInsertBlockIntoFreeList+0x90>
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
<<<<<<< HEAD
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681a      	ldr	r2, [r3, #0]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	601a      	str	r2, [r3, #0]
=======
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	601a      	str	r2, [r3, #0]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
<<<<<<< HEAD
 8007a08:	68fa      	ldr	r2, [r7, #12]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d002      	beq.n	8007a16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	601a      	str	r2, [r3, #0]
=======
 8007988:	68fa      	ldr	r2, [r7, #12]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	429a      	cmp	r2, r3
 800798e:	d002      	beq.n	8007996 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	601a      	str	r2, [r3, #0]
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< HEAD
 8007a16:	bf00      	nop
 8007a18:	3714      	adds	r7, #20
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr
 8007a22:	bf00      	nop
 8007a24:	200024c8 	.word	0x200024c8
 8007a28:	200024d0 	.word	0x200024d0

08007a2c <memset>:
 8007a2c:	4402      	add	r2, r0
 8007a2e:	4603      	mov	r3, r0
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d100      	bne.n	8007a36 <memset+0xa>
 8007a34:	4770      	bx	lr
 8007a36:	f803 1b01 	strb.w	r1, [r3], #1
 8007a3a:	e7f9      	b.n	8007a30 <memset+0x4>

08007a3c <_reclaim_reent>:
 8007a3c:	4b29      	ldr	r3, [pc, #164]	; (8007ae4 <_reclaim_reent+0xa8>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4283      	cmp	r3, r0
 8007a42:	b570      	push	{r4, r5, r6, lr}
 8007a44:	4604      	mov	r4, r0
 8007a46:	d04b      	beq.n	8007ae0 <_reclaim_reent+0xa4>
 8007a48:	69c3      	ldr	r3, [r0, #28]
 8007a4a:	b143      	cbz	r3, 8007a5e <_reclaim_reent+0x22>
 8007a4c:	68db      	ldr	r3, [r3, #12]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d144      	bne.n	8007adc <_reclaim_reent+0xa0>
 8007a52:	69e3      	ldr	r3, [r4, #28]
 8007a54:	6819      	ldr	r1, [r3, #0]
 8007a56:	b111      	cbz	r1, 8007a5e <_reclaim_reent+0x22>
 8007a58:	4620      	mov	r0, r4
 8007a5a:	f000 f879 	bl	8007b50 <_free_r>
 8007a5e:	6961      	ldr	r1, [r4, #20]
 8007a60:	b111      	cbz	r1, 8007a68 <_reclaim_reent+0x2c>
 8007a62:	4620      	mov	r0, r4
 8007a64:	f000 f874 	bl	8007b50 <_free_r>
 8007a68:	69e1      	ldr	r1, [r4, #28]
 8007a6a:	b111      	cbz	r1, 8007a72 <_reclaim_reent+0x36>
 8007a6c:	4620      	mov	r0, r4
 8007a6e:	f000 f86f 	bl	8007b50 <_free_r>
 8007a72:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007a74:	b111      	cbz	r1, 8007a7c <_reclaim_reent+0x40>
 8007a76:	4620      	mov	r0, r4
 8007a78:	f000 f86a 	bl	8007b50 <_free_r>
 8007a7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a7e:	b111      	cbz	r1, 8007a86 <_reclaim_reent+0x4a>
 8007a80:	4620      	mov	r0, r4
 8007a82:	f000 f865 	bl	8007b50 <_free_r>
 8007a86:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007a88:	b111      	cbz	r1, 8007a90 <_reclaim_reent+0x54>
 8007a8a:	4620      	mov	r0, r4
 8007a8c:	f000 f860 	bl	8007b50 <_free_r>
 8007a90:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007a92:	b111      	cbz	r1, 8007a9a <_reclaim_reent+0x5e>
 8007a94:	4620      	mov	r0, r4
 8007a96:	f000 f85b 	bl	8007b50 <_free_r>
 8007a9a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007a9c:	b111      	cbz	r1, 8007aa4 <_reclaim_reent+0x68>
 8007a9e:	4620      	mov	r0, r4
 8007aa0:	f000 f856 	bl	8007b50 <_free_r>
 8007aa4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007aa6:	b111      	cbz	r1, 8007aae <_reclaim_reent+0x72>
 8007aa8:	4620      	mov	r0, r4
 8007aaa:	f000 f851 	bl	8007b50 <_free_r>
 8007aae:	6a23      	ldr	r3, [r4, #32]
 8007ab0:	b1b3      	cbz	r3, 8007ae0 <_reclaim_reent+0xa4>
 8007ab2:	4620      	mov	r0, r4
 8007ab4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007ab8:	4718      	bx	r3
 8007aba:	5949      	ldr	r1, [r1, r5]
 8007abc:	b941      	cbnz	r1, 8007ad0 <_reclaim_reent+0x94>
 8007abe:	3504      	adds	r5, #4
 8007ac0:	69e3      	ldr	r3, [r4, #28]
 8007ac2:	2d80      	cmp	r5, #128	; 0x80
 8007ac4:	68d9      	ldr	r1, [r3, #12]
 8007ac6:	d1f8      	bne.n	8007aba <_reclaim_reent+0x7e>
 8007ac8:	4620      	mov	r0, r4
 8007aca:	f000 f841 	bl	8007b50 <_free_r>
 8007ace:	e7c0      	b.n	8007a52 <_reclaim_reent+0x16>
 8007ad0:	680e      	ldr	r6, [r1, #0]
 8007ad2:	4620      	mov	r0, r4
 8007ad4:	f000 f83c 	bl	8007b50 <_free_r>
 8007ad8:	4631      	mov	r1, r6
 8007ada:	e7ef      	b.n	8007abc <_reclaim_reent+0x80>
 8007adc:	2500      	movs	r5, #0
 8007ade:	e7ef      	b.n	8007ac0 <_reclaim_reent+0x84>
 8007ae0:	bd70      	pop	{r4, r5, r6, pc}
 8007ae2:	bf00      	nop
 8007ae4:	2000005c 	.word	0x2000005c

08007ae8 <__libc_init_array>:
 8007ae8:	b570      	push	{r4, r5, r6, lr}
 8007aea:	4d0d      	ldr	r5, [pc, #52]	; (8007b20 <__libc_init_array+0x38>)
 8007aec:	4c0d      	ldr	r4, [pc, #52]	; (8007b24 <__libc_init_array+0x3c>)
 8007aee:	1b64      	subs	r4, r4, r5
 8007af0:	10a4      	asrs	r4, r4, #2
 8007af2:	2600      	movs	r6, #0
 8007af4:	42a6      	cmp	r6, r4
 8007af6:	d109      	bne.n	8007b0c <__libc_init_array+0x24>
 8007af8:	4d0b      	ldr	r5, [pc, #44]	; (8007b28 <__libc_init_array+0x40>)
 8007afa:	4c0c      	ldr	r4, [pc, #48]	; (8007b2c <__libc_init_array+0x44>)
 8007afc:	f000 f880 	bl	8007c00 <_init>
 8007b00:	1b64      	subs	r4, r4, r5
 8007b02:	10a4      	asrs	r4, r4, #2
 8007b04:	2600      	movs	r6, #0
 8007b06:	42a6      	cmp	r6, r4
 8007b08:	d105      	bne.n	8007b16 <__libc_init_array+0x2e>
 8007b0a:	bd70      	pop	{r4, r5, r6, pc}
 8007b0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b10:	4798      	blx	r3
 8007b12:	3601      	adds	r6, #1
 8007b14:	e7ee      	b.n	8007af4 <__libc_init_array+0xc>
 8007b16:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b1a:	4798      	blx	r3
 8007b1c:	3601      	adds	r6, #1
 8007b1e:	e7f2      	b.n	8007b06 <__libc_init_array+0x1e>
 8007b20:	08007d6c 	.word	0x08007d6c
 8007b24:	08007d6c 	.word	0x08007d6c
 8007b28:	08007d6c 	.word	0x08007d6c
 8007b2c:	08007d70 	.word	0x08007d70

08007b30 <__retarget_lock_acquire_recursive>:
 8007b30:	4770      	bx	lr

08007b32 <__retarget_lock_release_recursive>:
 8007b32:	4770      	bx	lr

08007b34 <memcpy>:
 8007b34:	440a      	add	r2, r1
 8007b36:	4291      	cmp	r1, r2
 8007b38:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b3c:	d100      	bne.n	8007b40 <memcpy+0xc>
 8007b3e:	4770      	bx	lr
 8007b40:	b510      	push	{r4, lr}
 8007b42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b4a:	4291      	cmp	r1, r2
 8007b4c:	d1f9      	bne.n	8007b42 <memcpy+0xe>
 8007b4e:	bd10      	pop	{r4, pc}

08007b50 <_free_r>:
 8007b50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b52:	2900      	cmp	r1, #0
 8007b54:	d044      	beq.n	8007be0 <_free_r+0x90>
 8007b56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b5a:	9001      	str	r0, [sp, #4]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	f1a1 0404 	sub.w	r4, r1, #4
 8007b62:	bfb8      	it	lt
 8007b64:	18e4      	addlt	r4, r4, r3
 8007b66:	f000 f83f 	bl	8007be8 <__malloc_lock>
 8007b6a:	4a1e      	ldr	r2, [pc, #120]	; (8007be4 <_free_r+0x94>)
 8007b6c:	9801      	ldr	r0, [sp, #4]
 8007b6e:	6813      	ldr	r3, [r2, #0]
 8007b70:	b933      	cbnz	r3, 8007b80 <_free_r+0x30>
 8007b72:	6063      	str	r3, [r4, #4]
 8007b74:	6014      	str	r4, [r2, #0]
 8007b76:	b003      	add	sp, #12
 8007b78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b7c:	f000 b83a 	b.w	8007bf4 <__malloc_unlock>
 8007b80:	42a3      	cmp	r3, r4
 8007b82:	d908      	bls.n	8007b96 <_free_r+0x46>
 8007b84:	6825      	ldr	r5, [r4, #0]
 8007b86:	1961      	adds	r1, r4, r5
 8007b88:	428b      	cmp	r3, r1
 8007b8a:	bf01      	itttt	eq
 8007b8c:	6819      	ldreq	r1, [r3, #0]
 8007b8e:	685b      	ldreq	r3, [r3, #4]
 8007b90:	1949      	addeq	r1, r1, r5
 8007b92:	6021      	streq	r1, [r4, #0]
 8007b94:	e7ed      	b.n	8007b72 <_free_r+0x22>
 8007b96:	461a      	mov	r2, r3
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	b10b      	cbz	r3, 8007ba0 <_free_r+0x50>
 8007b9c:	42a3      	cmp	r3, r4
 8007b9e:	d9fa      	bls.n	8007b96 <_free_r+0x46>
 8007ba0:	6811      	ldr	r1, [r2, #0]
 8007ba2:	1855      	adds	r5, r2, r1
 8007ba4:	42a5      	cmp	r5, r4
 8007ba6:	d10b      	bne.n	8007bc0 <_free_r+0x70>
 8007ba8:	6824      	ldr	r4, [r4, #0]
 8007baa:	4421      	add	r1, r4
 8007bac:	1854      	adds	r4, r2, r1
 8007bae:	42a3      	cmp	r3, r4
 8007bb0:	6011      	str	r1, [r2, #0]
 8007bb2:	d1e0      	bne.n	8007b76 <_free_r+0x26>
 8007bb4:	681c      	ldr	r4, [r3, #0]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	6053      	str	r3, [r2, #4]
 8007bba:	440c      	add	r4, r1
 8007bbc:	6014      	str	r4, [r2, #0]
 8007bbe:	e7da      	b.n	8007b76 <_free_r+0x26>
 8007bc0:	d902      	bls.n	8007bc8 <_free_r+0x78>
 8007bc2:	230c      	movs	r3, #12
 8007bc4:	6003      	str	r3, [r0, #0]
 8007bc6:	e7d6      	b.n	8007b76 <_free_r+0x26>
 8007bc8:	6825      	ldr	r5, [r4, #0]
 8007bca:	1961      	adds	r1, r4, r5
 8007bcc:	428b      	cmp	r3, r1
 8007bce:	bf04      	itt	eq
 8007bd0:	6819      	ldreq	r1, [r3, #0]
 8007bd2:	685b      	ldreq	r3, [r3, #4]
 8007bd4:	6063      	str	r3, [r4, #4]
 8007bd6:	bf04      	itt	eq
 8007bd8:	1949      	addeq	r1, r1, r5
 8007bda:	6021      	streq	r1, [r4, #0]
 8007bdc:	6054      	str	r4, [r2, #4]
 8007bde:	e7ca      	b.n	8007b76 <_free_r+0x26>
 8007be0:	b003      	add	sp, #12
 8007be2:	bd30      	pop	{r4, r5, pc}
 8007be4:	20002624 	.word	0x20002624

08007be8 <__malloc_lock>:
 8007be8:	4801      	ldr	r0, [pc, #4]	; (8007bf0 <__malloc_lock+0x8>)
 8007bea:	f7ff bfa1 	b.w	8007b30 <__retarget_lock_acquire_recursive>
 8007bee:	bf00      	nop
 8007bf0:	20002620 	.word	0x20002620

08007bf4 <__malloc_unlock>:
 8007bf4:	4801      	ldr	r0, [pc, #4]	; (8007bfc <__malloc_unlock+0x8>)
 8007bf6:	f7ff bf9c 	b.w	8007b32 <__retarget_lock_release_recursive>
 8007bfa:	bf00      	nop
 8007bfc:	20002620 	.word	0x20002620

08007c00 <_init>:
 8007c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c02:	bf00      	nop
 8007c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c06:	bc08      	pop	{r3}
 8007c08:	469e      	mov	lr, r3
 8007c0a:	4770      	bx	lr

08007c0c <_fini>:
 8007c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c0e:	bf00      	nop
 8007c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c12:	bc08      	pop	{r3}
 8007c14:	469e      	mov	lr, r3
 8007c16:	4770      	bx	lr
=======
 8007996:	bf00      	nop
 8007998:	3714      	adds	r7, #20
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr
 80079a2:	bf00      	nop
 80079a4:	20002504 	.word	0x20002504
 80079a8:	2000250c 	.word	0x2000250c

080079ac <__libc_init_array>:
 80079ac:	b570      	push	{r4, r5, r6, lr}
 80079ae:	4d0d      	ldr	r5, [pc, #52]	; (80079e4 <__libc_init_array+0x38>)
 80079b0:	4c0d      	ldr	r4, [pc, #52]	; (80079e8 <__libc_init_array+0x3c>)
 80079b2:	1b64      	subs	r4, r4, r5
 80079b4:	10a4      	asrs	r4, r4, #2
 80079b6:	2600      	movs	r6, #0
 80079b8:	42a6      	cmp	r6, r4
 80079ba:	d109      	bne.n	80079d0 <__libc_init_array+0x24>
 80079bc:	4d0b      	ldr	r5, [pc, #44]	; (80079ec <__libc_init_array+0x40>)
 80079be:	4c0c      	ldr	r4, [pc, #48]	; (80079f0 <__libc_init_array+0x44>)
 80079c0:	f000 f8f2 	bl	8007ba8 <_init>
 80079c4:	1b64      	subs	r4, r4, r5
 80079c6:	10a4      	asrs	r4, r4, #2
 80079c8:	2600      	movs	r6, #0
 80079ca:	42a6      	cmp	r6, r4
 80079cc:	d105      	bne.n	80079da <__libc_init_array+0x2e>
 80079ce:	bd70      	pop	{r4, r5, r6, pc}
 80079d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80079d4:	4798      	blx	r3
 80079d6:	3601      	adds	r6, #1
 80079d8:	e7ee      	b.n	80079b8 <__libc_init_array+0xc>
 80079da:	f855 3b04 	ldr.w	r3, [r5], #4
 80079de:	4798      	blx	r3
 80079e0:	3601      	adds	r6, #1
 80079e2:	e7f2      	b.n	80079ca <__libc_init_array+0x1e>
 80079e4:	08007d74 	.word	0x08007d74
 80079e8:	08007d74 	.word	0x08007d74
 80079ec:	08007d74 	.word	0x08007d74
 80079f0:	08007d78 	.word	0x08007d78

080079f4 <__retarget_lock_acquire_recursive>:
 80079f4:	4770      	bx	lr

080079f6 <__retarget_lock_release_recursive>:
 80079f6:	4770      	bx	lr

080079f8 <memcpy>:
 80079f8:	440a      	add	r2, r1
 80079fa:	4291      	cmp	r1, r2
 80079fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a00:	d100      	bne.n	8007a04 <memcpy+0xc>
 8007a02:	4770      	bx	lr
 8007a04:	b510      	push	{r4, lr}
 8007a06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a0e:	4291      	cmp	r1, r2
 8007a10:	d1f9      	bne.n	8007a06 <memcpy+0xe>
 8007a12:	bd10      	pop	{r4, pc}

08007a14 <memset>:
 8007a14:	4402      	add	r2, r0
 8007a16:	4603      	mov	r3, r0
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d100      	bne.n	8007a1e <memset+0xa>
 8007a1c:	4770      	bx	lr
 8007a1e:	f803 1b01 	strb.w	r1, [r3], #1
 8007a22:	e7f9      	b.n	8007a18 <memset+0x4>

08007a24 <cleanup_glue>:
 8007a24:	b538      	push	{r3, r4, r5, lr}
 8007a26:	460c      	mov	r4, r1
 8007a28:	6809      	ldr	r1, [r1, #0]
 8007a2a:	4605      	mov	r5, r0
 8007a2c:	b109      	cbz	r1, 8007a32 <cleanup_glue+0xe>
 8007a2e:	f7ff fff9 	bl	8007a24 <cleanup_glue>
 8007a32:	4621      	mov	r1, r4
 8007a34:	4628      	mov	r0, r5
 8007a36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a3a:	f000 b869 	b.w	8007b10 <_free_r>
	...

08007a40 <_reclaim_reent>:
 8007a40:	4b2c      	ldr	r3, [pc, #176]	; (8007af4 <_reclaim_reent+0xb4>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4283      	cmp	r3, r0
 8007a46:	b570      	push	{r4, r5, r6, lr}
 8007a48:	4604      	mov	r4, r0
 8007a4a:	d051      	beq.n	8007af0 <_reclaim_reent+0xb0>
 8007a4c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007a4e:	b143      	cbz	r3, 8007a62 <_reclaim_reent+0x22>
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d14a      	bne.n	8007aec <_reclaim_reent+0xac>
 8007a56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a58:	6819      	ldr	r1, [r3, #0]
 8007a5a:	b111      	cbz	r1, 8007a62 <_reclaim_reent+0x22>
 8007a5c:	4620      	mov	r0, r4
 8007a5e:	f000 f857 	bl	8007b10 <_free_r>
 8007a62:	6961      	ldr	r1, [r4, #20]
 8007a64:	b111      	cbz	r1, 8007a6c <_reclaim_reent+0x2c>
 8007a66:	4620      	mov	r0, r4
 8007a68:	f000 f852 	bl	8007b10 <_free_r>
 8007a6c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007a6e:	b111      	cbz	r1, 8007a76 <_reclaim_reent+0x36>
 8007a70:	4620      	mov	r0, r4
 8007a72:	f000 f84d 	bl	8007b10 <_free_r>
 8007a76:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007a78:	b111      	cbz	r1, 8007a80 <_reclaim_reent+0x40>
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	f000 f848 	bl	8007b10 <_free_r>
 8007a80:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007a82:	b111      	cbz	r1, 8007a8a <_reclaim_reent+0x4a>
 8007a84:	4620      	mov	r0, r4
 8007a86:	f000 f843 	bl	8007b10 <_free_r>
 8007a8a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007a8c:	b111      	cbz	r1, 8007a94 <_reclaim_reent+0x54>
 8007a8e:	4620      	mov	r0, r4
 8007a90:	f000 f83e 	bl	8007b10 <_free_r>
 8007a94:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007a96:	b111      	cbz	r1, 8007a9e <_reclaim_reent+0x5e>
 8007a98:	4620      	mov	r0, r4
 8007a9a:	f000 f839 	bl	8007b10 <_free_r>
 8007a9e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007aa0:	b111      	cbz	r1, 8007aa8 <_reclaim_reent+0x68>
 8007aa2:	4620      	mov	r0, r4
 8007aa4:	f000 f834 	bl	8007b10 <_free_r>
 8007aa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007aaa:	b111      	cbz	r1, 8007ab2 <_reclaim_reent+0x72>
 8007aac:	4620      	mov	r0, r4
 8007aae:	f000 f82f 	bl	8007b10 <_free_r>
 8007ab2:	69a3      	ldr	r3, [r4, #24]
 8007ab4:	b1e3      	cbz	r3, 8007af0 <_reclaim_reent+0xb0>
 8007ab6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007ab8:	4620      	mov	r0, r4
 8007aba:	4798      	blx	r3
 8007abc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007abe:	b1b9      	cbz	r1, 8007af0 <_reclaim_reent+0xb0>
 8007ac0:	4620      	mov	r0, r4
 8007ac2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007ac6:	f7ff bfad 	b.w	8007a24 <cleanup_glue>
 8007aca:	5949      	ldr	r1, [r1, r5]
 8007acc:	b941      	cbnz	r1, 8007ae0 <_reclaim_reent+0xa0>
 8007ace:	3504      	adds	r5, #4
 8007ad0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ad2:	2d80      	cmp	r5, #128	; 0x80
 8007ad4:	68d9      	ldr	r1, [r3, #12]
 8007ad6:	d1f8      	bne.n	8007aca <_reclaim_reent+0x8a>
 8007ad8:	4620      	mov	r0, r4
 8007ada:	f000 f819 	bl	8007b10 <_free_r>
 8007ade:	e7ba      	b.n	8007a56 <_reclaim_reent+0x16>
 8007ae0:	680e      	ldr	r6, [r1, #0]
 8007ae2:	4620      	mov	r0, r4
 8007ae4:	f000 f814 	bl	8007b10 <_free_r>
 8007ae8:	4631      	mov	r1, r6
 8007aea:	e7ef      	b.n	8007acc <_reclaim_reent+0x8c>
 8007aec:	2500      	movs	r5, #0
 8007aee:	e7ef      	b.n	8007ad0 <_reclaim_reent+0x90>
 8007af0:	bd70      	pop	{r4, r5, r6, pc}
 8007af2:	bf00      	nop
 8007af4:	20000010 	.word	0x20000010

08007af8 <__malloc_lock>:
 8007af8:	4801      	ldr	r0, [pc, #4]	; (8007b00 <__malloc_lock+0x8>)
 8007afa:	f7ff bf7b 	b.w	80079f4 <__retarget_lock_acquire_recursive>
 8007afe:	bf00      	nop
 8007b00:	20002524 	.word	0x20002524

08007b04 <__malloc_unlock>:
 8007b04:	4801      	ldr	r0, [pc, #4]	; (8007b0c <__malloc_unlock+0x8>)
 8007b06:	f7ff bf76 	b.w	80079f6 <__retarget_lock_release_recursive>
 8007b0a:	bf00      	nop
 8007b0c:	20002524 	.word	0x20002524

08007b10 <_free_r>:
 8007b10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b12:	2900      	cmp	r1, #0
 8007b14:	d044      	beq.n	8007ba0 <_free_r+0x90>
 8007b16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b1a:	9001      	str	r0, [sp, #4]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	f1a1 0404 	sub.w	r4, r1, #4
 8007b22:	bfb8      	it	lt
 8007b24:	18e4      	addlt	r4, r4, r3
 8007b26:	f7ff ffe7 	bl	8007af8 <__malloc_lock>
 8007b2a:	4a1e      	ldr	r2, [pc, #120]	; (8007ba4 <_free_r+0x94>)
 8007b2c:	9801      	ldr	r0, [sp, #4]
 8007b2e:	6813      	ldr	r3, [r2, #0]
 8007b30:	b933      	cbnz	r3, 8007b40 <_free_r+0x30>
 8007b32:	6063      	str	r3, [r4, #4]
 8007b34:	6014      	str	r4, [r2, #0]
 8007b36:	b003      	add	sp, #12
 8007b38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b3c:	f7ff bfe2 	b.w	8007b04 <__malloc_unlock>
 8007b40:	42a3      	cmp	r3, r4
 8007b42:	d908      	bls.n	8007b56 <_free_r+0x46>
 8007b44:	6825      	ldr	r5, [r4, #0]
 8007b46:	1961      	adds	r1, r4, r5
 8007b48:	428b      	cmp	r3, r1
 8007b4a:	bf01      	itttt	eq
 8007b4c:	6819      	ldreq	r1, [r3, #0]
 8007b4e:	685b      	ldreq	r3, [r3, #4]
 8007b50:	1949      	addeq	r1, r1, r5
 8007b52:	6021      	streq	r1, [r4, #0]
 8007b54:	e7ed      	b.n	8007b32 <_free_r+0x22>
 8007b56:	461a      	mov	r2, r3
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	b10b      	cbz	r3, 8007b60 <_free_r+0x50>
 8007b5c:	42a3      	cmp	r3, r4
 8007b5e:	d9fa      	bls.n	8007b56 <_free_r+0x46>
 8007b60:	6811      	ldr	r1, [r2, #0]
 8007b62:	1855      	adds	r5, r2, r1
 8007b64:	42a5      	cmp	r5, r4
 8007b66:	d10b      	bne.n	8007b80 <_free_r+0x70>
 8007b68:	6824      	ldr	r4, [r4, #0]
 8007b6a:	4421      	add	r1, r4
 8007b6c:	1854      	adds	r4, r2, r1
 8007b6e:	42a3      	cmp	r3, r4
 8007b70:	6011      	str	r1, [r2, #0]
 8007b72:	d1e0      	bne.n	8007b36 <_free_r+0x26>
 8007b74:	681c      	ldr	r4, [r3, #0]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	6053      	str	r3, [r2, #4]
 8007b7a:	4421      	add	r1, r4
 8007b7c:	6011      	str	r1, [r2, #0]
 8007b7e:	e7da      	b.n	8007b36 <_free_r+0x26>
 8007b80:	d902      	bls.n	8007b88 <_free_r+0x78>
 8007b82:	230c      	movs	r3, #12
 8007b84:	6003      	str	r3, [r0, #0]
 8007b86:	e7d6      	b.n	8007b36 <_free_r+0x26>
 8007b88:	6825      	ldr	r5, [r4, #0]
 8007b8a:	1961      	adds	r1, r4, r5
 8007b8c:	428b      	cmp	r3, r1
 8007b8e:	bf04      	itt	eq
 8007b90:	6819      	ldreq	r1, [r3, #0]
 8007b92:	685b      	ldreq	r3, [r3, #4]
 8007b94:	6063      	str	r3, [r4, #4]
 8007b96:	bf04      	itt	eq
 8007b98:	1949      	addeq	r1, r1, r5
 8007b9a:	6021      	streq	r1, [r4, #0]
 8007b9c:	6054      	str	r4, [r2, #4]
 8007b9e:	e7ca      	b.n	8007b36 <_free_r+0x26>
 8007ba0:	b003      	add	sp, #12
 8007ba2:	bd30      	pop	{r4, r5, pc}
 8007ba4:	20002528 	.word	0x20002528

08007ba8 <_init>:
 8007ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007baa:	bf00      	nop
 8007bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bae:	bc08      	pop	{r3}
 8007bb0:	469e      	mov	lr, r3
 8007bb2:	4770      	bx	lr

08007bb4 <_fini>:
 8007bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bb6:	bf00      	nop
 8007bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bba:	bc08      	pop	{r3}
 8007bbc:	469e      	mov	lr, r3
 8007bbe:	4770      	bx	lr
>>>>>>> 180f99fe2e7e7d46b51ba5f79c7da3100d5a8c27
